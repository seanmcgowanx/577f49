{"ast":null,"code":"var _jsxFileName = \"/Users/seanmcgowan/Desktop/journey-builder/src/components/ConfigurationModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport { globalData } from '../services/globalData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfigurationModal = ({\n  editingField,\n  handleModalClose,\n  handleSave,\n  nodeFieldsMappings,\n  selectedNode,\n  getUpstreamNodes,\n  graph\n}) => {\n  _s();\n  var _nodeFieldsMappings$f, _getUpstreamNodes;\n  const [selectedUpstreamForm, setSelectedUpstreamForm] = useState(null);\n  const [selectedUpstreamField, setSelectedUpstreamField] = useState(null);\n  const [globalPropertiesList, setGlobalPropertiesList] = useState([]);\n  useEffect(() => {\n    setGlobalPropertiesList(globalData);\n  }, []);\n  const handleUpstreamFormClick = node => {\n    setSelectedUpstreamForm(node);\n    setSelectedUpstreamField(null); // Reset when form changes\n  };\n  const handleUpstreamFieldClick = field => {\n    setSelectedUpstreamField(field);\n  };\n  const selectedNodeFields = ((_nodeFieldsMappings$f = nodeFieldsMappings.find(mapping => mapping.nodeId === selectedNode.id)) === null || _nodeFieldsMappings$f === void 0 ? void 0 : _nodeFieldsMappings$f.fields) || [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"configuration-modal-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"configuration-modal\",\n      style: {\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Configure Field: \", editingField]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Select data element to map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), globalPropertiesList.map(property => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upstream-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => handleUpstreamFormClick(property.label),\n          style: {\n            cursor: 'pointer',\n            backgroundColor: selectedUpstreamForm === property.label ? '#D3D3D3' : 'transparent'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: property.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), selectedUpstreamForm === property.label && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upstream-form-fields\",\n          children: property.fields.map(field => /*#__PURE__*/_jsxDEV(\"p\", {\n            onClick: () => handleUpstreamFieldClick(field),\n            style: {\n              cursor: 'pointer',\n              marginLeft: '20px',\n              backgroundColor: selectedUpstreamField === field ? '#90EE90' : 'transparent'\n            },\n            children: field\n          }, field, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)]\n      }, property.label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)), (_getUpstreamNodes = getUpstreamNodes(selectedNode.data.label, graph)) === null || _getUpstreamNodes === void 0 ? void 0 : _getUpstreamNodes.map(nodeLabel => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upstream-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => handleUpstreamFormClick(nodeLabel),\n          style: {\n            cursor: 'pointer',\n            backgroundColor: selectedUpstreamForm === nodeLabel ? '#D3D3D3' : 'transparent'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: nodeLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), selectedUpstreamForm === nodeLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upstream-form-fields\",\n          children: selectedNodeFields.map(field => /*#__PURE__*/_jsxDEV(\"p\", {\n            onClick: () => handleUpstreamFieldClick(field),\n            style: {\n              cursor: 'pointer',\n              marginLeft: '20px',\n              backgroundColor: selectedUpstreamField === field ? '#90EE90' : 'transparent'\n            },\n            children: field\n          }, field, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this)]\n      }, nodeLabel, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: [selectedUpstreamForm && selectedUpstreamField && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSave({\n            targetNodeId: selectedNode.data.label,\n            targetFieldName: editingField,\n            sourceNodeId: selectedUpstreamForm,\n            sourceFieldName: selectedUpstreamField\n          }),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleModalClose,\n          style: {\n            marginLeft: selectedUpstreamForm && selectedUpstreamField ? '10px' : '0'\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfigurationModal, \"bjKNDPWiltYCEADzXNjXizFU4xc=\");\n_c = ConfigurationModal;\nexport default ConfigurationModal;\nvar _c;\n$RefreshReg$(_c, \"ConfigurationModal\");","map":{"version":3,"names":["React","useState","useEffect","globalData","jsxDEV","_jsxDEV","ConfigurationModal","editingField","handleModalClose","handleSave","nodeFieldsMappings","selectedNode","getUpstreamNodes","graph","_s","_nodeFieldsMappings$f","_getUpstreamNodes","selectedUpstreamForm","setSelectedUpstreamForm","selectedUpstreamField","setSelectedUpstreamField","globalPropertiesList","setGlobalPropertiesList","handleUpstreamFormClick","node","handleUpstreamFieldClick","field","selectedNodeFields","find","mapping","nodeId","id","fields","className","children","style","position","fileName","_jsxFileName","lineNumber","columnNumber","map","property","onClick","label","cursor","backgroundColor","marginLeft","data","nodeLabel","marginTop","targetNodeId","targetFieldName","sourceNodeId","sourceFieldName","_c","$RefreshReg$"],"sources":["/Users/seanmcgowan/Desktop/journey-builder/src/components/ConfigurationModal.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { GlobalProperties, NodeFieldMapping, CustomNodeData } from '../types';\nimport type { Node } from '@xyflow/react';\nimport '../App.css';\nimport { globalData } from '../services/globalData';\n\ntype ConfigurationModalProps = {\n  editingField: string;\n  handleModalClose: () => void;\n  handleSave: (data: {\n    targetNodeId: string;\n    targetFieldName: string;\n    sourceNodeId: string;\n    sourceFieldName: string;\n  }) => void;\n  nodeFieldsMappings: NodeFieldMapping[];\n  selectedNode: Node<CustomNodeData>;\n  getUpstreamNodes: (nodeId: string, graph: { [key: string]: string[] }) => string[];\n  graph: { [key: string]: string[] };\n};\n\nconst ConfigurationModal = ({\n  editingField,\n  handleModalClose,\n  handleSave,\n  nodeFieldsMappings,\n  selectedNode,\n  getUpstreamNodes,\n  graph,\n}: ConfigurationModalProps) => {\n  const [selectedUpstreamForm, setSelectedUpstreamForm] = useState<string | null>(null);\n  const [selectedUpstreamField, setSelectedUpstreamField] = useState<string | null>(null);\n  const [globalPropertiesList, setGlobalPropertiesList] = useState<GlobalProperties[]>([]);\n\n  useEffect(() => {\n    setGlobalPropertiesList(globalData);\n  }, []);\n\n  const handleUpstreamFormClick = (node: string) => {\n    setSelectedUpstreamForm(node);\n    setSelectedUpstreamField(null); // Reset when form changes\n  };\n\n  const handleUpstreamFieldClick = (field: string) => {\n    setSelectedUpstreamField(field);\n  };\n\n  const selectedNodeFields = nodeFieldsMappings.find(\n    mapping => mapping.nodeId === selectedNode.id\n  )?.fields || [];\n\n  return (\n    <div className=\"configuration-modal-wrapper\">\n      <div className=\"configuration-modal\" style={{ position: 'relative' }}>\n        <h3>Configure Field: {editingField}</h3>\n        <hr />\n        <p><i>Select data element to map</i></p>\n\n        {/* Global Properties Section */}\n        {globalPropertiesList.map(property => (\n          <div key={property.label} className=\"upstream-form\">\n            <p\n              onClick={() => handleUpstreamFormClick(property.label)}\n              style={{\n                cursor: 'pointer',\n                backgroundColor: selectedUpstreamForm === property.label ? '#D3D3D3' : 'transparent',\n              }}\n            >\n              <strong>{property.label}</strong>\n            </p>\n            {selectedUpstreamForm === property.label && (\n              <div className=\"upstream-form-fields\">\n                {property.fields.map(field => (\n                  <p\n                    key={field}\n                    onClick={() => handleUpstreamFieldClick(field)}\n                    style={{\n                      cursor: 'pointer',\n                      marginLeft: '20px',\n                      backgroundColor: selectedUpstreamField === field ? '#90EE90' : 'transparent',\n                    }}\n                  >\n                    {field}\n                  </p>\n                ))}\n              </div>\n            )}\n          </div>\n        ))}\n\n        {/* Upstream Nodes Section */}\n        {getUpstreamNodes(selectedNode.data.label, graph)?.map(nodeLabel => (\n          <div key={nodeLabel} className=\"upstream-form\">\n            <p\n              onClick={() => handleUpstreamFormClick(nodeLabel)}\n              style={{\n                cursor: 'pointer',\n                backgroundColor: selectedUpstreamForm === nodeLabel ? '#D3D3D3' : 'transparent',\n              }}\n            >\n              <strong>{nodeLabel}</strong>\n            </p>\n            {selectedUpstreamForm === nodeLabel && (\n              <div className=\"upstream-form-fields\">\n                {selectedNodeFields.map(field => (\n                  <p\n                    key={field}\n                    onClick={() => handleUpstreamFieldClick(field)}\n                    style={{\n                      cursor: 'pointer',\n                      marginLeft: '20px',\n                      backgroundColor: selectedUpstreamField === field ? '#90EE90' : 'transparent',\n                    }}\n                  >\n                    {field}\n                  </p>\n                ))}\n              </div>\n            )}\n          </div>\n        ))}\n\n        {/* Save and Cancel Buttons */}\n        <div style={{ marginTop: '20px' }}>\n          {selectedUpstreamForm && selectedUpstreamField && (\n            <button\n              onClick={() =>\n                handleSave({\n                  targetNodeId: selectedNode.data.label,\n                  targetFieldName: editingField,\n                  sourceNodeId: selectedUpstreamForm,\n                  sourceFieldName: selectedUpstreamField,\n                })\n              }\n            >\n              Save\n            </button>\n          )}\n          <button\n            onClick={handleModalClose}\n            style={{ marginLeft: selectedUpstreamForm && selectedUpstreamField ? '10px' : '0' }}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfigurationModal;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}