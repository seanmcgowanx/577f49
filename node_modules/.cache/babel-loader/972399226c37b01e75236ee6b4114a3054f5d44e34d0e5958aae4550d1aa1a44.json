{"ast":null,"code":"import { drag } from 'd3-drag';\nimport { select, pointer } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\nconst errorMessages = {\n  error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n  error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n  error003: nodeType => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n  error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n  error005: () => 'Only child nodes can use a parent extent.',\n  error006: () => \"Can't create edge. An edge needs a source and a target.\",\n  error007: id => `The old edge with id=${id} does not exist.`,\n  error009: type => `Marker type \"${type}\" doesn't exist.`,\n  error008: (handleType, {\n    id,\n    sourceHandle,\n    targetHandle\n  }) => `Couldn't create edge for ${handleType} handle id: \"${handleType === 'source' ? sourceHandle : targetHandle}\", edge id: ${id}.`,\n  error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n  error011: edgeType => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n  error012: id => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\n  error013: (lib = 'react') => `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`,\n  error014: () => 'useNodeConnections: No node ID found. Call useNodeConnections inside a custom Node or provide a node ID.',\n  error015: () => 'It seems that you are trying to drag a node that is not initialized. Please use onNodesChange as explained in the docs.'\n};\nconst infiniteExtent = [[Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY], [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY]];\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\n\n/**\n * The `ConnectionMode` is used to set the mode of connection between nodes.\n * The `Strict` mode is the default one and only allows source to target edges.\n * `Loose` mode allows source to source and target to target edges as well.\n *\n * @public\n */\nvar ConnectionMode;\n(function (ConnectionMode) {\n  ConnectionMode[\"Strict\"] = \"strict\";\n  ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\n/**\n * This enum is used to set the different modes of panning the viewport when the\n * user scrolls. The `Free` mode allows the user to pan in any direction by scrolling\n * with a device like a trackpad. The `Vertical` and `Horizontal` modes restrict\n * scroll panning to only the vertical or horizontal axis, respectively.\n *\n * @public\n */\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n  PanOnScrollMode[\"Free\"] = \"free\";\n  PanOnScrollMode[\"Vertical\"] = \"vertical\";\n  PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n  SelectionMode[\"Partial\"] = \"partial\";\n  SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nconst initialConnection = {\n  inProgress: false,\n  isValid: null,\n  from: null,\n  fromHandle: null,\n  fromPosition: null,\n  fromNode: null,\n  to: null,\n  toHandle: null,\n  toPosition: null,\n  toNode: null\n};\n\n/**\n * If you set the `connectionLineType` prop on your [`<ReactFlow />`](/api-reference/react-flow#connection-connectionLineType)\n *component, it will dictate the style of connection line rendered when creating\n *new edges.\n *\n * @public\n *\n * @remarks If you choose to render a custom connection line component, this value will be\n *passed to your component as part of its [`ConnectionLineComponentProps`](/api-reference/types/connection-line-component-props).\n */\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n  ConnectionLineType[\"Bezier\"] = \"default\";\n  ConnectionLineType[\"Straight\"] = \"straight\";\n  ConnectionLineType[\"Step\"] = \"step\";\n  ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n  ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\n/**\n * Edges may optionally have a marker on either end. The MarkerType type enumerates\n * the options available to you when configuring a given marker.\n *\n * @public\n */\nvar MarkerType;\n(function (MarkerType) {\n  MarkerType[\"Arrow\"] = \"arrow\";\n  MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\n\n/**\n * While [`PanelPosition`](/api-reference/types/panel-position) can be used to place a\n * component in the corners of a container, the `Position` enum is less precise and used\n * primarily in relation to edges and handles.\n *\n * @public\n */\nvar Position;\n(function (Position) {\n  Position[\"Left\"] = \"left\";\n  Position[\"Top\"] = \"top\";\n  Position[\"Right\"] = \"right\";\n  Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nconst oppositePosition = {\n  [Position.Left]: Position.Right,\n  [Position.Right]: Position.Left,\n  [Position.Top]: Position.Bottom,\n  [Position.Bottom]: Position.Top\n};\n\n/**\n * @internal\n */\nfunction areConnectionMapsEqual(a, b) {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b || a.size !== b.size) {\n    return false;\n  }\n  if (!a.size && !b.size) {\n    return true;\n  }\n  for (const key of a.keys()) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * We call the callback for all connections in a that are not in b\n *\n * @internal\n */\nfunction handleConnectionChange(a, b, cb) {\n  if (!cb) {\n    return;\n  }\n  const diff = [];\n  a.forEach((connection, key) => {\n    if (!b?.has(key)) {\n      diff.push(connection);\n    }\n  });\n  if (diff.length) {\n    cb(diff);\n  }\n}\nfunction getConnectionStatus(isValid) {\n  return isValid === null ? null : isValid ? 'valid' : 'invalid';\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Test whether an object is usable as an Edge\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Edge\n */\nconst isEdgeBase = element => 'id' in element && 'source' in element && 'target' in element;\n/**\n * Test whether an object is usable as a Node\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Node\n */\nconst isNodeBase = element => 'id' in element && 'position' in element && !('source' in element) && !('target' in element);\nconst isInternalNodeBase = element => 'id' in element && 'internals' in element && !('source' in element) && !('target' in element);\n/**\n * This util is used to tell you what nodes, if any, are connected to the given node\n * as the _target_ of an edge.\n * @public\n * @param node - The node to get the connected nodes from.\n * @param nodes - The array of all nodes.\n * @param edges - The array of all edges.\n * @returns An array of nodes that are connected over edges where the source is the given node.\n *\n * @example\n * ```ts\n *import { getOutgoers } from '@xyflow/react';\n *\n *const nodes = [];\n *const edges = [];\n *\n *const outgoers = getOutgoers(\n *  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\n *  nodes,\n *  edges,\n *);\n *```\n */\nconst getOutgoers = (node, nodes, edges) => {\n  if (!node.id) {\n    return [];\n  }\n  const outgoerIds = new Set();\n  edges.forEach(edge => {\n    if (edge.source === node.id) {\n      outgoerIds.add(edge.target);\n    }\n  });\n  return nodes.filter(n => outgoerIds.has(n.id));\n};\n/**\n * This util is used to tell you what nodes, if any, are connected to the given node\n * as the _source_ of an edge.\n * @public\n * @param node - The node to get the connected nodes from.\n * @param nodes - The array of all nodes.\n * @param edges - The array of all edges.\n * @returns An array of nodes that are connected over edges where the target is the given node.\n *\n * @example\n * ```ts\n *import { getIncomers } from '@xyflow/react';\n *\n *const nodes = [];\n *const edges = [];\n *\n *const incomers = getIncomers(\n *  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\n *  nodes,\n *  edges,\n *);\n *```\n */\nconst getIncomers = (node, nodes, edges) => {\n  if (!node.id) {\n    return [];\n  }\n  const incomersIds = new Set();\n  edges.forEach(edge => {\n    if (edge.target === node.id) {\n      incomersIds.add(edge.source);\n    }\n  });\n  return nodes.filter(n => incomersIds.has(n.id));\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\n  const {\n    width,\n    height\n  } = getNodeDimensions(node);\n  const origin = node.origin ?? nodeOrigin;\n  const offsetX = width * origin[0];\n  const offsetY = height * origin[1];\n  return {\n    x: node.position.x - offsetX,\n    y: node.position.y - offsetY\n  };\n};\n/**\n * Returns the bounding box that contains all the given nodes in an array. This can\n * be useful when combined with [`getViewportForBounds`](/api-reference/utils/get-viewport-for-bounds)\n * to calculate the correct transform to fit the given nodes in a viewport.\n * @public\n * @remarks Useful when combined with {@link getViewportForBounds} to calculate the correct transform to fit the given nodes in a viewport.\n * @param nodes - Nodes to calculate the bounds for.\n * @returns Bounding box enclosing all nodes.\n *\n * @remarks This function was previously called `getRectOfNodes`\n *\n * @example\n * ```js\n *import { getNodesBounds } from '@xyflow/react';\n *\n *const nodes = [\n *  {\n *    id: 'a',\n *    position: { x: 0, y: 0 },\n *    data: { label: 'a' },\n *    width: 50,\n *    height: 25,\n *  },\n *  {\n *    id: 'b',\n *    position: { x: 100, y: 100 },\n *    data: { label: 'b' },\n *    width: 50,\n *    height: 25,\n *  },\n *];\n *\n *const bounds = getNodesBounds(nodes);\n *```\n */\nconst getNodesBounds = (nodes, params = {\n  nodeOrigin: [0, 0]\n}) => {\n  if (process.env.NODE_ENV === 'development' && !params.nodeLookup) {\n    console.warn('Please use `getNodesBounds` from `useReactFlow`/`useSvelteFlow` hook to ensure correct values for sub flows. If not possible, you have to provide a nodeLookup to support sub flows.');\n  }\n  if (nodes.length === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  const box = nodes.reduce((currBox, nodeOrId) => {\n    const isId = typeof nodeOrId === 'string';\n    let currentNode = !params.nodeLookup && !isId ? nodeOrId : undefined;\n    if (params.nodeLookup) {\n      currentNode = isId ? params.nodeLookup.get(nodeOrId) : !isInternalNodeBase(nodeOrId) ? params.nodeLookup.get(nodeOrId.id) : nodeOrId;\n    }\n    const nodeBox = currentNode ? nodeToBox(currentNode, params.nodeOrigin) : {\n      x: 0,\n      y: 0,\n      x2: 0,\n      y2: 0\n    };\n    return getBoundsOfBoxes(currBox, nodeBox);\n  }, {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  });\n  return boxToRect(box);\n};\n/**\n * Determines a bounding box that contains all given nodes in an array\n * @internal\n */\nconst getInternalNodesBounds = (nodeLookup, params = {}) => {\n  if (nodeLookup.size === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  let box = {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  };\n  nodeLookup.forEach(node => {\n    if (params.filter === undefined || params.filter(node)) {\n      const nodeBox = nodeToBox(node);\n      box = getBoundsOfBoxes(box, nodeBox);\n    }\n  });\n  return boxToRect(box);\n};\nconst getNodesInside = (nodes, rect, [tx, ty, tScale] = [0, 0, 1], partially = false,\n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false) => {\n  const paneRect = {\n    ...pointToRendererPoint(rect, [tx, ty, tScale]),\n    width: rect.width / tScale,\n    height: rect.height / tScale\n  };\n  const visibleNodes = [];\n  for (const node of nodes.values()) {\n    const {\n      measured,\n      selectable = true,\n      hidden = false\n    } = node;\n    if (excludeNonSelectableNodes && !selectable || hidden) {\n      continue;\n    }\n    const width = measured.width ?? node.width ?? node.initialWidth ?? null;\n    const height = measured.height ?? node.height ?? node.initialHeight ?? null;\n    const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));\n    const area = (width ?? 0) * (height ?? 0);\n    const partiallyVisible = partially && overlappingArea > 0;\n    const forceInitialRender = !node.internals.handleBounds;\n    const isVisible = forceInitialRender || partiallyVisible || overlappingArea >= area;\n    if (isVisible || node.dragging) {\n      visibleNodes.push(node);\n    }\n  }\n  return visibleNodes;\n};\n/**\n * This utility filters an array of edges, keeping only those where either the source or target\n * node is present in the given array of nodes.\n * @public\n * @param nodes - Nodes you want to get the connected edges for.\n * @param edges - All edges.\n * @returns Array of edges that connect any of the given nodes with each other.\n *\n * @example\n * ```js\n *import { getConnectedEdges } from '@xyflow/react';\n *\n *const nodes = [\n *  { id: 'a', position: { x: 0, y: 0 } },\n *  { id: 'b', position: { x: 100, y: 0 } },\n *];\n *\n *const edges = [\n *  { id: 'a->c', source: 'a', target: 'c' },\n *  { id: 'c->d', source: 'c', target: 'd' },\n *];\n *\n *const connectedEdges = getConnectedEdges(nodes, edges);\n * // => [{ id: 'a->c', source: 'a', target: 'c' }]\n *```\n */\nconst getConnectedEdges = (nodes, edges) => {\n  const nodeIds = new Set();\n  nodes.forEach(node => {\n    nodeIds.add(node.id);\n  });\n  return edges.filter(edge => nodeIds.has(edge.source) || nodeIds.has(edge.target));\n};\nfunction getFitViewNodes(nodeLookup, options) {\n  const fitViewNodes = new Map();\n  const optionNodeIds = options?.nodes ? new Set(options.nodes.map(node => node.id)) : null;\n  nodeLookup.forEach(n => {\n    const isVisible = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);\n    if (isVisible && (!optionNodeIds || optionNodeIds.has(n.id))) {\n      fitViewNodes.set(n.id, n);\n    }\n  });\n  return fitViewNodes;\n}\nasync function fitViewport({\n  nodes,\n  width,\n  height,\n  panZoom,\n  minZoom,\n  maxZoom\n}, options) {\n  if (nodes.size === 0) {\n    return Promise.resolve(true);\n  }\n  const nodesToFit = getFitViewNodes(nodes, options);\n  const bounds = getInternalNodesBounds(nodesToFit);\n  const viewport = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);\n  await panZoom.setViewport(viewport, {\n    duration: options?.duration\n  });\n  return Promise.resolve(true);\n}\n/**\n * This function calculates the next position of a node, taking into account the node's extent, parent node, and origin.\n *\n * @internal\n * @returns position, positionAbsolute\n */\nfunction calculateNodePosition({\n  nodeId,\n  nextPosition,\n  nodeLookup,\n  nodeOrigin = [0, 0],\n  nodeExtent,\n  onError\n}) {\n  const node = nodeLookup.get(nodeId);\n  const parentNode = node.parentId ? nodeLookup.get(node.parentId) : undefined;\n  const {\n    x: parentX,\n    y: parentY\n  } = parentNode ? parentNode.internals.positionAbsolute : {\n    x: 0,\n    y: 0\n  };\n  const origin = node.origin ?? nodeOrigin;\n  let extent = nodeExtent;\n  if (node.extent === 'parent' && !node.expandParent) {\n    if (!parentNode) {\n      onError?.('005', errorMessages['error005']());\n    } else {\n      const parentWidth = parentNode.measured.width;\n      const parentHeight = parentNode.measured.height;\n      if (parentWidth && parentHeight) {\n        extent = [[parentX, parentY], [parentX + parentWidth, parentY + parentHeight]];\n      }\n    }\n  } else if (parentNode && isCoordinateExtent(node.extent)) {\n    extent = [[node.extent[0][0] + parentX, node.extent[0][1] + parentY], [node.extent[1][0] + parentX, node.extent[1][1] + parentY]];\n  }\n  const positionAbsolute = isCoordinateExtent(extent) ? clampPosition(nextPosition, extent, node.measured) : nextPosition;\n  if (node.measured.width === undefined || node.measured.height === undefined) {\n    onError?.('015', errorMessages['error015']());\n  }\n  return {\n    position: {\n      x: positionAbsolute.x - parentX + (node.measured.width ?? 0) * origin[0],\n      y: positionAbsolute.y - parentY + (node.measured.height ?? 0) * origin[1]\n    },\n    positionAbsolute\n  };\n}\n/**\n * Pass in nodes & edges to delete, get arrays of nodes and edges that actually can be deleted\n * @internal\n * @param param.nodesToRemove - The nodes to remove\n * @param param.edgesToRemove - The edges to remove\n * @param param.nodes - All nodes\n * @param param.edges - All edges\n * @param param.onBeforeDelete - Callback to check which nodes and edges can be deleted\n * @returns nodes: nodes that can be deleted, edges: edges that can be deleted\n */\nasync function getElementsToRemove({\n  nodesToRemove = [],\n  edgesToRemove = [],\n  nodes,\n  edges,\n  onBeforeDelete\n}) {\n  const nodeIds = new Set(nodesToRemove.map(node => node.id));\n  const matchingNodes = [];\n  for (const node of nodes) {\n    if (node.deletable === false) {\n      continue;\n    }\n    const isIncluded = nodeIds.has(node.id);\n    const parentHit = !isIncluded && node.parentId && matchingNodes.find(n => n.id === node.parentId);\n    if (isIncluded || parentHit) {\n      matchingNodes.push(node);\n    }\n  }\n  const edgeIds = new Set(edgesToRemove.map(edge => edge.id));\n  const deletableEdges = edges.filter(edge => edge.deletable !== false);\n  const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);\n  const matchingEdges = connectedEdges;\n  for (const edge of deletableEdges) {\n    const isIncluded = edgeIds.has(edge.id);\n    if (isIncluded && !matchingEdges.find(e => e.id === edge.id)) {\n      matchingEdges.push(edge);\n    }\n  }\n  if (!onBeforeDelete) {\n    return {\n      edges: matchingEdges,\n      nodes: matchingNodes\n    };\n  }\n  const onBeforeDeleteResult = await onBeforeDelete({\n    nodes: matchingNodes,\n    edges: matchingEdges\n  });\n  if (typeof onBeforeDeleteResult === 'boolean') {\n    return onBeforeDeleteResult ? {\n      edges: matchingEdges,\n      nodes: matchingNodes\n    } : {\n      edges: [],\n      nodes: []\n    };\n  }\n  return onBeforeDeleteResult;\n}\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\nconst clampPosition = (position = {\n  x: 0,\n  y: 0\n}, extent, dimensions) => ({\n  x: clamp(position.x, extent[0][0], extent[1][0] - (dimensions?.width ?? 0)),\n  y: clamp(position.y, extent[0][1], extent[1][1] - (dimensions?.height ?? 0))\n});\nfunction clampPositionToParent(childPosition, childDimensions, parent) {\n  const {\n    width: parentWidth,\n    height: parentHeight\n  } = getNodeDimensions(parent);\n  const {\n    x: parentX,\n    y: parentY\n  } = parent.internals.positionAbsolute;\n  return clampPosition(childPosition, [[parentX, parentY], [parentX + parentWidth, parentY + parentHeight]], childDimensions);\n}\n/**\n * Calculates the velocity of panning when the mouse is close to the edge of the canvas\n * @internal\n * @param value - One dimensional poition of the mouse (x or y)\n * @param min - Minimal position on canvas before panning starts\n * @param max - Maximal position on canvas before panning starts\n * @returns - A number between 0 and 1 that represents the velocity of panning\n */\nconst calcAutoPanVelocity = (value, min, max) => {\n  if (value < min) {\n    return clamp(Math.abs(value - min), 1, min) / min;\n  } else if (value > max) {\n    return -clamp(Math.abs(value - max), 1, min) / min;\n  }\n  return 0;\n};\nconst calcAutoPan = (pos, bounds, speed = 15, distance = 40) => {\n  const xMovement = calcAutoPanVelocity(pos.x, distance, bounds.width - distance) * speed;\n  const yMovement = calcAutoPanVelocity(pos.y, distance, bounds.height - distance) * speed;\n  return [xMovement, yMovement];\n};\nconst getBoundsOfBoxes = (box1, box2) => ({\n  x: Math.min(box1.x, box2.x),\n  y: Math.min(box1.y, box2.y),\n  x2: Math.max(box1.x2, box2.x2),\n  y2: Math.max(box1.y2, box2.y2)\n});\nconst rectToBox = ({\n  x,\n  y,\n  width,\n  height\n}) => ({\n  x,\n  y,\n  x2: x + width,\n  y2: y + height\n});\nconst boxToRect = ({\n  x,\n  y,\n  x2,\n  y2\n}) => ({\n  x,\n  y,\n  width: x2 - x,\n  height: y2 - y\n});\nconst nodeToRect = (node, nodeOrigin = [0, 0]) => {\n  const {\n    x,\n    y\n  } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);\n  return {\n    x,\n    y,\n    width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n    height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0\n  };\n};\nconst nodeToBox = (node, nodeOrigin = [0, 0]) => {\n  const {\n    x,\n    y\n  } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);\n  return {\n    x,\n    y,\n    x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),\n    y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0)\n  };\n};\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n  const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n  const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n  return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = obj => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = n => !isNaN(n) && isFinite(n);\n// used for a11y key board controls for nodes and edges\nconst devWarn = (id, message) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n  }\n};\nconst snapPosition = (position, snapGrid = [1, 1]) => {\n  return {\n    x: snapGrid[0] * Math.round(position.x / snapGrid[0]),\n    y: snapGrid[1] * Math.round(position.y / snapGrid[1])\n  };\n};\nconst pointToRendererPoint = ({\n  x,\n  y\n}, [tx, ty, tScale], snapToGrid = false, snapGrid = [1, 1]) => {\n  const position = {\n    x: (x - tx) / tScale,\n    y: (y - ty) / tScale\n  };\n  return snapToGrid ? snapPosition(position, snapGrid) : position;\n};\nconst rendererPointToPoint = ({\n  x,\n  y\n}, [tx, ty, tScale]) => {\n  return {\n    x: x * tScale + tx,\n    y: y * tScale + ty\n  };\n};\n/**\n * Parses a single padding value to a number\n * @internal\n * @param padding - Padding to parse\n * @param viewport - Width or height of the viewport\n * @returns The padding in pixels\n */\nfunction parsePadding(padding, viewport) {\n  if (typeof padding === 'number') {\n    return Math.floor((viewport - viewport / (1 + padding)) * 0.5);\n  }\n  if (typeof padding === 'string' && padding.endsWith('px')) {\n    const paddingValue = parseFloat(padding);\n    if (!Number.isNaN(paddingValue)) {\n      return Math.floor(paddingValue);\n    }\n  }\n  if (typeof padding === 'string' && padding.endsWith('%')) {\n    const paddingValue = parseFloat(padding);\n    if (!Number.isNaN(paddingValue)) {\n      return Math.floor(viewport * paddingValue * 0.01);\n    }\n  }\n  console.error(`[React Flow] The padding value \"${padding}\" is invalid. Please provide a number or a string with a valid unit (px or %).`);\n  return 0;\n}\n/**\n * Parses the paddings to an object with top, right, bottom, left, x and y paddings\n * @internal\n * @param padding - Padding to parse\n * @param width - Width of the viewport\n * @param height - Height of the viewport\n * @returns An object with the paddings in pixels\n */\nfunction parsePaddings(padding, width, height) {\n  if (typeof padding === 'string' || typeof padding === 'number') {\n    const paddingY = parsePadding(padding, height);\n    const paddingX = parsePadding(padding, width);\n    return {\n      top: paddingY,\n      right: paddingX,\n      bottom: paddingY,\n      left: paddingX,\n      x: paddingX * 2,\n      y: paddingY * 2\n    };\n  }\n  if (typeof padding === 'object') {\n    const top = parsePadding(padding.top ?? padding.y ?? 0, height);\n    const bottom = parsePadding(padding.bottom ?? padding.y ?? 0, height);\n    const left = parsePadding(padding.left ?? padding.x ?? 0, width);\n    const right = parsePadding(padding.right ?? padding.x ?? 0, width);\n    return {\n      top,\n      right,\n      bottom,\n      left,\n      x: left + right,\n      y: top + bottom\n    };\n  }\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    x: 0,\n    y: 0\n  };\n}\n/**\n * Calculates the resulting paddings if the new viewport is applied\n * @internal\n * @param bounds - Bounds to fit inside viewport\n * @param x - X position of the viewport\n * @param y - Y position of the viewport\n * @param zoom - Zoom level of the viewport\n * @param width - Width of the viewport\n * @param height - Height of the viewport\n * @returns An object with the minimum padding required to fit the bounds inside the viewport\n */\nfunction calculateAppliedPaddings(bounds, x, y, zoom, width, height) {\n  const {\n    x: left,\n    y: top\n  } = rendererPointToPoint(bounds, [x, y, zoom]);\n  const {\n    x: boundRight,\n    y: boundBottom\n  } = rendererPointToPoint({\n    x: bounds.x + bounds.width,\n    y: bounds.y + bounds.height\n  }, [x, y, zoom]);\n  const right = width - boundRight;\n  const bottom = height - boundBottom;\n  return {\n    left: Math.floor(left),\n    top: Math.floor(top),\n    right: Math.floor(right),\n    bottom: Math.floor(bottom)\n  };\n}\n/**\n * Returns a viewport that encloses the given bounds with padding.\n * @public\n * @remarks You can determine bounds of nodes with {@link getNodesBounds} and {@link getBoundsOfRects}\n * @param bounds - Bounds to fit inside viewport.\n * @param width - Width of the viewport.\n * @param height  - Height of the viewport.\n * @param minZoom - Minimum zoom level of the resulting viewport.\n * @param maxZoom - Maximum zoom level of the resulting viewport.\n * @param padding - Padding around the bounds.\n * @returns A transformed {@link Viewport} that encloses the given bounds which you can pass to e.g. {@link setViewport}.\n * @example\n * const { x, y, zoom } = getViewportForBounds(\n * { x: 0, y: 0, width: 100, height: 100},\n * 1200, 800, 0.5, 2);\n */\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {\n  // First we resolve all the paddings to actual pixel values\n  const p = parsePaddings(padding, width, height);\n  const xZoom = (width - p.x) / bounds.width;\n  const yZoom = (height - p.y) / bounds.height;\n  // We calculate the new x, y, zoom for a centered view\n  const zoom = Math.min(xZoom, yZoom);\n  const clampedZoom = clamp(zoom, minZoom, maxZoom);\n  const boundsCenterX = bounds.x + bounds.width / 2;\n  const boundsCenterY = bounds.y + bounds.height / 2;\n  const x = width / 2 - boundsCenterX * clampedZoom;\n  const y = height / 2 - boundsCenterY * clampedZoom;\n  // Then we calculate the minimum padding, to respect asymmetric paddings\n  const newPadding = calculateAppliedPaddings(bounds, x, y, clampedZoom, width, height);\n  // We only want to have an offset if the newPadding is smaller than the required padding\n  const offset = {\n    left: Math.min(newPadding.left - p.left, 0),\n    top: Math.min(newPadding.top - p.top, 0),\n    right: Math.min(newPadding.right - p.right, 0),\n    bottom: Math.min(newPadding.bottom - p.bottom, 0)\n  };\n  return {\n    x: x - offset.left + offset.right,\n    y: y - offset.top + offset.bottom,\n    zoom: clampedZoom\n  };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\nfunction isCoordinateExtent(extent) {\n  return extent !== undefined && extent !== 'parent';\n}\nfunction getNodeDimensions(node) {\n  return {\n    width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n    height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0\n  };\n}\nfunction nodeHasDimensions(node) {\n  return (node.measured?.width ?? node.width ?? node.initialWidth) !== undefined && (node.measured?.height ?? node.height ?? node.initialHeight) !== undefined;\n}\n/**\n * Convert child position to aboslute position\n *\n * @internal\n * @param position\n * @param parentId\n * @param nodeLookup\n * @param nodeOrigin\n * @returns an internal node with an absolute position\n */\nfunction evaluateAbsolutePosition(position, dimensions = {\n  width: 0,\n  height: 0\n}, parentId, nodeLookup, nodeOrigin) {\n  const positionAbsolute = {\n    ...position\n  };\n  const parent = nodeLookup.get(parentId);\n  if (parent) {\n    const origin = parent.origin || nodeOrigin;\n    positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin[0];\n    positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin[1];\n  }\n  return positionAbsolute;\n}\nfunction areSetsEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Polyfill for Promise.withResolvers until we can use it in all browsers\n * @internal\n */\nfunction withResolvers() {\n  let resolve;\n  let reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return {\n    promise,\n    resolve,\n    reject\n  };\n}\nfunction getPointerPosition(event, {\n  snapGrid = [0, 0],\n  snapToGrid = false,\n  transform,\n  containerBounds\n}) {\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const pointerPos = pointToRendererPoint({\n    x: x - (containerBounds?.left ?? 0),\n    y: y - (containerBounds?.top ?? 0)\n  }, transform);\n  const {\n    x: xSnapped,\n    y: ySnapped\n  } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;\n  // we need the snapped position in order to be able to skip unnecessary drag events\n  return {\n    xSnapped,\n    ySnapped,\n    ...pointerPos\n  };\n}\nconst getDimensions = node => ({\n  width: node.offsetWidth,\n  height: node.offsetHeight\n});\nconst getHostForElement = element => element?.getRootNode?.() || window?.document;\nconst inputTags = ['INPUT', 'SELECT', 'TEXTAREA'];\nfunction isInputDOMNode(event) {\n  // using composed path for handling shadow dom\n  const target = event.composedPath?.()?.[0] || event.target;\n  if (target?.nodeType !== 1 /* Node.ELEMENT_NODE */) return false;\n  const isInput = inputTags.includes(target.nodeName) || target.hasAttribute('contenteditable');\n  // when an input field is focused we don't want to trigger deletion or movement of nodes\n  return isInput || !!target.closest('.nokey');\n}\nconst isMouseEvent = event => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n  const isMouse = isMouseEvent(event);\n  const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;\n  const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;\n  return {\n    x: evtX - (bounds?.left ?? 0),\n    y: evtY - (bounds?.top ?? 0)\n  };\n};\n/*\n * The handle bounds are calculated relative to the node element.\n * We store them in the internals object of the node in order to avoid\n * unnecessary recalculations.\n */\nconst getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {\n  const handles = nodeElement.querySelectorAll(`.${type}`);\n  if (!handles || !handles.length) {\n    return null;\n  }\n  return Array.from(handles).map(handle => {\n    const handleBounds = handle.getBoundingClientRect();\n    return {\n      id: handle.getAttribute('data-handleid'),\n      type,\n      nodeId,\n      position: handle.getAttribute('data-handlepos'),\n      x: (handleBounds.left - nodeBounds.left) / zoom,\n      y: (handleBounds.top - nodeBounds.top) / zoom,\n      ...getDimensions(handle)\n    };\n  });\n};\nfunction getBezierEdgeCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourceControlX,\n  sourceControlY,\n  targetControlX,\n  targetControlY\n}) {\n  /*\n   * cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n   * https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n   */\n  const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n  const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n  const offsetX = Math.abs(centerX - sourceX);\n  const offsetY = Math.abs(centerY - sourceY);\n  return [centerX, centerY, offsetX, offsetY];\n}\nfunction calculateControlOffset(distance, curvature) {\n  if (distance >= 0) {\n    return 0.5 * distance;\n  }\n  return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({\n  pos,\n  x1,\n  y1,\n  x2,\n  y2,\n  c\n}) {\n  switch (pos) {\n    case Position.Left:\n      return [x1 - calculateControlOffset(x1 - x2, c), y1];\n    case Position.Right:\n      return [x1 + calculateControlOffset(x2 - x1, c), y1];\n    case Position.Top:\n      return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n    case Position.Bottom:\n      return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n  }\n}\n/**\n * The `getBezierPath` util returns everything you need to render a bezier edge\n *between two nodes.\n * @public\n * @returns A path string you can use in an SVG, the `labelX` and `labelY` position (center of path)\n * and `offsetX`, `offsetY` between source handle and label.\n * - `path`: the path to use in an SVG `<path>` element.\n * - `labelX`: the `x` position you can use to render a label for this edge.\n * - `labelY`: the `y` position you can use to render a label for this edge.\n * - `offsetX`: the absolute difference between the source `x` position and the `x` position of the\n * middle of this path.\n * - `offsetY`: the absolute difference between the source `y` position and the `y` position of the\n * middle of this path.\n * @example\n * ```js\n *  const source = { x: 0, y: 20 };\n *  const target = { x: 150, y: 100 };\n *\n *  const [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\n *    sourceX: source.x,\n *    sourceY: source.y,\n *    sourcePosition: Position.Right,\n *    targetX: target.x,\n *    targetY: target.y,\n *    targetPosition: Position.Left,\n *});\n *```\n *\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to\n *work with multiple edge paths at once.\n */\nfunction getBezierPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top,\n  curvature = 0.25\n}) {\n  const [sourceControlX, sourceControlY] = getControlWithCurvature({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY,\n    c: curvature\n  });\n  const [targetControlX, targetControlY] = getControlWithCurvature({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY,\n    c: curvature\n  });\n  const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourceControlX,\n    sourceControlY,\n    targetControlX,\n    targetControlY\n  });\n  return [`M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\n\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}) {\n  const xOffset = Math.abs(targetX - sourceX) / 2;\n  const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n  const yOffset = Math.abs(targetY - sourceY) / 2;\n  const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n  return [centerX, centerY, xOffset, yOffset];\n}\nfunction getElevatedEdgeZIndex({\n  sourceNode,\n  targetNode,\n  selected = false,\n  zIndex = 0,\n  elevateOnSelect = false\n}) {\n  if (!elevateOnSelect) {\n    return zIndex;\n  }\n  const edgeOrConnectedNodeSelected = selected || targetNode.selected || sourceNode.selected;\n  const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1000);\n  return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n}\nfunction isEdgeVisible({\n  sourceNode,\n  targetNode,\n  width,\n  height,\n  transform\n}) {\n  const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));\n  if (edgeBox.x === edgeBox.x2) {\n    edgeBox.x2 += 1;\n  }\n  if (edgeBox.y === edgeBox.y2) {\n    edgeBox.y2 += 1;\n  }\n  const viewRect = {\n    x: -transform[0] / transform[2],\n    y: -transform[1] / transform[2],\n    width: width / transform[2],\n    height: height / transform[2]\n  };\n  return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;\n}\nconst getEdgeId = ({\n  source,\n  sourceHandle,\n  target,\n  targetHandle\n}) => `xy-edge__${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\nconst connectionExists = (edge, edges) => {\n  return edges.some(el => el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle));\n};\n/**\n * This util is a convenience function to add a new Edge to an array of edges. It also performs some validation to make sure you don't add an invalid edge or duplicate an existing one.\n * @public\n * @param edgeParams - Either an `Edge` or a `Connection` you want to add.\n * @param edges - The array of all current edges.\n * @returns A new array of edges with the new edge added.\n *\n * @remarks If an edge with the same `target` and `source` already exists (and the same\n *`targetHandle` and `sourceHandle` if those are set), then this util won't add\n *a new edge even if the `id` property is different.\n *\n */\nconst addEdge = (edgeParams, edges) => {\n  if (!edgeParams.source || !edgeParams.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  let edge;\n  if (isEdgeBase(edgeParams)) {\n    edge = {\n      ...edgeParams\n    };\n  } else {\n    edge = {\n      ...edgeParams,\n      id: getEdgeId(edgeParams)\n    };\n  }\n  if (connectionExists(edge, edges)) {\n    return edges;\n  }\n  if (edge.sourceHandle === null) {\n    delete edge.sourceHandle;\n  }\n  if (edge.targetHandle === null) {\n    delete edge.targetHandle;\n  }\n  return edges.concat(edge);\n};\n/**\n * A handy utility to update an existing [`Edge`](/api-reference/types/edge) with new properties.\n *This searches your edge array for an edge with a matching `id` and updates its\n *properties with the connection you provide.\n * @public\n * @param oldEdge - The edge you want to update.\n * @param newConnection - The new connection you want to update the edge with.\n * @param edges - The array of all current edges.\n * @returns The updated edges array.\n *\n * @example\n * ```js\n *const onReconnect = useCallback(\n *  (oldEdge: Edge, newConnection: Connection) => setEdges((els) => reconnectEdge(oldEdge, newConnection, els)),[]);\n *```\n */\nconst reconnectEdge = (oldEdge, newConnection, edges, options = {\n  shouldReplaceId: true\n}) => {\n  const {\n    id: oldEdgeId,\n    ...rest\n  } = oldEdge;\n  if (!newConnection.source || !newConnection.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  const foundEdge = edges.find(e => e.id === oldEdge.id);\n  if (!foundEdge) {\n    devWarn('007', errorMessages['error007'](oldEdgeId));\n    return edges;\n  }\n  // Remove old edge and create the new edge with parameters of old edge.\n  const edge = {\n    ...rest,\n    id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n    source: newConnection.source,\n    target: newConnection.target,\n    sourceHandle: newConnection.sourceHandle,\n    targetHandle: newConnection.targetHandle\n  };\n  return edges.filter(e => e.id !== oldEdgeId).concat(edge);\n};\n\n/**\n * Calculates the straight line path between two points.\n * @public\n * @returns A path string you can use in an SVG, the `labelX` and `labelY` position (center of path)\n * and `offsetX`, `offsetY` between source handle and label.\n *\n * - `path`: the path to use in an SVG `<path>` element.\n * - `labelX`: the `x` position you can use to render a label for this edge.\n * - `labelY`: the `y` position you can use to render a label for this edge.\n * - `offsetX`: the absolute difference between the source `x` position and the `x` position of the\n * middle of this path.\n * - `offsetY`: the absolute difference between the source `y` position and the `y` position of the\n * middle of this path.\n * @example\n * ```js\n *  const source = { x: 0, y: 20 };\n *  const target = { x: 150, y: 100 };\n *\n *  const [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\n *    sourceX: source.x,\n *    sourceY: source.y,\n *    sourcePosition: Position.Right,\n *    targetX: target.x,\n *    targetY: target.y,\n *    targetPosition: Position.Left,\n *  });\n * ```\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to work with multiple edge paths at once.\n */\nfunction getStraightPath({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}) {\n  const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  });\n  return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\nconst handleDirections = {\n  [Position.Left]: {\n    x: -1,\n    y: 0\n  },\n  [Position.Right]: {\n    x: 1,\n    y: 0\n  },\n  [Position.Top]: {\n    x: 0,\n    y: -1\n  },\n  [Position.Bottom]: {\n    x: 0,\n    y: 1\n  }\n};\nconst getDirection = ({\n  source,\n  sourcePosition = Position.Bottom,\n  target\n}) => {\n  if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n    return source.x < target.x ? {\n      x: 1,\n      y: 0\n    } : {\n      x: -1,\n      y: 0\n    };\n  }\n  return source.y < target.y ? {\n    x: 0,\n    y: 1\n  } : {\n    x: 0,\n    y: -1\n  };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n/*\n * With this function we try to mimic an orthogonal edge routing behaviour\n * It's not as good as a real orthogonal edge routing, but it's faster and good enough as a default for step and smooth step edges\n */\nfunction getPoints({\n  source,\n  sourcePosition = Position.Bottom,\n  target,\n  targetPosition = Position.Top,\n  center,\n  offset\n}) {\n  const sourceDir = handleDirections[sourcePosition];\n  const targetDir = handleDirections[targetPosition];\n  const sourceGapped = {\n    x: source.x + sourceDir.x * offset,\n    y: source.y + sourceDir.y * offset\n  };\n  const targetGapped = {\n    x: target.x + targetDir.x * offset,\n    y: target.y + targetDir.y * offset\n  };\n  const dir = getDirection({\n    source: sourceGapped,\n    sourcePosition,\n    target: targetGapped\n  });\n  const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n  const currDir = dir[dirAccessor];\n  let points = [];\n  let centerX, centerY;\n  const sourceGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const targetGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y\n  });\n  // opposite handle positions, default case\n  if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n    centerX = center.x ?? defaultCenterX;\n    centerY = center.y ?? defaultCenterY;\n    /*\n     *    --->\n     *    |\n     * >---\n     */\n    const verticalSplit = [{\n      x: centerX,\n      y: sourceGapped.y\n    }, {\n      x: centerX,\n      y: targetGapped.y\n    }];\n    /*\n     *    |\n     *  ---\n     *  |\n     */\n    const horizontalSplit = [{\n      x: sourceGapped.x,\n      y: centerY\n    }, {\n      x: targetGapped.x,\n      y: centerY\n    }];\n    if (sourceDir[dirAccessor] === currDir) {\n      points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n    } else {\n      points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n    }\n  } else {\n    // sourceTarget means we take x from source and y from target, targetSource is the opposite\n    const sourceTarget = [{\n      x: sourceGapped.x,\n      y: targetGapped.y\n    }];\n    const targetSource = [{\n      x: targetGapped.x,\n      y: sourceGapped.y\n    }];\n    // this handles edges with same handle positions\n    if (dirAccessor === 'x') {\n      points = sourceDir.x === currDir ? targetSource : sourceTarget;\n    } else {\n      points = sourceDir.y === currDir ? sourceTarget : targetSource;\n    }\n    if (sourcePosition === targetPosition) {\n      const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n      // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n      if (diff <= offset) {\n        const gapOffset = Math.min(offset - 1, offset - diff);\n        if (sourceDir[dirAccessor] === currDir) {\n          sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n        } else {\n          targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n        }\n      }\n    }\n    // these are conditions for handling mixed handle positions like Right -> Bottom for example\n    if (sourcePosition !== targetPosition) {\n      const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n      const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n      const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n      const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n      const flipSourceTarget = sourceDir[dirAccessor] === 1 && (!isSameDir && sourceGtTargetOppo || isSameDir && sourceLtTargetOppo) || sourceDir[dirAccessor] !== 1 && (!isSameDir && sourceLtTargetOppo || isSameDir && sourceGtTargetOppo);\n      if (flipSourceTarget) {\n        points = dirAccessor === 'x' ? sourceTarget : targetSource;\n      }\n    }\n    const sourceGapPoint = {\n      x: sourceGapped.x + sourceGapOffset.x,\n      y: sourceGapped.y + sourceGapOffset.y\n    };\n    const targetGapPoint = {\n      x: targetGapped.x + targetGapOffset.x,\n      y: targetGapped.y + targetGapOffset.y\n    };\n    const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n    const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n    // we want to place the label on the longest segment of the edge\n    if (maxXDistance >= maxYDistance) {\n      centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n      centerY = points[0].y;\n    } else {\n      centerX = points[0].x;\n      centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n    }\n  }\n  const pathPoints = [source, {\n    x: sourceGapped.x + sourceGapOffset.x,\n    y: sourceGapped.y + sourceGapOffset.y\n  }, ...points, {\n    x: targetGapped.x + targetGapOffset.x,\n    y: targetGapped.y + targetGapOffset.y\n  }, target];\n  return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n  const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n  const {\n    x,\n    y\n  } = b;\n  // no bend\n  if (a.x === x && x === c.x || a.y === y && y === c.y) {\n    return `L${x} ${y}`;\n  }\n  // first segment is horizontal\n  if (a.y === y) {\n    const xDir = a.x < c.x ? -1 : 1;\n    const yDir = a.y < c.y ? 1 : -1;\n    return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n  }\n  const xDir = a.x < c.x ? 1 : -1;\n  const yDir = a.y < c.y ? -1 : 1;\n  return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\n/**\n * The `getSmoothStepPath` util returns everything you need to render a stepped path\n * between two nodes. The `borderRadius` property can be used to choose how rounded\n * the corners of those steps are.\n * @public\n * @returns A path string you can use in an SVG, the `labelX` and `labelY` position (center of path)\n * and `offsetX`, `offsetY` between source handle and label.\n *\n * - `path`: the path to use in an SVG `<path>` element.\n * - `labelX`: the `x` position you can use to render a label for this edge.\n * - `labelY`: the `y` position you can use to render a label for this edge.\n * - `offsetX`: the absolute difference between the source `x` position and the `x` position of the\n * middle of this path.\n * - `offsetY`: the absolute difference between the source `y` position and the `y` position of the\n * middle of this path.\n * @example\n * ```js\n *  const source = { x: 0, y: 20 };\n *  const target = { x: 150, y: 100 };\n *\n *  const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\n *    sourceX: source.x,\n *    sourceY: source.y,\n *    sourcePosition: Position.Right,\n *    targetX: target.x,\n *    targetY: target.y,\n *    targetPosition: Position.Left,\n *  });\n * ```\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to work with multiple edge paths at once.\n */\nfunction getSmoothStepPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top,\n  borderRadius = 5,\n  centerX,\n  centerY,\n  offset = 20\n}) {\n  const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n    source: {\n      x: sourceX,\n      y: sourceY\n    },\n    sourcePosition,\n    target: {\n      x: targetX,\n      y: targetY\n    },\n    targetPosition,\n    center: {\n      x: centerX,\n      y: centerY\n    },\n    offset\n  });\n  const path = points.reduce((res, p, i) => {\n    let segment = '';\n    if (i > 0 && i < points.length - 1) {\n      segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n    } else {\n      segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n    }\n    res += segment;\n    return res;\n  }, '');\n  return [path, labelX, labelY, offsetX, offsetY];\n}\nfunction isNodeInitialized(node) {\n  return node && !!(node.internals.handleBounds || node.handles?.length) && !!(node.measured.width || node.width || node.initialWidth);\n}\nfunction getEdgePosition(params) {\n  const {\n    sourceNode,\n    targetNode\n  } = params;\n  if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {\n    return null;\n  }\n  const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);\n  const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);\n  const sourceHandle = getHandle$1(sourceHandleBounds?.source ?? [], params.sourceHandle);\n  const targetHandle = getHandle$1(\n  // when connection type is loose we can define all handles as sources and connect source -> source\n  params.connectionMode === ConnectionMode.Strict ? targetHandleBounds?.target ?? [] : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []), params.targetHandle);\n  if (!sourceHandle || !targetHandle) {\n    params.onError?.('008', errorMessages['error008'](!sourceHandle ? 'source' : 'target', {\n      id: params.id,\n      sourceHandle: params.sourceHandle,\n      targetHandle: params.targetHandle\n    }));\n    return null;\n  }\n  const sourcePosition = sourceHandle?.position || Position.Bottom;\n  const targetPosition = targetHandle?.position || Position.Top;\n  const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);\n  const target = getHandlePosition(targetNode, targetHandle, targetPosition);\n  return {\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y,\n    sourcePosition,\n    targetPosition\n  };\n}\nfunction toHandleBounds(handles) {\n  if (!handles) {\n    return null;\n  }\n  const source = [];\n  const target = [];\n  for (const handle of handles) {\n    handle.width = handle.width ?? 1;\n    handle.height = handle.height ?? 1;\n    if (handle.type === 'source') {\n      source.push(handle);\n    } else if (handle.type === 'target') {\n      target.push(handle);\n    }\n  }\n  return {\n    source,\n    target\n  };\n}\nfunction getHandlePosition(node, handle, fallbackPosition = Position.Left, center = false) {\n  const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;\n  const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;\n  const {\n    width,\n    height\n  } = handle ?? getNodeDimensions(node);\n  if (center) {\n    return {\n      x: x + width / 2,\n      y: y + height / 2\n    };\n  }\n  const position = handle?.position ?? fallbackPosition;\n  switch (position) {\n    case Position.Top:\n      return {\n        x: x + width / 2,\n        y\n      };\n    case Position.Right:\n      return {\n        x: x + width,\n        y: y + height / 2\n      };\n    case Position.Bottom:\n      return {\n        x: x + width / 2,\n        y: y + height\n      };\n    case Position.Left:\n      return {\n        x,\n        y: y + height / 2\n      };\n  }\n}\nfunction getHandle$1(bounds, handleId) {\n  if (!bounds) {\n    return null;\n  }\n  // if no handleId is given, we use the first handle, otherwise we check for the id\n  return (!handleId ? bounds[0] : bounds.find(d => d.id === handleId)) || null;\n}\nfunction getMarkerId(marker, id) {\n  if (!marker) {\n    return '';\n  }\n  if (typeof marker === 'string') {\n    return marker;\n  }\n  const idPrefix = id ? `${id}__` : '';\n  return `${idPrefix}${Object.keys(marker).sort().map(key => `${key}=${marker[key]}`).join('&')}`;\n}\nfunction createMarkerIds(edges, {\n  id,\n  defaultColor,\n  defaultMarkerStart,\n  defaultMarkerEnd\n}) {\n  const ids = new Set();\n  return edges.reduce((markers, edge) => {\n    [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach(marker => {\n      if (marker && typeof marker === 'object') {\n        const markerId = getMarkerId(marker, id);\n        if (!ids.has(markerId)) {\n          markers.push({\n            id: markerId,\n            color: marker.color || defaultColor,\n            ...marker\n          });\n          ids.add(markerId);\n        }\n      }\n    });\n    return markers;\n  }, []).sort((a, b) => a.id.localeCompare(b.id));\n}\nfunction getNodeToolbarTransform(nodeRect, viewport, position, offset, align) {\n  let alignmentOffset = 0.5;\n  if (align === 'start') {\n    alignmentOffset = 0;\n  } else if (align === 'end') {\n    alignmentOffset = 1;\n  }\n  /*\n   * position === Position.Top\n   * we set the x any y position of the toolbar based on the nodes position\n   */\n  let pos = [(nodeRect.x + nodeRect.width * alignmentOffset) * viewport.zoom + viewport.x, nodeRect.y * viewport.zoom + viewport.y - offset];\n  // and than shift it based on the alignment. The shift values are in %.\n  let shift = [-100 * alignmentOffset, -100];\n  switch (position) {\n    case Position.Right:\n      pos = [(nodeRect.x + nodeRect.width) * viewport.zoom + viewport.x + offset, (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y];\n      shift = [0, -100 * alignmentOffset];\n      break;\n    case Position.Bottom:\n      pos[1] = (nodeRect.y + nodeRect.height) * viewport.zoom + viewport.y + offset;\n      shift[1] = 0;\n      break;\n    case Position.Left:\n      pos = [nodeRect.x * viewport.zoom + viewport.x - offset, (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y];\n      shift = [-100, -100 * alignmentOffset];\n      break;\n  }\n  return `translate(${pos[0]}px, ${pos[1]}px) translate(${shift[0]}%, ${shift[1]}%)`;\n}\nconst defaultOptions = {\n  nodeOrigin: [0, 0],\n  nodeExtent: infiniteExtent,\n  elevateNodesOnSelect: true,\n  defaults: {}\n};\nconst adoptUserNodesDefaultOptions = {\n  ...defaultOptions,\n  checkEquality: true\n};\nfunction mergeObjects(base, incoming) {\n  const result = {\n    ...base\n  };\n  for (const key in incoming) {\n    if (incoming[key] !== undefined) {\n      // typecast is safe here, because we check for undefined\n      result[key] = incoming[key];\n    }\n  }\n  return result;\n}\nfunction updateAbsolutePositions(nodeLookup, parentLookup, options) {\n  const _options = mergeObjects(defaultOptions, options);\n  for (const node of nodeLookup.values()) {\n    if (node.parentId) {\n      updateChildNode(node, nodeLookup, parentLookup, _options);\n    } else {\n      const positionWithOrigin = getNodePositionWithOrigin(node, _options.nodeOrigin);\n      const extent = isCoordinateExtent(node.extent) ? node.extent : _options.nodeExtent;\n      const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(node));\n      node.internals.positionAbsolute = clampedPosition;\n    }\n  }\n}\nfunction adoptUserNodes(nodes, nodeLookup, parentLookup, options) {\n  const _options = mergeObjects(adoptUserNodesDefaultOptions, options);\n  let nodesInitialized = nodes.length > 0;\n  const tmpLookup = new Map(nodeLookup);\n  const selectedNodeZ = _options?.elevateNodesOnSelect ? 1000 : 0;\n  nodeLookup.clear();\n  parentLookup.clear();\n  for (const userNode of nodes) {\n    let internalNode = tmpLookup.get(userNode.id);\n    if (_options.checkEquality && userNode === internalNode?.internals.userNode) {\n      nodeLookup.set(userNode.id, internalNode);\n    } else {\n      const positionWithOrigin = getNodePositionWithOrigin(userNode, _options.nodeOrigin);\n      const extent = isCoordinateExtent(userNode.extent) ? userNode.extent : _options.nodeExtent;\n      const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(userNode));\n      internalNode = {\n        ..._options.defaults,\n        ...userNode,\n        measured: {\n          width: userNode.measured?.width,\n          height: userNode.measured?.height\n        },\n        internals: {\n          positionAbsolute: clampedPosition,\n          // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured\n          handleBounds: !userNode.measured ? undefined : internalNode?.internals.handleBounds,\n          z: calculateZ(userNode, selectedNodeZ),\n          userNode\n        }\n      };\n      nodeLookup.set(userNode.id, internalNode);\n    }\n    if ((internalNode.measured === undefined || internalNode.measured.width === undefined || internalNode.measured.height === undefined) && !internalNode.hidden) {\n      nodesInitialized = false;\n    }\n    if (userNode.parentId) {\n      updateChildNode(internalNode, nodeLookup, parentLookup, options);\n    }\n  }\n  return nodesInitialized;\n}\nfunction updateParentLookup(node, parentLookup) {\n  if (!node.parentId) {\n    return;\n  }\n  const childNodes = parentLookup.get(node.parentId);\n  if (childNodes) {\n    childNodes.set(node.id, node);\n  } else {\n    parentLookup.set(node.parentId, new Map([[node.id, node]]));\n  }\n}\n/**\n * Updates positionAbsolute and zIndex of a child node and the parentLookup.\n */\nfunction updateChildNode(node, nodeLookup, parentLookup, options) {\n  const {\n    elevateNodesOnSelect,\n    nodeOrigin,\n    nodeExtent\n  } = mergeObjects(defaultOptions, options);\n  const parentId = node.parentId;\n  const parentNode = nodeLookup.get(parentId);\n  if (!parentNode) {\n    console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);\n    return;\n  }\n  updateParentLookup(node, parentLookup);\n  const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\n  const {\n    x,\n    y,\n    z\n  } = calculateChildXYZ(node, parentNode, nodeOrigin, nodeExtent, selectedNodeZ);\n  const {\n    positionAbsolute\n  } = node.internals;\n  const positionChanged = x !== positionAbsolute.x || y !== positionAbsolute.y;\n  if (positionChanged || z !== node.internals.z) {\n    // we create a new object to mark the node as updated\n    nodeLookup.set(node.id, {\n      ...node,\n      internals: {\n        ...node.internals,\n        positionAbsolute: positionChanged ? {\n          x,\n          y\n        } : positionAbsolute,\n        z\n      }\n    });\n  }\n}\nfunction calculateZ(node, selectedNodeZ) {\n  return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n}\nfunction calculateChildXYZ(childNode, parentNode, nodeOrigin, nodeExtent, selectedNodeZ) {\n  const {\n    x: parentX,\n    y: parentY\n  } = parentNode.internals.positionAbsolute;\n  const childDimensions = getNodeDimensions(childNode);\n  const positionWithOrigin = getNodePositionWithOrigin(childNode, nodeOrigin);\n  const clampedPosition = isCoordinateExtent(childNode.extent) ? clampPosition(positionWithOrigin, childNode.extent, childDimensions) : positionWithOrigin;\n  let absolutePosition = clampPosition({\n    x: parentX + clampedPosition.x,\n    y: parentY + clampedPosition.y\n  }, nodeExtent, childDimensions);\n  if (childNode.extent === 'parent') {\n    absolutePosition = clampPositionToParent(absolutePosition, childDimensions, parentNode);\n  }\n  const childZ = calculateZ(childNode, selectedNodeZ);\n  const parentZ = parentNode.internals.z ?? 0;\n  return {\n    x: absolutePosition.x,\n    y: absolutePosition.y,\n    z: parentZ > childZ ? parentZ : childZ\n  };\n}\nfunction handleExpandParent(children, nodeLookup, parentLookup, nodeOrigin = [0, 0]) {\n  const changes = [];\n  const parentExpansions = new Map();\n  // determine the expanded rectangle the child nodes would take for each parent\n  for (const child of children) {\n    const parent = nodeLookup.get(child.parentId);\n    if (!parent) {\n      continue;\n    }\n    const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);\n    const expandedRect = getBoundsOfRects(parentRect, child.rect);\n    parentExpansions.set(child.parentId, {\n      expandedRect,\n      parent\n    });\n  }\n  if (parentExpansions.size > 0) {\n    parentExpansions.forEach(({\n      expandedRect,\n      parent\n    }, parentId) => {\n      // determine the position & dimensions of the parent\n      const positionAbsolute = parent.internals.positionAbsolute;\n      const dimensions = getNodeDimensions(parent);\n      const origin = parent.origin ?? nodeOrigin;\n      // determine how much the parent expands in width and position\n      const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;\n      const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;\n      const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));\n      const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));\n      const widthChange = (newWidth - dimensions.width) * origin[0];\n      const heightChange = (newHeight - dimensions.height) * origin[1];\n      // We need to correct the position of the parent node if the origin is not [0,0]\n      if (xChange > 0 || yChange > 0 || widthChange || heightChange) {\n        changes.push({\n          id: parentId,\n          type: 'position',\n          position: {\n            x: parent.position.x - xChange + widthChange,\n            y: parent.position.y - yChange + heightChange\n          }\n        });\n        /*\n         * We move all child nodes in the oppsite direction\n         * so the x,y changes of the parent do not move the children\n         */\n        parentLookup.get(parentId)?.forEach(childNode => {\n          if (!children.some(child => child.id === childNode.id)) {\n            changes.push({\n              id: childNode.id,\n              type: 'position',\n              position: {\n                x: childNode.position.x + xChange,\n                y: childNode.position.y + yChange\n              }\n            });\n          }\n        });\n      }\n      // We need to correct the dimensions of the parent node if the origin is not [0,0]\n      if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {\n        changes.push({\n          id: parentId,\n          type: 'dimensions',\n          setAttributes: true,\n          dimensions: {\n            width: newWidth + (xChange ? origin[0] * xChange - widthChange : 0),\n            height: newHeight + (yChange ? origin[1] * yChange - heightChange : 0)\n          }\n        });\n      }\n    });\n  }\n  return changes;\n}\nfunction updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin, nodeExtent) {\n  const viewportNode = domNode?.querySelector('.xyflow__viewport');\n  let updatedInternals = false;\n  if (!viewportNode) {\n    return {\n      changes: [],\n      updatedInternals\n    };\n  }\n  const changes = [];\n  const style = window.getComputedStyle(viewportNode);\n  const {\n    m22: zoom\n  } = new window.DOMMatrixReadOnly(style.transform);\n  // in this array we collect nodes, that might trigger changes (like expanding parent)\n  const parentExpandChildren = [];\n  for (const update of updates.values()) {\n    const node = nodeLookup.get(update.id);\n    if (!node) {\n      continue;\n    }\n    if (node.hidden) {\n      nodeLookup.set(node.id, {\n        ...node,\n        internals: {\n          ...node.internals,\n          handleBounds: undefined\n        }\n      });\n      updatedInternals = true;\n      continue;\n    }\n    const dimensions = getDimensions(update.nodeElement);\n    const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;\n    const doUpdate = !!(dimensions.width && dimensions.height && (dimensionChanged || !node.internals.handleBounds || update.force));\n    if (doUpdate) {\n      const nodeBounds = update.nodeElement.getBoundingClientRect();\n      const extent = isCoordinateExtent(node.extent) ? node.extent : nodeExtent;\n      let {\n        positionAbsolute\n      } = node.internals;\n      if (node.parentId && node.extent === 'parent') {\n        positionAbsolute = clampPositionToParent(positionAbsolute, dimensions, nodeLookup.get(node.parentId));\n      } else if (extent) {\n        positionAbsolute = clampPosition(positionAbsolute, extent, dimensions);\n      }\n      const newNode = {\n        ...node,\n        measured: dimensions,\n        internals: {\n          ...node.internals,\n          positionAbsolute,\n          handleBounds: {\n            source: getHandleBounds('source', update.nodeElement, nodeBounds, zoom, node.id),\n            target: getHandleBounds('target', update.nodeElement, nodeBounds, zoom, node.id)\n          }\n        }\n      };\n      nodeLookup.set(node.id, newNode);\n      if (node.parentId) {\n        updateChildNode(newNode, nodeLookup, parentLookup, {\n          nodeOrigin\n        });\n      }\n      updatedInternals = true;\n      if (dimensionChanged) {\n        changes.push({\n          id: node.id,\n          type: 'dimensions',\n          dimensions\n        });\n        if (node.expandParent && node.parentId) {\n          parentExpandChildren.push({\n            id: node.id,\n            parentId: node.parentId,\n            rect: nodeToRect(newNode, nodeOrigin)\n          });\n        }\n      }\n    }\n  }\n  if (parentExpandChildren.length > 0) {\n    const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);\n    changes.push(...parentExpandChanges);\n  }\n  return {\n    changes,\n    updatedInternals\n  };\n}\nasync function panBy({\n  delta,\n  panZoom,\n  transform,\n  translateExtent,\n  width,\n  height\n}) {\n  if (!panZoom || !delta.x && !delta.y) {\n    return Promise.resolve(false);\n  }\n  const nextViewport = await panZoom.setViewportConstrained({\n    x: transform[0] + delta.x,\n    y: transform[1] + delta.y,\n    zoom: transform[2]\n  }, [[0, 0], [width, height]], translateExtent);\n  const transformChanged = !!nextViewport && (nextViewport.x !== transform[0] || nextViewport.y !== transform[1] || nextViewport.k !== transform[2]);\n  return Promise.resolve(transformChanged);\n}\n/**\n * this function adds the connection to the connectionLookup\n * at the following keys: nodeId-type-handleId, nodeId-type and nodeId\n * @param type type of the connection\n * @param connection connection that should be added to the lookup\n * @param connectionKey at which key the connection should be added\n * @param connectionLookup reference to the connection lookup\n * @param nodeId nodeId of the connection\n * @param handleId handleId of the conneciton\n */\nfunction addConnectionToLookup(type, connection, connectionKey, connectionLookup, nodeId, handleId) {\n  /*\n   * We add the connection to the connectionLookup at the following keys\n   * 1. nodeId, 2. nodeId-type, 3. nodeId-type-handleId\n   * If the key already exists, we add the connection to the existing map\n   */\n  let key = nodeId;\n  const nodeMap = connectionLookup.get(key) || new Map();\n  connectionLookup.set(key, nodeMap.set(connectionKey, connection));\n  key = `${nodeId}-${type}`;\n  const typeMap = connectionLookup.get(key) || new Map();\n  connectionLookup.set(key, typeMap.set(connectionKey, connection));\n  if (handleId) {\n    key = `${nodeId}-${type}-${handleId}`;\n    const handleMap = connectionLookup.get(key) || new Map();\n    connectionLookup.set(key, handleMap.set(connectionKey, connection));\n  }\n}\nfunction updateConnectionLookup(connectionLookup, edgeLookup, edges) {\n  connectionLookup.clear();\n  edgeLookup.clear();\n  for (const edge of edges) {\n    const {\n      source: sourceNode,\n      target: targetNode,\n      sourceHandle = null,\n      targetHandle = null\n    } = edge;\n    const connection = {\n      edgeId: edge.id,\n      source: sourceNode,\n      target: targetNode,\n      sourceHandle,\n      targetHandle\n    };\n    const sourceKey = `${sourceNode}-${sourceHandle}--${targetNode}-${targetHandle}`;\n    const targetKey = `${targetNode}-${targetHandle}--${sourceNode}-${sourceHandle}`;\n    addConnectionToLookup('source', connection, targetKey, connectionLookup, sourceNode, sourceHandle);\n    addConnectionToLookup('target', connection, sourceKey, connectionLookup, targetNode, targetHandle);\n    edgeLookup.set(edge.id, edge);\n  }\n}\nfunction shallowNodeData(a, b) {\n  if (a === null || b === null) {\n    return false;\n  }\n  const _a = Array.isArray(a) ? a : [a];\n  const _b = Array.isArray(b) ? b : [b];\n  if (_a.length !== _b.length) {\n    return false;\n  }\n  for (let i = 0; i < _a.length; i++) {\n    if (_a[i].id !== _b[i].id || _a[i].type !== _b[i].type || !Object.is(_a[i].data, _b[i].data)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isParentSelected(node, nodeLookup) {\n  if (!node.parentId) {\n    return false;\n  }\n  const parentNode = nodeLookup.get(node.parentId);\n  if (!parentNode) {\n    return false;\n  }\n  if (parentNode.selected) {\n    return true;\n  }\n  return isParentSelected(parentNode, nodeLookup);\n}\nfunction hasSelector(target, selector, domNode) {\n  let current = target;\n  do {\n    if (current?.matches?.(selector)) return true;\n    if (current === domNode) return false;\n    current = current?.parentElement;\n  } while (current);\n  return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {\n  const dragItems = new Map();\n  for (const [id, node] of nodeLookup) {\n    if ((node.selected || node.id === nodeId) && (!node.parentId || !isParentSelected(node, nodeLookup)) && (node.draggable || nodesDraggable && typeof node.draggable === 'undefined')) {\n      const internalNode = nodeLookup.get(id);\n      if (internalNode) {\n        dragItems.set(id, {\n          id,\n          position: internalNode.position || {\n            x: 0,\n            y: 0\n          },\n          distance: {\n            x: mousePos.x - internalNode.internals.positionAbsolute.x,\n            y: mousePos.y - internalNode.internals.positionAbsolute.y\n          },\n          extent: internalNode.extent,\n          parentId: internalNode.parentId,\n          origin: internalNode.origin,\n          expandParent: internalNode.expandParent,\n          internals: {\n            positionAbsolute: internalNode.internals.positionAbsolute || {\n              x: 0,\n              y: 0\n            }\n          },\n          measured: {\n            width: internalNode.measured.width ?? 0,\n            height: internalNode.measured.height ?? 0\n          }\n        });\n      }\n    }\n  }\n  return dragItems;\n}\n/*\n * returns two params:\n * 1. the dragged node (or the first of the list, if we are dragging a node selection)\n * 2. array of selected nodes (for multi selections)\n */\nfunction getEventHandlerParams({\n  nodeId,\n  dragItems,\n  nodeLookup,\n  dragging = true\n}) {\n  const nodesFromDragItems = [];\n  for (const [id, dragItem] of dragItems) {\n    const node = nodeLookup.get(id)?.internals.userNode;\n    if (node) {\n      nodesFromDragItems.push({\n        ...node,\n        position: dragItem.position,\n        dragging\n      });\n    }\n  }\n  if (!nodeId) {\n    return [nodesFromDragItems[0], nodesFromDragItems];\n  }\n  const node = nodeLookup.get(nodeId)?.internals.userNode;\n  return [!node ? nodesFromDragItems[0] : {\n    ...node,\n    position: dragItems.get(nodeId)?.position || node.position,\n    dragging\n  }, nodesFromDragItems];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction XYDrag({\n  onNodeMouseDown,\n  getStoreItems,\n  onDragStart,\n  onDrag,\n  onDragStop\n}) {\n  let lastPos = {\n    x: null,\n    y: null\n  };\n  let autoPanId = 0;\n  let dragItems = new Map();\n  let autoPanStarted = false;\n  let mousePosition = {\n    x: 0,\n    y: 0\n  };\n  let containerBounds = null;\n  let dragStarted = false;\n  let d3Selection = null;\n  let abortDrag = false; // prevents unintentional dragging on multitouch\n  // public functions\n  function update({\n    noDragClassName,\n    handleSelector,\n    domNode,\n    isSelectable,\n    nodeId,\n    nodeClickDistance = 0\n  }) {\n    d3Selection = select(domNode);\n    function updateNodes({\n      x,\n      y\n    }, dragEvent) {\n      const {\n        nodeLookup,\n        nodeExtent,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin,\n        onNodeDrag,\n        onSelectionDrag,\n        onError,\n        updateNodePositions\n      } = getStoreItems();\n      lastPos = {\n        x,\n        y\n      };\n      let hasChange = false;\n      let nodesBox = {\n        x: 0,\n        y: 0,\n        x2: 0,\n        y2: 0\n      };\n      if (dragItems.size > 1 && nodeExtent) {\n        const rect = getInternalNodesBounds(dragItems);\n        nodesBox = rectToBox(rect);\n      }\n      for (const [id, dragItem] of dragItems) {\n        if (!nodeLookup.has(id)) {\n          /*\n           * if the node is not in the nodeLookup anymore, it was probably deleted while dragging\n           * and we don't need to update it anymore\n           */\n          continue;\n        }\n        let nextPosition = {\n          x: x - dragItem.distance.x,\n          y: y - dragItem.distance.y\n        };\n        if (snapToGrid) {\n          nextPosition = snapPosition(nextPosition, snapGrid);\n        }\n        /*\n         * if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n         * based on its position so that the node stays at it's position relative to the selection.\n         */\n        let adjustedNodeExtent = [[nodeExtent[0][0], nodeExtent[0][1]], [nodeExtent[1][0], nodeExtent[1][1]]];\n        if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {\n          const {\n            positionAbsolute\n          } = dragItem.internals;\n          const x1 = positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n          const x2 = positionAbsolute.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];\n          const y1 = positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n          const y2 = positionAbsolute.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];\n          adjustedNodeExtent = [[x1, y1], [x2, y2]];\n        }\n        const {\n          position,\n          positionAbsolute\n        } = calculateNodePosition({\n          nodeId: id,\n          nextPosition,\n          nodeLookup,\n          nodeExtent: adjustedNodeExtent,\n          nodeOrigin,\n          onError\n        });\n        // we want to make sure that we only fire a change event when there is a change\n        hasChange = hasChange || dragItem.position.x !== position.x || dragItem.position.y !== position.y;\n        dragItem.position = position;\n        dragItem.internals.positionAbsolute = positionAbsolute;\n      }\n      if (!hasChange) {\n        return;\n      }\n      updateNodePositions(dragItems, true);\n      if (dragEvent && (onDrag || onNodeDrag || !nodeId && onSelectionDrag)) {\n        const [currentNode, currentNodes] = getEventHandlerParams({\n          nodeId,\n          dragItems,\n          nodeLookup\n        });\n        onDrag?.(dragEvent, dragItems, currentNode, currentNodes);\n        onNodeDrag?.(dragEvent, currentNode, currentNodes);\n        if (!nodeId) {\n          onSelectionDrag?.(dragEvent, currentNodes);\n        }\n      }\n    }\n    async function autoPan() {\n      if (!containerBounds) {\n        return;\n      }\n      const {\n        transform,\n        panBy,\n        autoPanSpeed,\n        autoPanOnNodeDrag\n      } = getStoreItems();\n      if (!autoPanOnNodeDrag) {\n        autoPanStarted = false;\n        cancelAnimationFrame(autoPanId);\n        return;\n      }\n      const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);\n      if (xMovement !== 0 || yMovement !== 0) {\n        lastPos.x = (lastPos.x ?? 0) - xMovement / transform[2];\n        lastPos.y = (lastPos.y ?? 0) - yMovement / transform[2];\n        if (await panBy({\n          x: xMovement,\n          y: yMovement\n        })) {\n          updateNodes(lastPos, null);\n        }\n      }\n      autoPanId = requestAnimationFrame(autoPan);\n    }\n    function startDrag(event) {\n      const {\n        nodeLookup,\n        multiSelectionActive,\n        nodesDraggable,\n        transform,\n        snapGrid,\n        snapToGrid,\n        selectNodesOnDrag,\n        onNodeDragStart,\n        onSelectionDragStart,\n        unselectNodesAndEdges\n      } = getStoreItems();\n      dragStarted = true;\n      if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n        if (!nodeLookup.get(nodeId)?.selected) {\n          // we need to reset selected nodes when selectNodesOnDrag=false\n          unselectNodesAndEdges();\n        }\n      }\n      if (isSelectable && selectNodesOnDrag && nodeId) {\n        onNodeMouseDown?.(nodeId);\n      }\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid,\n        containerBounds\n      });\n      lastPos = pointerPos;\n      dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);\n      if (dragItems.size > 0 && (onDragStart || onNodeDragStart || !nodeId && onSelectionDragStart)) {\n        const [currentNode, currentNodes] = getEventHandlerParams({\n          nodeId,\n          dragItems,\n          nodeLookup\n        });\n        onDragStart?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n        onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);\n        if (!nodeId) {\n          onSelectionDragStart?.(event.sourceEvent, currentNodes);\n        }\n      }\n    }\n    const d3DragInstance = drag().clickDistance(nodeClickDistance).on('start', event => {\n      const {\n        domNode,\n        nodeDragThreshold,\n        transform,\n        snapGrid,\n        snapToGrid\n      } = getStoreItems();\n      containerBounds = domNode?.getBoundingClientRect() || null;\n      abortDrag = false;\n      if (nodeDragThreshold === 0) {\n        startDrag(event);\n      }\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid,\n        containerBounds\n      });\n      lastPos = pointerPos;\n      mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n    }).on('drag', event => {\n      const {\n        autoPanOnNodeDrag,\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeDragThreshold,\n        nodeLookup\n      } = getStoreItems();\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid,\n        containerBounds\n      });\n      if (event.sourceEvent.type === 'touchmove' && event.sourceEvent.touches.length > 1 ||\n      // if user deletes a node while dragging, we need to abort the drag to prevent errors\n      nodeId && !nodeLookup.has(nodeId)) {\n        abortDrag = true;\n      }\n      if (abortDrag) {\n        return;\n      }\n      if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {\n        autoPanStarted = true;\n        autoPan();\n      }\n      if (!dragStarted) {\n        const x = pointerPos.xSnapped - (lastPos.x ?? 0);\n        const y = pointerPos.ySnapped - (lastPos.y ?? 0);\n        const distance = Math.sqrt(x * x + y * y);\n        if (distance > nodeDragThreshold) {\n          startDrag(event);\n        }\n      }\n      // skip events without movement\n      if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {\n        // dragEvent = event.sourceEvent as MouseEvent;\n        mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n        updateNodes(pointerPos, event.sourceEvent);\n      }\n    }).on('end', event => {\n      if (!dragStarted || abortDrag) {\n        return;\n      }\n      autoPanStarted = false;\n      dragStarted = false;\n      cancelAnimationFrame(autoPanId);\n      if (dragItems.size > 0) {\n        const {\n          nodeLookup,\n          updateNodePositions,\n          onNodeDragStop,\n          onSelectionDragStop\n        } = getStoreItems();\n        updateNodePositions(dragItems, false);\n        if (onDragStop || onNodeDragStop || !nodeId && onSelectionDragStop) {\n          const [currentNode, currentNodes] = getEventHandlerParams({\n            nodeId,\n            dragItems,\n            nodeLookup,\n            dragging: false\n          });\n          onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n          onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);\n          if (!nodeId) {\n            onSelectionDragStop?.(event.sourceEvent, currentNodes);\n          }\n        }\n      }\n    }).filter(event => {\n      const target = event.target;\n      const isDraggable = !event.button && (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) && (!handleSelector || hasSelector(target, handleSelector, domNode));\n      return isDraggable;\n    });\n    d3Selection.call(d3DragInstance);\n  }\n  function destroy() {\n    d3Selection?.on('.drag', null);\n  }\n  return {\n    update,\n    destroy\n  };\n}\nfunction getNodesWithinDistance(position, nodeLookup, distance) {\n  const nodes = [];\n  const rect = {\n    x: position.x - distance,\n    y: position.y - distance,\n    width: distance * 2,\n    height: distance * 2\n  };\n  for (const node of nodeLookup.values()) {\n    if (getOverlappingArea(rect, nodeToRect(node)) > 0) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n/*\n * this distance is used for the area around the user pointer\n * while doing a connection for finding the closest nodes\n */\nconst ADDITIONAL_DISTANCE = 250;\nfunction getClosestHandle(position, connectionRadius, nodeLookup, fromHandle) {\n  let closestHandles = [];\n  let minDistance = Infinity;\n  const closeNodes = getNodesWithinDistance(position, nodeLookup, connectionRadius + ADDITIONAL_DISTANCE);\n  for (const node of closeNodes) {\n    const allHandles = [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n    for (const handle of allHandles) {\n      // if the handle is the same as the fromHandle we skip it\n      if (fromHandle.nodeId === handle.nodeId && fromHandle.type === handle.type && fromHandle.id === handle.id) {\n        continue;\n      }\n      // determine absolute position of the handle\n      const {\n        x,\n        y\n      } = getHandlePosition(node, handle, handle.position, true);\n      const distance = Math.sqrt(Math.pow(x - position.x, 2) + Math.pow(y - position.y, 2));\n      if (distance > connectionRadius) {\n        continue;\n      }\n      if (distance < minDistance) {\n        closestHandles = [{\n          ...handle,\n          x,\n          y\n        }];\n        minDistance = distance;\n      } else if (distance === minDistance) {\n        // when multiple handles are on the same distance we collect all of them\n        closestHandles.push({\n          ...handle,\n          x,\n          y\n        });\n      }\n    }\n  }\n  if (!closestHandles.length) {\n    return null;\n  }\n  // when multiple handles overlay each other we prefer the opposite handle\n  if (closestHandles.length > 1) {\n    const oppositeHandleType = fromHandle.type === 'source' ? 'target' : 'source';\n    return closestHandles.find(handle => handle.type === oppositeHandleType) ?? closestHandles[0];\n  }\n  return closestHandles[0];\n}\nfunction getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode, withAbsolutePosition = false) {\n  const node = nodeLookup.get(nodeId);\n  if (!node) {\n    return null;\n  }\n  const handles = connectionMode === 'strict' ? node.internals.handleBounds?.[handleType] : [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n  const handle = (handleId ? handles?.find(h => h.id === handleId) : handles?.[0]) ?? null;\n  return handle && withAbsolutePosition ? {\n    ...handle,\n    ...getHandlePosition(node, handle, handle.position, true)\n  } : handle;\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n  if (edgeUpdaterType) {\n    return edgeUpdaterType;\n  } else if (handleDomNode?.classList.contains('target')) {\n    return 'target';\n  } else if (handleDomNode?.classList.contains('source')) {\n    return 'source';\n  }\n  return null;\n}\nfunction isConnectionValid(isInsideConnectionRadius, isHandleValid) {\n  let isValid = null;\n  if (isHandleValid) {\n    isValid = true;\n  } else if (isInsideConnectionRadius && !isHandleValid) {\n    isValid = false;\n  }\n  return isValid;\n}\nconst alwaysValid = () => true;\nfunction onPointerDown(event, {\n  connectionMode,\n  connectionRadius,\n  handleId,\n  nodeId,\n  edgeUpdaterType,\n  isTarget,\n  domNode,\n  nodeLookup,\n  lib,\n  autoPanOnConnect,\n  flowId,\n  panBy,\n  cancelConnection,\n  onConnectStart,\n  onConnect,\n  onConnectEnd,\n  isValidConnection = alwaysValid,\n  onReconnectEnd,\n  updateConnection,\n  getTransform,\n  getFromHandle,\n  autoPanSpeed\n}) {\n  // when xyflow is used inside a shadow root we can't use document\n  const doc = getHostForElement(event.target);\n  let autoPanId = 0;\n  let closestHandle;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const clickedHandle = doc?.elementFromPoint(x, y);\n  const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n  const containerBounds = domNode?.getBoundingClientRect();\n  if (!containerBounds || !handleType) {\n    return;\n  }\n  const fromHandleInternal = getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode);\n  if (!fromHandleInternal) {\n    return;\n  }\n  let position = getEventPosition(event, containerBounds);\n  let autoPanStarted = false;\n  let connection = null;\n  let isValid = false;\n  let handleDomNode = null;\n  // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n  function autoPan() {\n    if (!autoPanOnConnect || !containerBounds) {\n      return;\n    }\n    const [x, y] = calcAutoPan(position, containerBounds, autoPanSpeed);\n    panBy({\n      x,\n      y\n    });\n    autoPanId = requestAnimationFrame(autoPan);\n  }\n  // Stays the same for all consecutive pointermove events\n  const fromHandle = {\n    ...fromHandleInternal,\n    nodeId,\n    type: handleType,\n    position: fromHandleInternal.position\n  };\n  const fromNodeInternal = nodeLookup.get(nodeId);\n  const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);\n  const newConnection = {\n    inProgress: true,\n    isValid: null,\n    from,\n    fromHandle,\n    fromPosition: fromHandle.position,\n    fromNode: fromNodeInternal,\n    to: position,\n    toHandle: null,\n    toPosition: oppositePosition[fromHandle.position],\n    toNode: null\n  };\n  updateConnection(newConnection);\n  let previousConnection = newConnection;\n  onConnectStart?.(event, {\n    nodeId,\n    handleId,\n    handleType\n  });\n  function onPointerMove(event) {\n    if (!getFromHandle() || !fromHandle) {\n      onPointerUp(event);\n      return;\n    }\n    const transform = getTransform();\n    position = getEventPosition(event, containerBounds);\n    closestHandle = getClosestHandle(pointToRendererPoint(position, transform, false, [1, 1]), connectionRadius, nodeLookup, fromHandle);\n    if (!autoPanStarted) {\n      autoPan();\n      autoPanStarted = true;\n    }\n    const result = isValidHandle(event, {\n      handle: closestHandle,\n      connectionMode,\n      fromNodeId: nodeId,\n      fromHandleId: handleId,\n      fromType: isTarget ? 'target' : 'source',\n      isValidConnection,\n      doc,\n      lib,\n      flowId,\n      nodeLookup\n    });\n    handleDomNode = result.handleDomNode;\n    connection = result.connection;\n    isValid = isConnectionValid(!!closestHandle, result.isValid);\n    const newConnection = {\n      // from stays the same\n      ...previousConnection,\n      isValid,\n      to: closestHandle && isValid ? rendererPointToPoint({\n        x: closestHandle.x,\n        y: closestHandle.y\n      }, transform) : position,\n      toHandle: result.toHandle,\n      toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],\n      toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null\n    };\n    /*\n     * we don't want to trigger an update when the connection\n     * is snapped to the same handle as before\n     */\n    if (isValid && closestHandle && previousConnection.toHandle && newConnection.toHandle && previousConnection.toHandle.type === newConnection.toHandle.type && previousConnection.toHandle.nodeId === newConnection.toHandle.nodeId && previousConnection.toHandle.id === newConnection.toHandle.id && previousConnection.to.x === newConnection.to.x && previousConnection.to.y === newConnection.to.y) {\n      return;\n    }\n    updateConnection(newConnection);\n    previousConnection = newConnection;\n  }\n  function onPointerUp(event) {\n    if ((closestHandle || handleDomNode) && connection && isValid) {\n      onConnect?.(connection);\n    }\n    /*\n     * it's important to get a fresh reference from the store here\n     * in order to get the latest state of onConnectEnd\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      inProgress,\n      ...connectionState\n    } = previousConnection;\n    const finalConnectionState = {\n      ...connectionState,\n      toPosition: previousConnection.toHandle ? previousConnection.toPosition : null\n    };\n    onConnectEnd?.(event, finalConnectionState);\n    if (edgeUpdaterType) {\n      onReconnectEnd?.(event, finalConnectionState);\n    }\n    cancelConnection();\n    cancelAnimationFrame(autoPanId);\n    autoPanStarted = false;\n    isValid = false;\n    connection = null;\n    handleDomNode = null;\n    doc.removeEventListener('mousemove', onPointerMove);\n    doc.removeEventListener('mouseup', onPointerUp);\n    doc.removeEventListener('touchmove', onPointerMove);\n    doc.removeEventListener('touchend', onPointerUp);\n  }\n  doc.addEventListener('mousemove', onPointerMove);\n  doc.addEventListener('mouseup', onPointerUp);\n  doc.addEventListener('touchmove', onPointerMove);\n  doc.addEventListener('touchend', onPointerUp);\n}\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(event, {\n  handle,\n  connectionMode,\n  fromNodeId,\n  fromHandleId,\n  fromType,\n  doc,\n  lib,\n  flowId,\n  isValidConnection = alwaysValid,\n  nodeLookup\n}) {\n  const isTarget = fromType === 'target';\n  const handleDomNode = handle ? doc.querySelector(`.${lib}-flow__handle[data-id=\"${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`) : null;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const handleBelow = doc.elementFromPoint(x, y);\n  /*\n   * we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n   * because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n   */\n  const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;\n  const result = {\n    handleDomNode: handleToCheck,\n    isValid: false,\n    connection: null,\n    toHandle: null\n  };\n  if (handleToCheck) {\n    const handleType = getHandleType(undefined, handleToCheck);\n    const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n    const handleId = handleToCheck.getAttribute('data-handleid');\n    const connectable = handleToCheck.classList.contains('connectable');\n    const connectableEnd = handleToCheck.classList.contains('connectableend');\n    if (!handleNodeId || !handleType) {\n      return result;\n    }\n    const connection = {\n      source: isTarget ? handleNodeId : fromNodeId,\n      sourceHandle: isTarget ? handleId : fromHandleId,\n      target: isTarget ? fromNodeId : handleNodeId,\n      targetHandle: isTarget ? fromHandleId : handleId\n    };\n    result.connection = connection;\n    const isConnectable = connectable && connectableEnd;\n    // in strict mode we don't allow target to target or source to source connections\n    const isValid = isConnectable && (connectionMode === ConnectionMode.Strict ? isTarget && handleType === 'source' || !isTarget && handleType === 'target' : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n    result.isValid = isValid && isValidConnection(connection);\n    result.toHandle = getHandle(handleNodeId, handleType, handleId, nodeLookup, connectionMode, false);\n  }\n  return result;\n}\nconst XYHandle = {\n  onPointerDown,\n  isValid: isValidHandle\n};\nfunction XYMinimap({\n  domNode,\n  panZoom,\n  getTransform,\n  getViewScale\n}) {\n  const selection = select(domNode);\n  function update({\n    translateExtent,\n    width,\n    height,\n    zoomStep = 10,\n    pannable = true,\n    zoomable = true,\n    inversePan = false\n  }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const zoomHandler = event => {\n      const transform = getTransform();\n      if (event.sourceEvent.type !== 'wheel' || !panZoom) {\n        return;\n      }\n      const pinchDelta = -event.sourceEvent.deltaY * (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 0.002) * zoomStep;\n      const nextZoom = transform[2] * Math.pow(2, pinchDelta);\n      panZoom.scaleTo(nextZoom);\n    };\n    let panStart = [0, 0];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const panStartHandler = event => {\n      if (event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart') {\n        panStart = [event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX, event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY];\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const panHandler = event => {\n      const transform = getTransform();\n      if (event.sourceEvent.type !== 'mousemove' && event.sourceEvent.type !== 'touchmove' || !panZoom) {\n        return;\n      }\n      const panCurrent = [event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX, event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY];\n      const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];\n      panStart = panCurrent;\n      const moveScale = getViewScale() * Math.max(transform[2], Math.log(transform[2])) * (inversePan ? -1 : 1);\n      const position = {\n        x: transform[0] - panDelta[0] * moveScale,\n        y: transform[1] - panDelta[1] * moveScale\n      };\n      const extent = [[0, 0], [width, height]];\n      panZoom.setViewportConstrained({\n        x: position.x,\n        y: position.y,\n        zoom: transform[2]\n      }, extent, translateExtent);\n    };\n    const zoomAndPanHandler = zoom().on('start', panStartHandler)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .on('zoom', pannable ? panHandler : null)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .on('zoom.wheel', zoomable ? zoomHandler : null);\n    selection.call(zoomAndPanHandler, {});\n  }\n  function destroy() {\n    selection.on('zoom', null);\n  }\n  return {\n    update,\n    destroy,\n    pointer\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\nconst transformToViewport = transform => ({\n  x: transform.x,\n  y: transform.y,\n  zoom: transform.k\n});\nconst viewportToTransform = ({\n  x,\n  y,\n  zoom\n}) => zoomIdentity.translate(x, y).scale(zoom);\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst getD3Transition = (selection, duration = 0, onEnd = () => {}) => {\n  const hasDuration = typeof duration === 'number' && duration > 0;\n  if (!hasDuration) {\n    onEnd();\n  }\n  return hasDuration ? selection.transition().duration(duration).on('end', onEnd) : selection;\n};\nconst wheelDelta = event => {\n  const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\nfunction createPanOnScrollHandler({\n  zoomPanValues,\n  noWheelClassName,\n  d3Selection,\n  d3Zoom,\n  panOnScrollMode,\n  panOnScrollSpeed,\n  zoomOnPinch,\n  onPanZoomStart,\n  onPanZoom,\n  onPanZoomEnd\n}) {\n  return event => {\n    if (isWrappedWithClass(event, noWheelClassName)) {\n      return false;\n    }\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    const currentZoom = d3Selection.property('__zoom').k || 1;\n    // macos sets ctrlKey=true for pinch gesture on a trackpad\n    if (event.ctrlKey && zoomOnPinch) {\n      const point = pointer(event);\n      const pinchDelta = wheelDelta(event);\n      const zoom = currentZoom * Math.pow(2, pinchDelta);\n      // @ts-ignore\n      d3Zoom.scaleTo(d3Selection, zoom, point, event);\n      return;\n    }\n    /*\n     * increase scroll speed in firefox\n     * firefox: deltaMode === 1; chrome: deltaMode === 0\n     */\n    const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n    let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n    let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n    // this enables vertical scrolling with shift + scroll on windows\n    if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n      deltaX = event.deltaY * deltaNormalize;\n      deltaY = 0;\n    }\n    d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed,\n    // @ts-ignore\n    {\n      internal: true\n    });\n    const nextViewport = transformToViewport(d3Selection.property('__zoom'));\n    clearTimeout(zoomPanValues.panScrollTimeout);\n    /*\n     * for pan on scroll we need to handle the event calls on our own\n     * we can't use the start, zoom and end events from d3-zoom\n     * because start and move gets called on every scroll event and not once at the beginning\n     */\n    if (!zoomPanValues.isPanScrolling) {\n      zoomPanValues.isPanScrolling = true;\n      onPanZoomStart?.(event, nextViewport);\n    }\n    if (zoomPanValues.isPanScrolling) {\n      onPanZoom?.(event, nextViewport);\n      zoomPanValues.panScrollTimeout = setTimeout(() => {\n        onPanZoomEnd?.(event, nextViewport);\n        zoomPanValues.isPanScrolling = false;\n      }, 150);\n    }\n  };\n}\nfunction createZoomOnScrollHandler({\n  noWheelClassName,\n  preventScrolling,\n  d3ZoomHandler\n}) {\n  return function (event, d) {\n    const isWheel = event.type === 'wheel';\n    // we still want to enable pinch zooming even if preventScrolling is set to false\n    const preventZoom = !preventScrolling && isWheel && !event.ctrlKey;\n    const hasNoWheelClass = isWrappedWithClass(event, noWheelClassName);\n    // if user is pinch zooming above a nowheel element, we don't want the browser to zoom\n    if (event.ctrlKey && isWheel && hasNoWheelClass) {\n      event.preventDefault();\n    }\n    if (preventZoom || hasNoWheelClass) {\n      return null;\n    }\n    event.preventDefault();\n    d3ZoomHandler.call(this, event, d);\n  };\n}\nfunction createPanZoomStartHandler({\n  zoomPanValues,\n  onDraggingChange,\n  onPanZoomStart\n}) {\n  return event => {\n    if (event.sourceEvent?.internal) {\n      return;\n    }\n    const viewport = transformToViewport(event.transform);\n    // we need to remember it here, because it's always 0 in the \"zoom\" event\n    zoomPanValues.mouseButton = event.sourceEvent?.button || 0;\n    zoomPanValues.isZoomingOrPanning = true;\n    zoomPanValues.prevViewport = viewport;\n    if (event.sourceEvent?.type === 'mousedown') {\n      onDraggingChange(true);\n    }\n    if (onPanZoomStart) {\n      onPanZoomStart?.(event.sourceEvent, viewport);\n    }\n  };\n}\nfunction createPanZoomHandler({\n  zoomPanValues,\n  panOnDrag,\n  onPaneContextMenu,\n  onTransformChange,\n  onPanZoom\n}) {\n  return event => {\n    zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));\n    if (!event.sourceEvent?.sync) {\n      onTransformChange([event.transform.x, event.transform.y, event.transform.k]);\n    }\n    if (onPanZoom && !event.sourceEvent?.internal) {\n      onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));\n    }\n  };\n}\nfunction createPanZoomEndHandler({\n  zoomPanValues,\n  panOnDrag,\n  panOnScroll,\n  onDraggingChange,\n  onPanZoomEnd,\n  onPaneContextMenu\n}) {\n  return event => {\n    if (event.sourceEvent?.internal) {\n      return;\n    }\n    zoomPanValues.isZoomingOrPanning = false;\n    if (onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) && !zoomPanValues.usedRightMouseButton && event.sourceEvent) {\n      onPaneContextMenu(event.sourceEvent);\n    }\n    zoomPanValues.usedRightMouseButton = false;\n    onDraggingChange(false);\n    if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {\n      const viewport = transformToViewport(event.transform);\n      zoomPanValues.prevViewport = viewport;\n      clearTimeout(zoomPanValues.timerId);\n      zoomPanValues.timerId = setTimeout(() => {\n        onPanZoomEnd?.(event.sourceEvent, viewport);\n      },\n      // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll\n      panOnScroll ? 150 : 0);\n    }\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createFilter({\n  zoomActivationKeyPressed,\n  zoomOnScroll,\n  zoomOnPinch,\n  panOnDrag,\n  panOnScroll,\n  zoomOnDoubleClick,\n  userSelectionActive,\n  noWheelClassName,\n  noPanClassName,\n  lib\n}) {\n  return event => {\n    const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n    const pinchZoom = zoomOnPinch && event.ctrlKey;\n    if (event.button === 1 && event.type === 'mousedown' && (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {\n      return true;\n    }\n    // if all interactions are disabled, we prevent all zoom events\n    if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n      return false;\n    }\n    // during a selection we prevent all other interactions\n    if (userSelectionActive) {\n      return false;\n    }\n    // if the target element is inside an element with the nowheel class, we prevent zooming\n    if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n      return false;\n    }\n    // if the target element is inside an element with the nopan class, we prevent panning\n    if (isWrappedWithClass(event, noPanClassName) && (event.type !== 'wheel' || panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed)) {\n      return false;\n    }\n    if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n      return false;\n    }\n    if (!zoomOnPinch && event.type === 'touchstart' && event.touches?.length > 1) {\n      event.preventDefault(); // if you manage to start with 2 touches, we prevent native zoom\n      return false;\n    }\n    // when there is no scroll handling enabled, we prevent all wheel events\n    if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n      return false;\n    }\n    // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n    if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n      return false;\n    }\n    // if the pane is only movable using allowed clicks\n    if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n      return false;\n    }\n    // We only allow right clicks if pan on drag is set to right click\n    const buttonAllowed = Array.isArray(panOnDrag) && panOnDrag.includes(event.button) || !event.button || event.button <= 1;\n    // default filter for d3-zoom\n    return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n  };\n}\nfunction XYPanZoom({\n  domNode,\n  minZoom,\n  maxZoom,\n  paneClickDistance,\n  translateExtent,\n  viewport,\n  onPanZoom,\n  onPanZoomStart,\n  onPanZoomEnd,\n  onDraggingChange\n}) {\n  const zoomPanValues = {\n    isZoomingOrPanning: false,\n    usedRightMouseButton: false,\n    prevViewport: {\n      x: 0,\n      y: 0,\n      zoom: 0\n    },\n    mouseButton: 0,\n    timerId: undefined,\n    panScrollTimeout: undefined,\n    isPanScrolling: false\n  };\n  const bbox = domNode.getBoundingClientRect();\n  const d3ZoomInstance = zoom().clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance).scaleExtent([minZoom, maxZoom]).translateExtent(translateExtent);\n  const d3Selection = select(domNode).call(d3ZoomInstance);\n  setViewportConstrained({\n    x: viewport.x,\n    y: viewport.y,\n    zoom: clamp(viewport.zoom, minZoom, maxZoom)\n  }, [[0, 0], [bbox.width, bbox.height]], translateExtent);\n  const d3ZoomHandler = d3Selection.on('wheel.zoom');\n  const d3DblClickZoomHandler = d3Selection.on('dblclick.zoom');\n  d3ZoomInstance.wheelDelta(wheelDelta);\n  function setTransform(transform, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  // public functions\n  function update({\n    noWheelClassName,\n    noPanClassName,\n    onPaneContextMenu,\n    userSelectionActive,\n    panOnScroll,\n    panOnDrag,\n    panOnScrollMode,\n    panOnScrollSpeed,\n    preventScrolling,\n    zoomOnPinch,\n    zoomOnScroll,\n    zoomOnDoubleClick,\n    zoomActivationKeyPressed,\n    lib,\n    onTransformChange\n  }) {\n    if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {\n      destroy();\n    }\n    const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;\n    const wheelHandler = isPanOnScroll ? createPanOnScrollHandler({\n      zoomPanValues,\n      noWheelClassName,\n      d3Selection,\n      d3Zoom: d3ZoomInstance,\n      panOnScrollMode,\n      panOnScrollSpeed,\n      zoomOnPinch,\n      onPanZoomStart,\n      onPanZoom,\n      onPanZoomEnd\n    }) : createZoomOnScrollHandler({\n      noWheelClassName,\n      preventScrolling,\n      d3ZoomHandler\n    });\n    d3Selection.on('wheel.zoom', wheelHandler, {\n      passive: false\n    });\n    if (!userSelectionActive) {\n      // pan zoom start\n      const startHandler = createPanZoomStartHandler({\n        zoomPanValues,\n        onDraggingChange,\n        onPanZoomStart\n      });\n      d3ZoomInstance.on('start', startHandler);\n      // pan zoom\n      const panZoomHandler = createPanZoomHandler({\n        zoomPanValues,\n        panOnDrag,\n        onPaneContextMenu: !!onPaneContextMenu,\n        onPanZoom,\n        onTransformChange\n      });\n      d3ZoomInstance.on('zoom', panZoomHandler);\n      // pan zoom end\n      const panZoomEndHandler = createPanZoomEndHandler({\n        zoomPanValues,\n        panOnDrag,\n        panOnScroll,\n        onPaneContextMenu,\n        onPanZoomEnd,\n        onDraggingChange\n      });\n      d3ZoomInstance.on('end', panZoomEndHandler);\n    }\n    const filter = createFilter({\n      zoomActivationKeyPressed,\n      panOnDrag,\n      zoomOnScroll,\n      panOnScroll,\n      zoomOnDoubleClick,\n      zoomOnPinch,\n      userSelectionActive,\n      noPanClassName,\n      noWheelClassName,\n      lib\n    });\n    d3ZoomInstance.filter(filter);\n    /*\n     * We cannot add zoomOnDoubleClick to the filter above because\n     * double tapping on touch screens circumvents the filter and\n     * dblclick.zoom is fired on the selection directly\n     */\n    if (zoomOnDoubleClick) {\n      d3Selection.on('dblclick.zoom', d3DblClickZoomHandler);\n    } else {\n      d3Selection.on('dblclick.zoom', null);\n    }\n  }\n  function destroy() {\n    d3ZoomInstance.on('zoom', null);\n  }\n  async function setViewportConstrained(viewport, extent, translateExtent) {\n    const nextTransform = viewportToTransform(viewport);\n    const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent);\n    if (contrainedTransform) {\n      await setTransform(contrainedTransform);\n    }\n    return new Promise(resolve => resolve(contrainedTransform));\n  }\n  async function setViewport(viewport, options) {\n    const nextTransform = viewportToTransform(viewport);\n    await setTransform(nextTransform, options);\n    return new Promise(resolve => resolve(nextTransform));\n  }\n  function syncViewport(viewport) {\n    if (d3Selection) {\n      const nextTransform = viewportToTransform(viewport);\n      const currentTransform = d3Selection.property('__zoom');\n      if (currentTransform.k !== viewport.zoom || currentTransform.x !== viewport.x || currentTransform.y !== viewport.y) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        d3ZoomInstance?.transform(d3Selection, nextTransform, null, {\n          sync: true\n        });\n      }\n    }\n  }\n  function getViewport() {\n    const transform = d3Selection ? zoomTransform(d3Selection.node()) : {\n      x: 0,\n      y: 0,\n      k: 1\n    };\n    return {\n      x: transform.x,\n      y: transform.y,\n      zoom: transform.k\n    };\n  }\n  function scaleTo(zoom, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  function scaleBy(factor, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  function setScaleExtent(scaleExtent) {\n    d3ZoomInstance?.scaleExtent(scaleExtent);\n  }\n  function setTranslateExtent(translateExtent) {\n    d3ZoomInstance?.translateExtent(translateExtent);\n  }\n  function setClickDistance(distance) {\n    const validDistance = !isNumeric(distance) || distance < 0 ? 0 : distance;\n    d3ZoomInstance?.clickDistance(validDistance);\n  }\n  return {\n    update,\n    destroy,\n    setViewport,\n    setViewportConstrained,\n    getViewport,\n    scaleTo,\n    scaleBy,\n    setScaleExtent,\n    setTranslateExtent,\n    syncViewport,\n    setClickDistance\n  };\n}\n\n/**\n * Used to determine the variant of the resize control\n *\n * @public\n */\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n  ResizeControlVariant[\"Line\"] = \"line\";\n  ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\nconst XY_RESIZER_HANDLE_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nconst XY_RESIZER_LINE_POSITIONS = ['top', 'right', 'bottom', 'left'];\n\n/**\n * Get all connecting edges for a given set of nodes\n * @param width - new width of the node\n * @param prevWidth - previous width of the node\n * @param height - new height of the node\n * @param prevHeight - previous height of the node\n * @param affectsX - whether to invert the resize direction for the x axis\n * @param affectsY - whether to invert the resize direction for the y axis\n * @returns array of two numbers representing the direction of the resize for each axis, 0 = no change, 1 = increase, -1 = decrease\n */\nfunction getResizeDirection({\n  width,\n  prevWidth,\n  height,\n  prevHeight,\n  affectsX,\n  affectsY\n}) {\n  const deltaWidth = width - prevWidth;\n  const deltaHeight = height - prevHeight;\n  const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n  if (deltaWidth && affectsX) {\n    direction[0] = direction[0] * -1;\n  }\n  if (deltaHeight && affectsY) {\n    direction[1] = direction[1] * -1;\n  }\n  return direction;\n}\n/**\n * Parses the control position that is being dragged to dimensions that are being resized\n * @param controlPosition - position of the control that is being dragged\n * @returns isHorizontal, isVertical, affectsX, affectsY,\n */\nfunction getControlDirection(controlPosition) {\n  const isHorizontal = controlPosition.includes('right') || controlPosition.includes('left');\n  const isVertical = controlPosition.includes('bottom') || controlPosition.includes('top');\n  const affectsX = controlPosition.includes('left');\n  const affectsY = controlPosition.includes('top');\n  return {\n    isHorizontal,\n    isVertical,\n    affectsX,\n    affectsY\n  };\n}\nfunction getLowerExtentClamp(lowerExtent, lowerBound) {\n  return Math.max(0, lowerBound - lowerExtent);\n}\nfunction getUpperExtentClamp(upperExtent, upperBound) {\n  return Math.max(0, upperExtent - upperBound);\n}\nfunction getSizeClamp(size, minSize, maxSize) {\n  return Math.max(0, minSize - size, size - maxSize);\n}\nfunction xor(a, b) {\n  return a ? !b : b;\n}\n/**\n * Calculates new width & height and x & y of node after resize based on pointer position\n * @description - Buckle up, this is a chunky one... If you want to determine the new dimensions of a node after a resize,\n * you have to account for all possible restrictions: min/max width/height of the node, the maximum extent the node is allowed\n * to move in (in this case: resize into) determined by the parent node, the minimal extent determined by child nodes\n * with expandParent or extent: 'parent' set and oh yeah, these things also have to work with keepAspectRatio!\n * The way this is done is by determining how much each of these restricting actually restricts the resize and then applying the\n * strongest restriction. Because the resize affects x, y and width, height and width, height of a opposing side with keepAspectRatio,\n * the resize amount is always kept in distX & distY amount (the distance in mouse movement)\n * Instead of clamping each value, we first calculate the biggest 'clamp' (for the lack of a better name) and then apply it to all values.\n * To complicate things nodeOrigin has to be taken into account as well. This is done by offsetting the nodes as if their origin is [0, 0],\n * then calculating the restrictions as usual\n * @param startValues - starting values of resize\n * @param controlDirection - dimensions affected by the resize\n * @param pointerPosition - the current pointer position corrected for snapping\n * @param boundaries - minimum and maximum dimensions of the node\n * @param keepAspectRatio - prevent changes of asprect ratio\n * @returns x, y, width and height of the node after resize\n */\nfunction getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {\n  let {\n    affectsX,\n    affectsY\n  } = controlDirection;\n  const {\n    isHorizontal,\n    isVertical\n  } = controlDirection;\n  const isDiagonal = isHorizontal && isVertical;\n  const {\n    xSnapped,\n    ySnapped\n  } = pointerPosition;\n  const {\n    minWidth,\n    maxWidth,\n    minHeight,\n    maxHeight\n  } = boundaries;\n  const {\n    x: startX,\n    y: startY,\n    width: startWidth,\n    height: startHeight,\n    aspectRatio\n  } = startValues;\n  let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);\n  let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);\n  const newWidth = startWidth + (affectsX ? -distX : distX);\n  const newHeight = startHeight + (affectsY ? -distY : distY);\n  const originOffsetX = -nodeOrigin[0] * startWidth;\n  const originOffsetY = -nodeOrigin[1] * startHeight;\n  // Check if maxWidth, minWWidth, maxHeight, minHeight are restricting the resize\n  let clampX = getSizeClamp(newWidth, minWidth, maxWidth);\n  let clampY = getSizeClamp(newHeight, minHeight, maxHeight);\n  // Check if extent is restricting the resize\n  if (extent) {\n    let xExtentClamp = 0;\n    let yExtentClamp = 0;\n    if (affectsX && distX < 0) {\n      xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);\n    } else if (!affectsX && distX > 0) {\n      xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);\n    }\n    if (affectsY && distY < 0) {\n      yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);\n    } else if (!affectsY && distY > 0) {\n      yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);\n    }\n    clampX = Math.max(clampX, xExtentClamp);\n    clampY = Math.max(clampY, yExtentClamp);\n  }\n  // Check if the child extent is restricting the resize\n  if (childExtent) {\n    let xExtentClamp = 0;\n    let yExtentClamp = 0;\n    if (affectsX && distX > 0) {\n      xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);\n    } else if (!affectsX && distX < 0) {\n      xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);\n    }\n    if (affectsY && distY > 0) {\n      yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);\n    } else if (!affectsY && distY < 0) {\n      yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);\n    }\n    clampX = Math.max(clampX, xExtentClamp);\n    clampY = Math.max(clampY, yExtentClamp);\n  }\n  // Check if the aspect ratio resizing of the other side is restricting the resize\n  if (keepAspectRatio) {\n    if (isHorizontal) {\n      // Check if the max dimensions might be restricting the resize\n      const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;\n      clampX = Math.max(clampX, aspectHeightClamp);\n      // Check if the extent is restricting the resize\n      if (extent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {\n          aspectExtentClamp = getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;\n        } else {\n          aspectExtentClamp = getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) * aspectRatio;\n        }\n        clampX = Math.max(clampX, aspectExtentClamp);\n      }\n      // Check if the child extent is restricting the resize\n      if (childExtent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {\n          aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;\n        } else {\n          aspectExtentClamp = getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;\n        }\n        clampX = Math.max(clampX, aspectExtentClamp);\n      }\n    }\n    // Do the same thing for vertical resizing\n    if (isVertical) {\n      const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;\n      clampY = Math.max(clampY, aspectWidthClamp);\n      if (extent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {\n          aspectExtentClamp = getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;\n        } else {\n          aspectExtentClamp = getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) / aspectRatio;\n        }\n        clampY = Math.max(clampY, aspectExtentClamp);\n      }\n      if (childExtent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {\n          aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;\n        } else {\n          aspectExtentClamp = getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;\n        }\n        clampY = Math.max(clampY, aspectExtentClamp);\n      }\n    }\n  }\n  distY = distY + (distY < 0 ? clampY : -clampY);\n  distX = distX + (distX < 0 ? clampX : -clampX);\n  if (keepAspectRatio) {\n    if (isDiagonal) {\n      if (newWidth > newHeight * aspectRatio) {\n        distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;\n      } else {\n        distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;\n      }\n    } else {\n      if (isHorizontal) {\n        distY = distX / aspectRatio;\n        affectsY = affectsX;\n      } else {\n        distX = distY * aspectRatio;\n        affectsX = affectsY;\n      }\n    }\n  }\n  const x = affectsX ? startX + distX : startX;\n  const y = affectsY ? startY + distY : startY;\n  return {\n    width: startWidth + (affectsX ? -distX : distX),\n    height: startHeight + (affectsY ? -distY : distY),\n    x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,\n    y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y\n  };\n}\nconst initPrevValues = {\n  width: 0,\n  height: 0,\n  x: 0,\n  y: 0\n};\nconst initStartValues = {\n  ...initPrevValues,\n  pointerX: 0,\n  pointerY: 0,\n  aspectRatio: 1\n};\nfunction nodeToParentExtent(node) {\n  return [[0, 0], [node.measured.width, node.measured.height]];\n}\nfunction nodeToChildExtent(child, parent, nodeOrigin) {\n  const x = parent.position.x + child.position.x;\n  const y = parent.position.y + child.position.y;\n  const width = child.measured.width ?? 0;\n  const height = child.measured.height ?? 0;\n  const originOffsetX = nodeOrigin[0] * width;\n  const originOffsetY = nodeOrigin[1] * height;\n  return [[x - originOffsetX, y - originOffsetY], [x + width - originOffsetX, y + height - originOffsetY]];\n}\nfunction XYResizer({\n  domNode,\n  nodeId,\n  getStoreItems,\n  onChange,\n  onEnd\n}) {\n  const selection = select(domNode);\n  function update({\n    controlPosition,\n    boundaries,\n    keepAspectRatio,\n    resizeDirection,\n    onResizeStart,\n    onResize,\n    onResizeEnd,\n    shouldResize\n  }) {\n    let prevValues = {\n      ...initPrevValues\n    };\n    let startValues = {\n      ...initStartValues\n    };\n    const controlDirection = getControlDirection(controlPosition);\n    let node = undefined;\n    let containerBounds = null;\n    let childNodes = [];\n    let parentNode = undefined; // Needed to fix expandParent\n    let parentExtent = undefined;\n    let childExtent = undefined;\n    const dragHandler = drag().on('start', event => {\n      const {\n        nodeLookup,\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin,\n        paneDomNode\n      } = getStoreItems();\n      node = nodeLookup.get(nodeId);\n      if (!node) {\n        return;\n      }\n      containerBounds = paneDomNode?.getBoundingClientRect() ?? null;\n      const {\n        xSnapped,\n        ySnapped\n      } = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid,\n        containerBounds\n      });\n      prevValues = {\n        width: node.measured.width ?? 0,\n        height: node.measured.height ?? 0,\n        x: node.position.x ?? 0,\n        y: node.position.y ?? 0\n      };\n      startValues = {\n        ...prevValues,\n        pointerX: xSnapped,\n        pointerY: ySnapped,\n        aspectRatio: prevValues.width / prevValues.height\n      };\n      parentNode = undefined;\n      if (node.parentId && (node.extent === 'parent' || node.expandParent)) {\n        parentNode = nodeLookup.get(node.parentId);\n        parentExtent = parentNode && node.extent === 'parent' ? nodeToParentExtent(parentNode) : undefined;\n      }\n      /*\n       * Collect all child nodes to correct their relative positions when top/left changes\n       * Determine largest minimal extent the parent node is allowed to resize to\n       */\n      childNodes = [];\n      childExtent = undefined;\n      for (const [childId, child] of nodeLookup) {\n        if (child.parentId === nodeId) {\n          childNodes.push({\n            id: childId,\n            position: {\n              ...child.position\n            },\n            extent: child.extent\n          });\n          if (child.extent === 'parent' || child.expandParent) {\n            const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);\n            if (childExtent) {\n              childExtent = [[Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])], [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])]];\n            } else {\n              childExtent = extent;\n            }\n          }\n        }\n      }\n      onResizeStart?.(event, {\n        ...prevValues\n      });\n    }).on('drag', event => {\n      const {\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin: storeNodeOrigin\n      } = getStoreItems();\n      const pointerPosition = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid,\n        containerBounds\n      });\n      const childChanges = [];\n      if (!node) {\n        return;\n      }\n      const {\n        x: prevX,\n        y: prevY,\n        width: prevWidth,\n        height: prevHeight\n      } = prevValues;\n      const change = {};\n      const nodeOrigin = node.origin ?? storeNodeOrigin;\n      const {\n        width,\n        height,\n        x,\n        y\n      } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);\n      const isWidthChange = width !== prevWidth;\n      const isHeightChange = height !== prevHeight;\n      const isXPosChange = x !== prevX && isWidthChange;\n      const isYPosChange = y !== prevY && isHeightChange;\n      if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {\n        return;\n      }\n      if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {\n        change.x = isXPosChange ? x : prevValues.x;\n        change.y = isYPosChange ? y : prevValues.y;\n        prevValues.x = change.x;\n        prevValues.y = change.y;\n        /*\n         * when top/left changes, correct the relative positions of child nodes\n         * so that they stay in the same position\n         */\n        if (childNodes.length > 0) {\n          const xChange = x - prevX;\n          const yChange = y - prevY;\n          for (const childNode of childNodes) {\n            childNode.position = {\n              x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),\n              y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight)\n            };\n            childChanges.push(childNode);\n          }\n        }\n      }\n      if (isWidthChange || isHeightChange) {\n        change.width = isWidthChange && (!resizeDirection || resizeDirection === 'horizontal') ? width : prevValues.width;\n        change.height = isHeightChange && (!resizeDirection || resizeDirection === 'vertical') ? height : prevValues.height;\n        prevValues.width = change.width;\n        prevValues.height = change.height;\n      }\n      // Fix expandParent when resizing from top/left\n      if (parentNode && node.expandParent) {\n        const xLimit = nodeOrigin[0] * (change.width ?? 0);\n        if (change.x && change.x < xLimit) {\n          prevValues.x = xLimit;\n          startValues.x = startValues.x - (change.x - xLimit);\n        }\n        const yLimit = nodeOrigin[1] * (change.height ?? 0);\n        if (change.y && change.y < yLimit) {\n          prevValues.y = yLimit;\n          startValues.y = startValues.y - (change.y - yLimit);\n        }\n      }\n      const direction = getResizeDirection({\n        width: prevValues.width,\n        prevWidth,\n        height: prevValues.height,\n        prevHeight,\n        affectsX: controlDirection.affectsX,\n        affectsY: controlDirection.affectsY\n      });\n      const nextValues = {\n        ...prevValues,\n        direction\n      };\n      const callResize = shouldResize?.(event, nextValues);\n      if (callResize === false) {\n        return;\n      }\n      onResize?.(event, nextValues);\n      onChange(change, childChanges);\n    }).on('end', event => {\n      onResizeEnd?.(event, {\n        ...prevValues\n      });\n      onEnd?.({\n        ...prevValues\n      });\n    });\n    selection.call(dragHandler);\n  }\n  function destroy() {\n    selection.on('.drag', null);\n  }\n  return {\n    update,\n    destroy\n  };\n}\nexport { ConnectionLineType, ConnectionMode, MarkerType, PanOnScrollMode, Position, ResizeControlVariant, SelectionMode, XYDrag, XYHandle, XYMinimap, XYPanZoom, XYResizer, XY_RESIZER_HANDLE_POSITIONS, XY_RESIZER_LINE_POSITIONS, addEdge, adoptUserNodes, areConnectionMapsEqual, areSetsEqual, boxToRect, calcAutoPan, calculateNodePosition, clamp, clampPosition, clampPositionToParent, createMarkerIds, devWarn, elementSelectionKeys, errorMessages, evaluateAbsolutePosition, fitViewport, getBezierEdgeCenter, getBezierPath, getBoundsOfBoxes, getBoundsOfRects, getConnectedEdges, getConnectionStatus, getDimensions, getEdgeCenter, getEdgePosition, getElementsToRemove, getElevatedEdgeZIndex, getEventPosition, getHandleBounds, getHandlePosition, getHostForElement, getIncomers, getInternalNodesBounds, getMarkerId, getNodeDimensions, getNodePositionWithOrigin, getNodeToolbarTransform, getNodesBounds, getNodesInside, getOutgoers, getOverlappingArea, getPointerPosition, getSmoothStepPath, getStraightPath, getViewportForBounds, handleConnectionChange, handleExpandParent, infiniteExtent, initialConnection, isCoordinateExtent, isEdgeBase, isEdgeVisible, isInputDOMNode, isInternalNodeBase, isMacOs, isMouseEvent, isNodeBase, isNumeric, isRectObject, nodeHasDimensions, nodeToBox, nodeToRect, oppositePosition, panBy, pointToRendererPoint, reconnectEdge, rectToBox, rendererPointToPoint, shallowNodeData, snapPosition, updateAbsolutePositions, updateConnectionLookup, updateNodeInternals, withResolvers };","map":{"version":3,"names":["drag","select","pointer","zoom","zoomIdentity","zoomTransform","errorMessages","error001","error002","error003","nodeType","error004","error005","error006","error007","id","error009","type","error008","handleType","sourceHandle","targetHandle","error010","error011","edgeType","error012","error013","lib","error014","error015","infiniteExtent","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","elementSelectionKeys","ConnectionMode","PanOnScrollMode","SelectionMode","initialConnection","inProgress","isValid","from","fromHandle","fromPosition","fromNode","to","toHandle","toPosition","toNode","ConnectionLineType","MarkerType","Position","oppositePosition","Left","Right","Top","Bottom","areConnectionMapsEqual","a","b","size","key","keys","has","handleConnectionChange","cb","diff","forEach","connection","push","length","getConnectionStatus","isEdgeBase","element","isNodeBase","isInternalNodeBase","getOutgoers","node","nodes","edges","outgoerIds","Set","edge","source","add","target","filter","n","getIncomers","incomersIds","getNodePositionWithOrigin","nodeOrigin","width","height","getNodeDimensions","origin","offsetX","offsetY","x","position","y","getNodesBounds","params","process","env","NODE_ENV","nodeLookup","console","warn","box","reduce","currBox","nodeOrId","isId","currentNode","undefined","get","nodeBox","nodeToBox","x2","y2","getBoundsOfBoxes","Infinity","boxToRect","getInternalNodesBounds","getNodesInside","rect","tx","ty","tScale","partially","excludeNonSelectableNodes","paneRect","pointToRendererPoint","visibleNodes","values","measured","selectable","hidden","initialWidth","initialHeight","overlappingArea","getOverlappingArea","nodeToRect","area","partiallyVisible","forceInitialRender","internals","handleBounds","isVisible","dragging","getConnectedEdges","nodeIds","getFitViewNodes","options","fitViewNodes","Map","optionNodeIds","map","includeHiddenNodes","set","fitViewport","panZoom","minZoom","maxZoom","Promise","resolve","nodesToFit","bounds","viewport","getViewportForBounds","padding","setViewport","duration","calculateNodePosition","nodeId","nextPosition","nodeExtent","onError","parentNode","parentId","parentX","parentY","positionAbsolute","extent","expandParent","parentWidth","parentHeight","isCoordinateExtent","clampPosition","getElementsToRemove","nodesToRemove","edgesToRemove","onBeforeDelete","matchingNodes","deletable","isIncluded","parentHit","find","edgeIds","deletableEdges","connectedEdges","matchingEdges","e","onBeforeDeleteResult","clamp","val","min","max","Math","dimensions","clampPositionToParent","childPosition","childDimensions","parent","calcAutoPanVelocity","value","abs","calcAutoPan","pos","speed","distance","xMovement","yMovement","box1","box2","rectToBox","getBoundsOfRects","rect1","rect2","rectA","rectB","xOverlap","yOverlap","ceil","isRectObject","obj","isNumeric","isNaN","isFinite","devWarn","message","snapPosition","snapGrid","round","snapToGrid","rendererPointToPoint","parsePadding","floor","endsWith","paddingValue","parseFloat","error","parsePaddings","paddingY","paddingX","top","right","bottom","left","calculateAppliedPaddings","boundRight","boundBottom","p","xZoom","yZoom","clampedZoom","boundsCenterX","boundsCenterY","newPadding","offset","isMacOs","navigator","userAgent","indexOf","nodeHasDimensions","evaluateAbsolutePosition","areSetsEqual","item","withResolvers","reject","promise","res","rej","getPointerPosition","event","transform","containerBounds","getEventPosition","pointerPos","xSnapped","ySnapped","getDimensions","offsetWidth","offsetHeight","getHostForElement","getRootNode","window","document","inputTags","isInputDOMNode","composedPath","isInput","includes","nodeName","hasAttribute","closest","isMouseEvent","isMouse","evtX","clientX","touches","evtY","clientY","getHandleBounds","nodeElement","nodeBounds","handles","querySelectorAll","Array","handle","getBoundingClientRect","getAttribute","getBezierEdgeCenter","sourceX","sourceY","targetX","targetY","sourceControlX","sourceControlY","targetControlX","targetControlY","centerX","centerY","calculateControlOffset","curvature","sqrt","getControlWithCurvature","x1","y1","c","getBezierPath","sourcePosition","targetPosition","labelX","labelY","getEdgeCenter","xOffset","yOffset","getElevatedEdgeZIndex","sourceNode","targetNode","selected","zIndex","elevateOnSelect","edgeOrConnectedNodeSelected","selectedZIndex","z","isEdgeVisible","edgeBox","viewRect","getEdgeId","connectionExists","some","el","addEdge","edgeParams","concat","reconnectEdge","oldEdge","newConnection","shouldReplaceId","oldEdgeId","rest","foundEdge","getStraightPath","handleDirections","getDirection","pow","getPoints","center","sourceDir","targetDir","sourceGapped","targetGapped","dir","dirAccessor","currDir","points","sourceGapOffset","targetGapOffset","defaultCenterX","defaultCenterY","defaultOffsetX","defaultOffsetY","verticalSplit","horizontalSplit","sourceTarget","targetSource","gapOffset","dirAccessorOpposite","isSameDir","sourceGtTargetOppo","sourceLtTargetOppo","flipSourceTarget","sourceGapPoint","targetGapPoint","maxXDistance","maxYDistance","pathPoints","getBend","bendSize","xDir","yDir","getSmoothStepPath","borderRadius","path","i","segment","isNodeInitialized","getEdgePosition","sourceHandleBounds","toHandleBounds","targetHandleBounds","getHandle$1","connectionMode","Strict","getHandlePosition","fallbackPosition","handleId","d","getMarkerId","marker","idPrefix","Object","sort","join","createMarkerIds","defaultColor","defaultMarkerStart","defaultMarkerEnd","ids","markers","markerStart","markerEnd","markerId","color","localeCompare","getNodeToolbarTransform","nodeRect","align","alignmentOffset","shift","defaultOptions","elevateNodesOnSelect","defaults","adoptUserNodesDefaultOptions","checkEquality","mergeObjects","base","incoming","result","updateAbsolutePositions","parentLookup","_options","updateChildNode","positionWithOrigin","clampedPosition","adoptUserNodes","nodesInitialized","tmpLookup","selectedNodeZ","clear","userNode","internalNode","calculateZ","updateParentLookup","childNodes","calculateChildXYZ","positionChanged","childNode","absolutePosition","childZ","parentZ","handleExpandParent","children","changes","parentExpansions","child","parentRect","expandedRect","xChange","yChange","newWidth","newHeight","widthChange","heightChange","setAttributes","updateNodeInternals","updates","domNode","viewportNode","querySelector","updatedInternals","style","getComputedStyle","m22","DOMMatrixReadOnly","parentExpandChildren","update","dimensionChanged","doUpdate","force","newNode","parentExpandChanges","panBy","delta","translateExtent","nextViewport","setViewportConstrained","transformChanged","k","addConnectionToLookup","connectionKey","connectionLookup","nodeMap","typeMap","handleMap","updateConnectionLookup","edgeLookup","edgeId","sourceKey","targetKey","shallowNodeData","_a","isArray","_b","is","data","isParentSelected","hasSelector","selector","current","matches","parentElement","getDragItems","nodesDraggable","mousePos","dragItems","draggable","getEventHandlerParams","nodesFromDragItems","dragItem","XYDrag","onNodeMouseDown","getStoreItems","onDragStart","onDrag","onDragStop","lastPos","autoPanId","autoPanStarted","mousePosition","dragStarted","d3Selection","abortDrag","noDragClassName","handleSelector","isSelectable","nodeClickDistance","updateNodes","dragEvent","onNodeDrag","onSelectionDrag","updateNodePositions","hasChange","nodesBox","adjustedNodeExtent","currentNodes","autoPan","autoPanSpeed","autoPanOnNodeDrag","cancelAnimationFrame","requestAnimationFrame","startDrag","multiSelectionActive","selectNodesOnDrag","onNodeDragStart","onSelectionDragStart","unselectNodesAndEdges","sourceEvent","d3DragInstance","clickDistance","on","nodeDragThreshold","onNodeDragStop","onSelectionDragStop","isDraggable","button","call","destroy","getNodesWithinDistance","ADDITIONAL_DISTANCE","getClosestHandle","connectionRadius","closestHandles","minDistance","closeNodes","allHandles","oppositeHandleType","getHandle","withAbsolutePosition","h","getHandleType","edgeUpdaterType","handleDomNode","classList","contains","isConnectionValid","isInsideConnectionRadius","isHandleValid","alwaysValid","onPointerDown","isTarget","autoPanOnConnect","flowId","cancelConnection","onConnectStart","onConnect","onConnectEnd","isValidConnection","onReconnectEnd","updateConnection","getTransform","getFromHandle","doc","closestHandle","clickedHandle","elementFromPoint","fromHandleInternal","fromNodeInternal","previousConnection","onPointerMove","onPointerUp","isValidHandle","fromNodeId","fromHandleId","fromType","connectionState","finalConnectionState","removeEventListener","addEventListener","handleBelow","handleToCheck","handleNodeId","connectable","connectableEnd","isConnectable","XYHandle","XYMinimap","getViewScale","selection","zoomStep","pannable","zoomable","inversePan","zoomHandler","pinchDelta","deltaY","deltaMode","nextZoom","scaleTo","panStart","panStartHandler","panHandler","panCurrent","panDelta","moveScale","log","zoomAndPanHandler","viewChanged","prevViewport","eventViewport","transformToViewport","viewportToTransform","translate","scale","isWrappedWithClass","className","isRightClickPan","panOnDrag","usedButton","getD3Transition","onEnd","hasDuration","transition","wheelDelta","factor","ctrlKey","createPanOnScrollHandler","zoomPanValues","noWheelClassName","d3Zoom","panOnScrollMode","panOnScrollSpeed","zoomOnPinch","onPanZoomStart","onPanZoom","onPanZoomEnd","preventDefault","stopImmediatePropagation","currentZoom","property","point","deltaNormalize","deltaX","Vertical","Horizontal","shiftKey","translateBy","internal","clearTimeout","panScrollTimeout","isPanScrolling","setTimeout","createZoomOnScrollHandler","preventScrolling","d3ZoomHandler","isWheel","preventZoom","hasNoWheelClass","createPanZoomStartHandler","onDraggingChange","mouseButton","isZoomingOrPanning","createPanZoomHandler","onPaneContextMenu","onTransformChange","usedRightMouseButton","sync","createPanZoomEndHandler","panOnScroll","timerId","createFilter","zoomActivationKeyPressed","zoomOnScroll","zoomOnDoubleClick","userSelectionActive","noPanClassName","zoomScroll","pinchZoom","buttonAllowed","XYPanZoom","paneClickDistance","bbox","d3ZoomInstance","scaleExtent","d3DblClickZoomHandler","setTransform","isPanOnScroll","wheelHandler","passive","startHandler","panZoomHandler","panZoomEndHandler","nextTransform","contrainedTransform","constrain","syncViewport","currentTransform","getViewport","scaleBy","setScaleExtent","setTranslateExtent","setClickDistance","validDistance","ResizeControlVariant","XY_RESIZER_HANDLE_POSITIONS","XY_RESIZER_LINE_POSITIONS","getResizeDirection","prevWidth","prevHeight","affectsX","affectsY","deltaWidth","deltaHeight","direction","getControlDirection","controlPosition","isHorizontal","isVertical","getLowerExtentClamp","lowerExtent","lowerBound","getUpperExtentClamp","upperExtent","upperBound","getSizeClamp","minSize","maxSize","xor","getDimensionsAfterResize","startValues","controlDirection","pointerPosition","boundaries","keepAspectRatio","childExtent","isDiagonal","minWidth","maxWidth","minHeight","maxHeight","startX","startY","startWidth","startHeight","aspectRatio","distX","pointerX","distY","pointerY","originOffsetX","originOffsetY","clampX","clampY","xExtentClamp","yExtentClamp","aspectHeightClamp","aspectExtentClamp","aspectWidthClamp","initPrevValues","initStartValues","nodeToParentExtent","nodeToChildExtent","XYResizer","onChange","resizeDirection","onResizeStart","onResize","onResizeEnd","shouldResize","prevValues","parentExtent","dragHandler","paneDomNode","childId","storeNodeOrigin","childChanges","prevX","prevY","change","isWidthChange","isHeightChange","isXPosChange","isYPosChange","xLimit","yLimit","nextValues","callResize"],"sources":["/Users/seanmcgowan/Desktop/journey-builder/node_modules/@xyflow/system/dist/esm/index.js"],"sourcesContent":["import { drag } from 'd3-drag';\nimport { select, pointer } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\n\nconst errorMessages = {\n    error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n    error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n    error003: (nodeType) => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n    error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n    error005: () => 'Only child nodes can use a parent extent.',\n    error006: () => \"Can't create edge. An edge needs a source and a target.\",\n    error007: (id) => `The old edge with id=${id} does not exist.`,\n    error009: (type) => `Marker type \"${type}\" doesn't exist.`,\n    error008: (handleType, { id, sourceHandle, targetHandle }) => `Couldn't create edge for ${handleType} handle id: \"${handleType === 'source' ? sourceHandle : targetHandle}\", edge id: ${id}.`,\n    error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n    error011: (edgeType) => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n    error012: (id) => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\n    error013: (lib = 'react') => `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`,\n    error014: () => 'useNodeConnections: No node ID found. Call useNodeConnections inside a custom Node or provide a node ID.',\n    error015: () => 'It seems that you are trying to drag a node that is not initialized. Please use onNodesChange as explained in the docs.',\n};\nconst infiniteExtent = [\n    [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\n    [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\n];\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\n\n/**\n * The `ConnectionMode` is used to set the mode of connection between nodes.\n * The `Strict` mode is the default one and only allows source to target edges.\n * `Loose` mode allows source to source and target to target edges as well.\n *\n * @public\n */\nvar ConnectionMode;\n(function (ConnectionMode) {\n    ConnectionMode[\"Strict\"] = \"strict\";\n    ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\n/**\n * This enum is used to set the different modes of panning the viewport when the\n * user scrolls. The `Free` mode allows the user to pan in any direction by scrolling\n * with a device like a trackpad. The `Vertical` and `Horizontal` modes restrict\n * scroll panning to only the vertical or horizontal axis, respectively.\n *\n * @public\n */\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n    PanOnScrollMode[\"Free\"] = \"free\";\n    PanOnScrollMode[\"Vertical\"] = \"vertical\";\n    PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n    SelectionMode[\"Partial\"] = \"partial\";\n    SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nconst initialConnection = {\n    inProgress: false,\n    isValid: null,\n    from: null,\n    fromHandle: null,\n    fromPosition: null,\n    fromNode: null,\n    to: null,\n    toHandle: null,\n    toPosition: null,\n    toNode: null,\n};\n\n/**\n * If you set the `connectionLineType` prop on your [`<ReactFlow />`](/api-reference/react-flow#connection-connectionLineType)\n *component, it will dictate the style of connection line rendered when creating\n *new edges.\n *\n * @public\n *\n * @remarks If you choose to render a custom connection line component, this value will be\n *passed to your component as part of its [`ConnectionLineComponentProps`](/api-reference/types/connection-line-component-props).\n */\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n    ConnectionLineType[\"Bezier\"] = \"default\";\n    ConnectionLineType[\"Straight\"] = \"straight\";\n    ConnectionLineType[\"Step\"] = \"step\";\n    ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n    ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\n/**\n * Edges may optionally have a marker on either end. The MarkerType type enumerates\n * the options available to you when configuring a given marker.\n *\n * @public\n */\nvar MarkerType;\n(function (MarkerType) {\n    MarkerType[\"Arrow\"] = \"arrow\";\n    MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\n\n/**\n * While [`PanelPosition`](/api-reference/types/panel-position) can be used to place a\n * component in the corners of a container, the `Position` enum is less precise and used\n * primarily in relation to edges and handles.\n *\n * @public\n */\nvar Position;\n(function (Position) {\n    Position[\"Left\"] = \"left\";\n    Position[\"Top\"] = \"top\";\n    Position[\"Right\"] = \"right\";\n    Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nconst oppositePosition = {\n    [Position.Left]: Position.Right,\n    [Position.Right]: Position.Left,\n    [Position.Top]: Position.Bottom,\n    [Position.Bottom]: Position.Top,\n};\n\n/**\n * @internal\n */\nfunction areConnectionMapsEqual(a, b) {\n    if (!a && !b) {\n        return true;\n    }\n    if (!a || !b || a.size !== b.size) {\n        return false;\n    }\n    if (!a.size && !b.size) {\n        return true;\n    }\n    for (const key of a.keys()) {\n        if (!b.has(key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * We call the callback for all connections in a that are not in b\n *\n * @internal\n */\nfunction handleConnectionChange(a, b, cb) {\n    if (!cb) {\n        return;\n    }\n    const diff = [];\n    a.forEach((connection, key) => {\n        if (!b?.has(key)) {\n            diff.push(connection);\n        }\n    });\n    if (diff.length) {\n        cb(diff);\n    }\n}\nfunction getConnectionStatus(isValid) {\n    return isValid === null ? null : isValid ? 'valid' : 'invalid';\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Test whether an object is usable as an Edge\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Edge\n */\nconst isEdgeBase = (element) => 'id' in element && 'source' in element && 'target' in element;\n/**\n * Test whether an object is usable as a Node\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Node\n */\nconst isNodeBase = (element) => 'id' in element && 'position' in element && !('source' in element) && !('target' in element);\nconst isInternalNodeBase = (element) => 'id' in element && 'internals' in element && !('source' in element) && !('target' in element);\n/**\n * This util is used to tell you what nodes, if any, are connected to the given node\n * as the _target_ of an edge.\n * @public\n * @param node - The node to get the connected nodes from.\n * @param nodes - The array of all nodes.\n * @param edges - The array of all edges.\n * @returns An array of nodes that are connected over edges where the source is the given node.\n *\n * @example\n * ```ts\n *import { getOutgoers } from '@xyflow/react';\n *\n *const nodes = [];\n *const edges = [];\n *\n *const outgoers = getOutgoers(\n *  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\n *  nodes,\n *  edges,\n *);\n *```\n */\nconst getOutgoers = (node, nodes, edges) => {\n    if (!node.id) {\n        return [];\n    }\n    const outgoerIds = new Set();\n    edges.forEach((edge) => {\n        if (edge.source === node.id) {\n            outgoerIds.add(edge.target);\n        }\n    });\n    return nodes.filter((n) => outgoerIds.has(n.id));\n};\n/**\n * This util is used to tell you what nodes, if any, are connected to the given node\n * as the _source_ of an edge.\n * @public\n * @param node - The node to get the connected nodes from.\n * @param nodes - The array of all nodes.\n * @param edges - The array of all edges.\n * @returns An array of nodes that are connected over edges where the target is the given node.\n *\n * @example\n * ```ts\n *import { getIncomers } from '@xyflow/react';\n *\n *const nodes = [];\n *const edges = [];\n *\n *const incomers = getIncomers(\n *  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\n *  nodes,\n *  edges,\n *);\n *```\n */\nconst getIncomers = (node, nodes, edges) => {\n    if (!node.id) {\n        return [];\n    }\n    const incomersIds = new Set();\n    edges.forEach((edge) => {\n        if (edge.target === node.id) {\n            incomersIds.add(edge.source);\n        }\n    });\n    return nodes.filter((n) => incomersIds.has(n.id));\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\n    const { width, height } = getNodeDimensions(node);\n    const origin = node.origin ?? nodeOrigin;\n    const offsetX = width * origin[0];\n    const offsetY = height * origin[1];\n    return {\n        x: node.position.x - offsetX,\n        y: node.position.y - offsetY,\n    };\n};\n/**\n * Returns the bounding box that contains all the given nodes in an array. This can\n * be useful when combined with [`getViewportForBounds`](/api-reference/utils/get-viewport-for-bounds)\n * to calculate the correct transform to fit the given nodes in a viewport.\n * @public\n * @remarks Useful when combined with {@link getViewportForBounds} to calculate the correct transform to fit the given nodes in a viewport.\n * @param nodes - Nodes to calculate the bounds for.\n * @returns Bounding box enclosing all nodes.\n *\n * @remarks This function was previously called `getRectOfNodes`\n *\n * @example\n * ```js\n *import { getNodesBounds } from '@xyflow/react';\n *\n *const nodes = [\n *  {\n *    id: 'a',\n *    position: { x: 0, y: 0 },\n *    data: { label: 'a' },\n *    width: 50,\n *    height: 25,\n *  },\n *  {\n *    id: 'b',\n *    position: { x: 100, y: 100 },\n *    data: { label: 'b' },\n *    width: 50,\n *    height: 25,\n *  },\n *];\n *\n *const bounds = getNodesBounds(nodes);\n *```\n */\nconst getNodesBounds = (nodes, params = { nodeOrigin: [0, 0] }) => {\n    if (process.env.NODE_ENV === 'development' && !params.nodeLookup) {\n        console.warn('Please use `getNodesBounds` from `useReactFlow`/`useSvelteFlow` hook to ensure correct values for sub flows. If not possible, you have to provide a nodeLookup to support sub flows.');\n    }\n    if (nodes.length === 0) {\n        return { x: 0, y: 0, width: 0, height: 0 };\n    }\n    const box = nodes.reduce((currBox, nodeOrId) => {\n        const isId = typeof nodeOrId === 'string';\n        let currentNode = !params.nodeLookup && !isId ? nodeOrId : undefined;\n        if (params.nodeLookup) {\n            currentNode = isId\n                ? params.nodeLookup.get(nodeOrId)\n                : !isInternalNodeBase(nodeOrId)\n                    ? params.nodeLookup.get(nodeOrId.id)\n                    : nodeOrId;\n        }\n        const nodeBox = currentNode ? nodeToBox(currentNode, params.nodeOrigin) : { x: 0, y: 0, x2: 0, y2: 0 };\n        return getBoundsOfBoxes(currBox, nodeBox);\n    }, { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity });\n    return boxToRect(box);\n};\n/**\n * Determines a bounding box that contains all given nodes in an array\n * @internal\n */\nconst getInternalNodesBounds = (nodeLookup, params = {}) => {\n    if (nodeLookup.size === 0) {\n        return { x: 0, y: 0, width: 0, height: 0 };\n    }\n    let box = { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity };\n    nodeLookup.forEach((node) => {\n        if (params.filter === undefined || params.filter(node)) {\n            const nodeBox = nodeToBox(node);\n            box = getBoundsOfBoxes(box, nodeBox);\n        }\n    });\n    return boxToRect(box);\n};\nconst getNodesInside = (nodes, rect, [tx, ty, tScale] = [0, 0, 1], partially = false, \n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false) => {\n    const paneRect = {\n        ...pointToRendererPoint(rect, [tx, ty, tScale]),\n        width: rect.width / tScale,\n        height: rect.height / tScale,\n    };\n    const visibleNodes = [];\n    for (const node of nodes.values()) {\n        const { measured, selectable = true, hidden = false } = node;\n        if ((excludeNonSelectableNodes && !selectable) || hidden) {\n            continue;\n        }\n        const width = measured.width ?? node.width ?? node.initialWidth ?? null;\n        const height = measured.height ?? node.height ?? node.initialHeight ?? null;\n        const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));\n        const area = (width ?? 0) * (height ?? 0);\n        const partiallyVisible = partially && overlappingArea > 0;\n        const forceInitialRender = !node.internals.handleBounds;\n        const isVisible = forceInitialRender || partiallyVisible || overlappingArea >= area;\n        if (isVisible || node.dragging) {\n            visibleNodes.push(node);\n        }\n    }\n    return visibleNodes;\n};\n/**\n * This utility filters an array of edges, keeping only those where either the source or target\n * node is present in the given array of nodes.\n * @public\n * @param nodes - Nodes you want to get the connected edges for.\n * @param edges - All edges.\n * @returns Array of edges that connect any of the given nodes with each other.\n *\n * @example\n * ```js\n *import { getConnectedEdges } from '@xyflow/react';\n *\n *const nodes = [\n *  { id: 'a', position: { x: 0, y: 0 } },\n *  { id: 'b', position: { x: 100, y: 0 } },\n *];\n *\n *const edges = [\n *  { id: 'a->c', source: 'a', target: 'c' },\n *  { id: 'c->d', source: 'c', target: 'd' },\n *];\n *\n *const connectedEdges = getConnectedEdges(nodes, edges);\n * // => [{ id: 'a->c', source: 'a', target: 'c' }]\n *```\n */\nconst getConnectedEdges = (nodes, edges) => {\n    const nodeIds = new Set();\n    nodes.forEach((node) => {\n        nodeIds.add(node.id);\n    });\n    return edges.filter((edge) => nodeIds.has(edge.source) || nodeIds.has(edge.target));\n};\nfunction getFitViewNodes(nodeLookup, options) {\n    const fitViewNodes = new Map();\n    const optionNodeIds = options?.nodes ? new Set(options.nodes.map((node) => node.id)) : null;\n    nodeLookup.forEach((n) => {\n        const isVisible = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);\n        if (isVisible && (!optionNodeIds || optionNodeIds.has(n.id))) {\n            fitViewNodes.set(n.id, n);\n        }\n    });\n    return fitViewNodes;\n}\nasync function fitViewport({ nodes, width, height, panZoom, minZoom, maxZoom }, options) {\n    if (nodes.size === 0) {\n        return Promise.resolve(true);\n    }\n    const nodesToFit = getFitViewNodes(nodes, options);\n    const bounds = getInternalNodesBounds(nodesToFit);\n    const viewport = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);\n    await panZoom.setViewport(viewport, { duration: options?.duration });\n    return Promise.resolve(true);\n}\n/**\n * This function calculates the next position of a node, taking into account the node's extent, parent node, and origin.\n *\n * @internal\n * @returns position, positionAbsolute\n */\nfunction calculateNodePosition({ nodeId, nextPosition, nodeLookup, nodeOrigin = [0, 0], nodeExtent, onError, }) {\n    const node = nodeLookup.get(nodeId);\n    const parentNode = node.parentId ? nodeLookup.get(node.parentId) : undefined;\n    const { x: parentX, y: parentY } = parentNode ? parentNode.internals.positionAbsolute : { x: 0, y: 0 };\n    const origin = node.origin ?? nodeOrigin;\n    let extent = nodeExtent;\n    if (node.extent === 'parent' && !node.expandParent) {\n        if (!parentNode) {\n            onError?.('005', errorMessages['error005']());\n        }\n        else {\n            const parentWidth = parentNode.measured.width;\n            const parentHeight = parentNode.measured.height;\n            if (parentWidth && parentHeight) {\n                extent = [\n                    [parentX, parentY],\n                    [parentX + parentWidth, parentY + parentHeight],\n                ];\n            }\n        }\n    }\n    else if (parentNode && isCoordinateExtent(node.extent)) {\n        extent = [\n            [node.extent[0][0] + parentX, node.extent[0][1] + parentY],\n            [node.extent[1][0] + parentX, node.extent[1][1] + parentY],\n        ];\n    }\n    const positionAbsolute = isCoordinateExtent(extent)\n        ? clampPosition(nextPosition, extent, node.measured)\n        : nextPosition;\n    if (node.measured.width === undefined || node.measured.height === undefined) {\n        onError?.('015', errorMessages['error015']());\n    }\n    return {\n        position: {\n            x: positionAbsolute.x - parentX + (node.measured.width ?? 0) * origin[0],\n            y: positionAbsolute.y - parentY + (node.measured.height ?? 0) * origin[1],\n        },\n        positionAbsolute,\n    };\n}\n/**\n * Pass in nodes & edges to delete, get arrays of nodes and edges that actually can be deleted\n * @internal\n * @param param.nodesToRemove - The nodes to remove\n * @param param.edgesToRemove - The edges to remove\n * @param param.nodes - All nodes\n * @param param.edges - All edges\n * @param param.onBeforeDelete - Callback to check which nodes and edges can be deleted\n * @returns nodes: nodes that can be deleted, edges: edges that can be deleted\n */\nasync function getElementsToRemove({ nodesToRemove = [], edgesToRemove = [], nodes, edges, onBeforeDelete, }) {\n    const nodeIds = new Set(nodesToRemove.map((node) => node.id));\n    const matchingNodes = [];\n    for (const node of nodes) {\n        if (node.deletable === false) {\n            continue;\n        }\n        const isIncluded = nodeIds.has(node.id);\n        const parentHit = !isIncluded && node.parentId && matchingNodes.find((n) => n.id === node.parentId);\n        if (isIncluded || parentHit) {\n            matchingNodes.push(node);\n        }\n    }\n    const edgeIds = new Set(edgesToRemove.map((edge) => edge.id));\n    const deletableEdges = edges.filter((edge) => edge.deletable !== false);\n    const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);\n    const matchingEdges = connectedEdges;\n    for (const edge of deletableEdges) {\n        const isIncluded = edgeIds.has(edge.id);\n        if (isIncluded && !matchingEdges.find((e) => e.id === edge.id)) {\n            matchingEdges.push(edge);\n        }\n    }\n    if (!onBeforeDelete) {\n        return {\n            edges: matchingEdges,\n            nodes: matchingNodes,\n        };\n    }\n    const onBeforeDeleteResult = await onBeforeDelete({\n        nodes: matchingNodes,\n        edges: matchingEdges,\n    });\n    if (typeof onBeforeDeleteResult === 'boolean') {\n        return onBeforeDeleteResult ? { edges: matchingEdges, nodes: matchingNodes } : { edges: [], nodes: [] };\n    }\n    return onBeforeDeleteResult;\n}\n\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\nconst clampPosition = (position = { x: 0, y: 0 }, extent, dimensions) => ({\n    x: clamp(position.x, extent[0][0], extent[1][0] - (dimensions?.width ?? 0)),\n    y: clamp(position.y, extent[0][1], extent[1][1] - (dimensions?.height ?? 0)),\n});\nfunction clampPositionToParent(childPosition, childDimensions, parent) {\n    const { width: parentWidth, height: parentHeight } = getNodeDimensions(parent);\n    const { x: parentX, y: parentY } = parent.internals.positionAbsolute;\n    return clampPosition(childPosition, [\n        [parentX, parentY],\n        [parentX + parentWidth, parentY + parentHeight],\n    ], childDimensions);\n}\n/**\n * Calculates the velocity of panning when the mouse is close to the edge of the canvas\n * @internal\n * @param value - One dimensional poition of the mouse (x or y)\n * @param min - Minimal position on canvas before panning starts\n * @param max - Maximal position on canvas before panning starts\n * @returns - A number between 0 and 1 that represents the velocity of panning\n */\nconst calcAutoPanVelocity = (value, min, max) => {\n    if (value < min) {\n        return clamp(Math.abs(value - min), 1, min) / min;\n    }\n    else if (value > max) {\n        return -clamp(Math.abs(value - max), 1, min) / min;\n    }\n    return 0;\n};\nconst calcAutoPan = (pos, bounds, speed = 15, distance = 40) => {\n    const xMovement = calcAutoPanVelocity(pos.x, distance, bounds.width - distance) * speed;\n    const yMovement = calcAutoPanVelocity(pos.y, distance, bounds.height - distance) * speed;\n    return [xMovement, yMovement];\n};\nconst getBoundsOfBoxes = (box1, box2) => ({\n    x: Math.min(box1.x, box2.x),\n    y: Math.min(box1.y, box2.y),\n    x2: Math.max(box1.x2, box2.x2),\n    y2: Math.max(box1.y2, box2.y2),\n});\nconst rectToBox = ({ x, y, width, height }) => ({\n    x,\n    y,\n    x2: x + width,\n    y2: y + height,\n});\nconst boxToRect = ({ x, y, x2, y2 }) => ({\n    x,\n    y,\n    width: x2 - x,\n    height: y2 - y,\n});\nconst nodeToRect = (node, nodeOrigin = [0, 0]) => {\n    const { x, y } = isInternalNodeBase(node)\n        ? node.internals.positionAbsolute\n        : getNodePositionWithOrigin(node, nodeOrigin);\n    return {\n        x,\n        y,\n        width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n        height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0,\n    };\n};\nconst nodeToBox = (node, nodeOrigin = [0, 0]) => {\n    const { x, y } = isInternalNodeBase(node)\n        ? node.internals.positionAbsolute\n        : getNodePositionWithOrigin(node, nodeOrigin);\n    return {\n        x,\n        y,\n        x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),\n        y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0),\n    };\n};\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n    const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n    const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n    return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = (obj) => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = (n) => !isNaN(n) && isFinite(n);\n// used for a11y key board controls for nodes and edges\nconst devWarn = (id, message) => {\n    if (process.env.NODE_ENV === 'development') {\n        console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n    }\n};\nconst snapPosition = (position, snapGrid = [1, 1]) => {\n    return {\n        x: snapGrid[0] * Math.round(position.x / snapGrid[0]),\n        y: snapGrid[1] * Math.round(position.y / snapGrid[1]),\n    };\n};\nconst pointToRendererPoint = ({ x, y }, [tx, ty, tScale], snapToGrid = false, snapGrid = [1, 1]) => {\n    const position = {\n        x: (x - tx) / tScale,\n        y: (y - ty) / tScale,\n    };\n    return snapToGrid ? snapPosition(position, snapGrid) : position;\n};\nconst rendererPointToPoint = ({ x, y }, [tx, ty, tScale]) => {\n    return {\n        x: x * tScale + tx,\n        y: y * tScale + ty,\n    };\n};\n/**\n * Parses a single padding value to a number\n * @internal\n * @param padding - Padding to parse\n * @param viewport - Width or height of the viewport\n * @returns The padding in pixels\n */\nfunction parsePadding(padding, viewport) {\n    if (typeof padding === 'number') {\n        return Math.floor((viewport - viewport / (1 + padding)) * 0.5);\n    }\n    if (typeof padding === 'string' && padding.endsWith('px')) {\n        const paddingValue = parseFloat(padding);\n        if (!Number.isNaN(paddingValue)) {\n            return Math.floor(paddingValue);\n        }\n    }\n    if (typeof padding === 'string' && padding.endsWith('%')) {\n        const paddingValue = parseFloat(padding);\n        if (!Number.isNaN(paddingValue)) {\n            return Math.floor(viewport * paddingValue * 0.01);\n        }\n    }\n    console.error(`[React Flow] The padding value \"${padding}\" is invalid. Please provide a number or a string with a valid unit (px or %).`);\n    return 0;\n}\n/**\n * Parses the paddings to an object with top, right, bottom, left, x and y paddings\n * @internal\n * @param padding - Padding to parse\n * @param width - Width of the viewport\n * @param height - Height of the viewport\n * @returns An object with the paddings in pixels\n */\nfunction parsePaddings(padding, width, height) {\n    if (typeof padding === 'string' || typeof padding === 'number') {\n        const paddingY = parsePadding(padding, height);\n        const paddingX = parsePadding(padding, width);\n        return {\n            top: paddingY,\n            right: paddingX,\n            bottom: paddingY,\n            left: paddingX,\n            x: paddingX * 2,\n            y: paddingY * 2,\n        };\n    }\n    if (typeof padding === 'object') {\n        const top = parsePadding(padding.top ?? padding.y ?? 0, height);\n        const bottom = parsePadding(padding.bottom ?? padding.y ?? 0, height);\n        const left = parsePadding(padding.left ?? padding.x ?? 0, width);\n        const right = parsePadding(padding.right ?? padding.x ?? 0, width);\n        return { top, right, bottom, left, x: left + right, y: top + bottom };\n    }\n    return { top: 0, right: 0, bottom: 0, left: 0, x: 0, y: 0 };\n}\n/**\n * Calculates the resulting paddings if the new viewport is applied\n * @internal\n * @param bounds - Bounds to fit inside viewport\n * @param x - X position of the viewport\n * @param y - Y position of the viewport\n * @param zoom - Zoom level of the viewport\n * @param width - Width of the viewport\n * @param height - Height of the viewport\n * @returns An object with the minimum padding required to fit the bounds inside the viewport\n */\nfunction calculateAppliedPaddings(bounds, x, y, zoom, width, height) {\n    const { x: left, y: top } = rendererPointToPoint(bounds, [x, y, zoom]);\n    const { x: boundRight, y: boundBottom } = rendererPointToPoint({ x: bounds.x + bounds.width, y: bounds.y + bounds.height }, [x, y, zoom]);\n    const right = width - boundRight;\n    const bottom = height - boundBottom;\n    return {\n        left: Math.floor(left),\n        top: Math.floor(top),\n        right: Math.floor(right),\n        bottom: Math.floor(bottom),\n    };\n}\n/**\n * Returns a viewport that encloses the given bounds with padding.\n * @public\n * @remarks You can determine bounds of nodes with {@link getNodesBounds} and {@link getBoundsOfRects}\n * @param bounds - Bounds to fit inside viewport.\n * @param width - Width of the viewport.\n * @param height  - Height of the viewport.\n * @param minZoom - Minimum zoom level of the resulting viewport.\n * @param maxZoom - Maximum zoom level of the resulting viewport.\n * @param padding - Padding around the bounds.\n * @returns A transformed {@link Viewport} that encloses the given bounds which you can pass to e.g. {@link setViewport}.\n * @example\n * const { x, y, zoom } = getViewportForBounds(\n * { x: 0, y: 0, width: 100, height: 100},\n * 1200, 800, 0.5, 2);\n */\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {\n    // First we resolve all the paddings to actual pixel values\n    const p = parsePaddings(padding, width, height);\n    const xZoom = (width - p.x) / bounds.width;\n    const yZoom = (height - p.y) / bounds.height;\n    // We calculate the new x, y, zoom for a centered view\n    const zoom = Math.min(xZoom, yZoom);\n    const clampedZoom = clamp(zoom, minZoom, maxZoom);\n    const boundsCenterX = bounds.x + bounds.width / 2;\n    const boundsCenterY = bounds.y + bounds.height / 2;\n    const x = width / 2 - boundsCenterX * clampedZoom;\n    const y = height / 2 - boundsCenterY * clampedZoom;\n    // Then we calculate the minimum padding, to respect asymmetric paddings\n    const newPadding = calculateAppliedPaddings(bounds, x, y, clampedZoom, width, height);\n    // We only want to have an offset if the newPadding is smaller than the required padding\n    const offset = {\n        left: Math.min(newPadding.left - p.left, 0),\n        top: Math.min(newPadding.top - p.top, 0),\n        right: Math.min(newPadding.right - p.right, 0),\n        bottom: Math.min(newPadding.bottom - p.bottom, 0),\n    };\n    return {\n        x: x - offset.left + offset.right,\n        y: y - offset.top + offset.bottom,\n        zoom: clampedZoom,\n    };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\nfunction isCoordinateExtent(extent) {\n    return extent !== undefined && extent !== 'parent';\n}\nfunction getNodeDimensions(node) {\n    return {\n        width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n        height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0,\n    };\n}\nfunction nodeHasDimensions(node) {\n    return ((node.measured?.width ?? node.width ?? node.initialWidth) !== undefined &&\n        (node.measured?.height ?? node.height ?? node.initialHeight) !== undefined);\n}\n/**\n * Convert child position to aboslute position\n *\n * @internal\n * @param position\n * @param parentId\n * @param nodeLookup\n * @param nodeOrigin\n * @returns an internal node with an absolute position\n */\nfunction evaluateAbsolutePosition(position, dimensions = { width: 0, height: 0 }, parentId, nodeLookup, nodeOrigin) {\n    const positionAbsolute = { ...position };\n    const parent = nodeLookup.get(parentId);\n    if (parent) {\n        const origin = parent.origin || nodeOrigin;\n        positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin[0];\n        positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin[1];\n    }\n    return positionAbsolute;\n}\nfunction areSetsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a) {\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Polyfill for Promise.withResolvers until we can use it in all browsers\n * @internal\n */\nfunction withResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    return { promise, resolve, reject };\n}\n\nfunction getPointerPosition(event, { snapGrid = [0, 0], snapToGrid = false, transform, containerBounds }) {\n    const { x, y } = getEventPosition(event);\n    const pointerPos = pointToRendererPoint({ x: x - (containerBounds?.left ?? 0), y: y - (containerBounds?.top ?? 0) }, transform);\n    const { x: xSnapped, y: ySnapped } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;\n    // we need the snapped position in order to be able to skip unnecessary drag events\n    return {\n        xSnapped,\n        ySnapped,\n        ...pointerPos,\n    };\n}\nconst getDimensions = (node) => ({\n    width: node.offsetWidth,\n    height: node.offsetHeight,\n});\nconst getHostForElement = (element) => element?.getRootNode?.() || window?.document;\nconst inputTags = ['INPUT', 'SELECT', 'TEXTAREA'];\nfunction isInputDOMNode(event) {\n    // using composed path for handling shadow dom\n    const target = (event.composedPath?.()?.[0] || event.target);\n    if (target?.nodeType !== 1 /* Node.ELEMENT_NODE */)\n        return false;\n    const isInput = inputTags.includes(target.nodeName) || target.hasAttribute('contenteditable');\n    // when an input field is focused we don't want to trigger deletion or movement of nodes\n    return isInput || !!target.closest('.nokey');\n}\nconst isMouseEvent = (event) => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n    const isMouse = isMouseEvent(event);\n    const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;\n    const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;\n    return {\n        x: evtX - (bounds?.left ?? 0),\n        y: evtY - (bounds?.top ?? 0),\n    };\n};\n/*\n * The handle bounds are calculated relative to the node element.\n * We store them in the internals object of the node in order to avoid\n * unnecessary recalculations.\n */\nconst getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {\n    const handles = nodeElement.querySelectorAll(`.${type}`);\n    if (!handles || !handles.length) {\n        return null;\n    }\n    return Array.from(handles).map((handle) => {\n        const handleBounds = handle.getBoundingClientRect();\n        return {\n            id: handle.getAttribute('data-handleid'),\n            type,\n            nodeId,\n            position: handle.getAttribute('data-handlepos'),\n            x: (handleBounds.left - nodeBounds.left) / zoom,\n            y: (handleBounds.top - nodeBounds.top) / zoom,\n            ...getDimensions(handle),\n        };\n    });\n};\n\nfunction getBezierEdgeCenter({ sourceX, sourceY, targetX, targetY, sourceControlX, sourceControlY, targetControlX, targetControlY, }) {\n    /*\n     * cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n     * https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n     */\n    const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n    const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n    const offsetX = Math.abs(centerX - sourceX);\n    const offsetY = Math.abs(centerY - sourceY);\n    return [centerX, centerY, offsetX, offsetY];\n}\nfunction calculateControlOffset(distance, curvature) {\n    if (distance >= 0) {\n        return 0.5 * distance;\n    }\n    return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({ pos, x1, y1, x2, y2, c }) {\n    switch (pos) {\n        case Position.Left:\n            return [x1 - calculateControlOffset(x1 - x2, c), y1];\n        case Position.Right:\n            return [x1 + calculateControlOffset(x2 - x1, c), y1];\n        case Position.Top:\n            return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n        case Position.Bottom:\n            return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n    }\n}\n/**\n * The `getBezierPath` util returns everything you need to render a bezier edge\n *between two nodes.\n * @public\n * @returns A path string you can use in an SVG, the `labelX` and `labelY` position (center of path)\n * and `offsetX`, `offsetY` between source handle and label.\n * - `path`: the path to use in an SVG `<path>` element.\n * - `labelX`: the `x` position you can use to render a label for this edge.\n * - `labelY`: the `y` position you can use to render a label for this edge.\n * - `offsetX`: the absolute difference between the source `x` position and the `x` position of the\n * middle of this path.\n * - `offsetY`: the absolute difference between the source `y` position and the `y` position of the\n * middle of this path.\n * @example\n * ```js\n *  const source = { x: 0, y: 20 };\n *  const target = { x: 150, y: 100 };\n *\n *  const [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\n *    sourceX: source.x,\n *    sourceY: source.y,\n *    sourcePosition: Position.Right,\n *    targetX: target.x,\n *    targetY: target.y,\n *    targetPosition: Position.Left,\n *});\n *```\n *\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to\n *work with multiple edge paths at once.\n */\nfunction getBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, curvature = 0.25, }) {\n    const [sourceControlX, sourceControlY] = getControlWithCurvature({\n        pos: sourcePosition,\n        x1: sourceX,\n        y1: sourceY,\n        x2: targetX,\n        y2: targetY,\n        c: curvature,\n    });\n    const [targetControlX, targetControlY] = getControlWithCurvature({\n        pos: targetPosition,\n        x1: targetX,\n        y1: targetY,\n        x2: sourceX,\n        y2: sourceY,\n        c: curvature,\n    });\n    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n        sourceControlX,\n        sourceControlY,\n        targetControlX,\n        targetControlY,\n    });\n    return [\n        `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY,\n    ];\n}\n\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({ sourceX, sourceY, targetX, targetY, }) {\n    const xOffset = Math.abs(targetX - sourceX) / 2;\n    const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n    const yOffset = Math.abs(targetY - sourceY) / 2;\n    const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n    return [centerX, centerY, xOffset, yOffset];\n}\nfunction getElevatedEdgeZIndex({ sourceNode, targetNode, selected = false, zIndex = 0, elevateOnSelect = false, }) {\n    if (!elevateOnSelect) {\n        return zIndex;\n    }\n    const edgeOrConnectedNodeSelected = selected || targetNode.selected || sourceNode.selected;\n    const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1000);\n    return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n}\nfunction isEdgeVisible({ sourceNode, targetNode, width, height, transform }) {\n    const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));\n    if (edgeBox.x === edgeBox.x2) {\n        edgeBox.x2 += 1;\n    }\n    if (edgeBox.y === edgeBox.y2) {\n        edgeBox.y2 += 1;\n    }\n    const viewRect = {\n        x: -transform[0] / transform[2],\n        y: -transform[1] / transform[2],\n        width: width / transform[2],\n        height: height / transform[2],\n    };\n    return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;\n}\nconst getEdgeId = ({ source, sourceHandle, target, targetHandle }) => `xy-edge__${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\nconst connectionExists = (edge, edges) => {\n    return edges.some((el) => el.source === edge.source &&\n        el.target === edge.target &&\n        (el.sourceHandle === edge.sourceHandle || (!el.sourceHandle && !edge.sourceHandle)) &&\n        (el.targetHandle === edge.targetHandle || (!el.targetHandle && !edge.targetHandle)));\n};\n/**\n * This util is a convenience function to add a new Edge to an array of edges. It also performs some validation to make sure you don't add an invalid edge or duplicate an existing one.\n * @public\n * @param edgeParams - Either an `Edge` or a `Connection` you want to add.\n * @param edges - The array of all current edges.\n * @returns A new array of edges with the new edge added.\n *\n * @remarks If an edge with the same `target` and `source` already exists (and the same\n *`targetHandle` and `sourceHandle` if those are set), then this util won't add\n *a new edge even if the `id` property is different.\n *\n */\nconst addEdge = (edgeParams, edges) => {\n    if (!edgeParams.source || !edgeParams.target) {\n        devWarn('006', errorMessages['error006']());\n        return edges;\n    }\n    let edge;\n    if (isEdgeBase(edgeParams)) {\n        edge = { ...edgeParams };\n    }\n    else {\n        edge = {\n            ...edgeParams,\n            id: getEdgeId(edgeParams),\n        };\n    }\n    if (connectionExists(edge, edges)) {\n        return edges;\n    }\n    if (edge.sourceHandle === null) {\n        delete edge.sourceHandle;\n    }\n    if (edge.targetHandle === null) {\n        delete edge.targetHandle;\n    }\n    return edges.concat(edge);\n};\n/**\n * A handy utility to update an existing [`Edge`](/api-reference/types/edge) with new properties.\n *This searches your edge array for an edge with a matching `id` and updates its\n *properties with the connection you provide.\n * @public\n * @param oldEdge - The edge you want to update.\n * @param newConnection - The new connection you want to update the edge with.\n * @param edges - The array of all current edges.\n * @returns The updated edges array.\n *\n * @example\n * ```js\n *const onReconnect = useCallback(\n *  (oldEdge: Edge, newConnection: Connection) => setEdges((els) => reconnectEdge(oldEdge, newConnection, els)),[]);\n *```\n */\nconst reconnectEdge = (oldEdge, newConnection, edges, options = { shouldReplaceId: true }) => {\n    const { id: oldEdgeId, ...rest } = oldEdge;\n    if (!newConnection.source || !newConnection.target) {\n        devWarn('006', errorMessages['error006']());\n        return edges;\n    }\n    const foundEdge = edges.find((e) => e.id === oldEdge.id);\n    if (!foundEdge) {\n        devWarn('007', errorMessages['error007'](oldEdgeId));\n        return edges;\n    }\n    // Remove old edge and create the new edge with parameters of old edge.\n    const edge = {\n        ...rest,\n        id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n        source: newConnection.source,\n        target: newConnection.target,\n        sourceHandle: newConnection.sourceHandle,\n        targetHandle: newConnection.targetHandle,\n    };\n    return edges.filter((e) => e.id !== oldEdgeId).concat(edge);\n};\n\n/**\n * Calculates the straight line path between two points.\n * @public\n * @returns A path string you can use in an SVG, the `labelX` and `labelY` position (center of path)\n * and `offsetX`, `offsetY` between source handle and label.\n *\n * - `path`: the path to use in an SVG `<path>` element.\n * - `labelX`: the `x` position you can use to render a label for this edge.\n * - `labelY`: the `y` position you can use to render a label for this edge.\n * - `offsetX`: the absolute difference between the source `x` position and the `x` position of the\n * middle of this path.\n * - `offsetY`: the absolute difference between the source `y` position and the `y` position of the\n * middle of this path.\n * @example\n * ```js\n *  const source = { x: 0, y: 20 };\n *  const target = { x: 150, y: 100 };\n *\n *  const [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\n *    sourceX: source.x,\n *    sourceY: source.y,\n *    sourcePosition: Position.Right,\n *    targetX: target.x,\n *    targetY: target.y,\n *    targetPosition: Position.Left,\n *  });\n * ```\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to work with multiple edge paths at once.\n */\nfunction getStraightPath({ sourceX, sourceY, targetX, targetY, }) {\n    const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n    });\n    return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\n\nconst handleDirections = {\n    [Position.Left]: { x: -1, y: 0 },\n    [Position.Right]: { x: 1, y: 0 },\n    [Position.Top]: { x: 0, y: -1 },\n    [Position.Bottom]: { x: 0, y: 1 },\n};\nconst getDirection = ({ source, sourcePosition = Position.Bottom, target, }) => {\n    if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n        return source.x < target.x ? { x: 1, y: 0 } : { x: -1, y: 0 };\n    }\n    return source.y < target.y ? { x: 0, y: 1 } : { x: 0, y: -1 };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n/*\n * With this function we try to mimic an orthogonal edge routing behaviour\n * It's not as good as a real orthogonal edge routing, but it's faster and good enough as a default for step and smooth step edges\n */\nfunction getPoints({ source, sourcePosition = Position.Bottom, target, targetPosition = Position.Top, center, offset, }) {\n    const sourceDir = handleDirections[sourcePosition];\n    const targetDir = handleDirections[targetPosition];\n    const sourceGapped = { x: source.x + sourceDir.x * offset, y: source.y + sourceDir.y * offset };\n    const targetGapped = { x: target.x + targetDir.x * offset, y: target.y + targetDir.y * offset };\n    const dir = getDirection({\n        source: sourceGapped,\n        sourcePosition,\n        target: targetGapped,\n    });\n    const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n    const currDir = dir[dirAccessor];\n    let points = [];\n    let centerX, centerY;\n    const sourceGapOffset = { x: 0, y: 0 };\n    const targetGapOffset = { x: 0, y: 0 };\n    const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n        sourceX: source.x,\n        sourceY: source.y,\n        targetX: target.x,\n        targetY: target.y,\n    });\n    // opposite handle positions, default case\n    if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n        centerX = center.x ?? defaultCenterX;\n        centerY = center.y ?? defaultCenterY;\n        /*\n         *    --->\n         *    |\n         * >---\n         */\n        const verticalSplit = [\n            { x: centerX, y: sourceGapped.y },\n            { x: centerX, y: targetGapped.y },\n        ];\n        /*\n         *    |\n         *  ---\n         *  |\n         */\n        const horizontalSplit = [\n            { x: sourceGapped.x, y: centerY },\n            { x: targetGapped.x, y: centerY },\n        ];\n        if (sourceDir[dirAccessor] === currDir) {\n            points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n        }\n        else {\n            points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n        }\n    }\n    else {\n        // sourceTarget means we take x from source and y from target, targetSource is the opposite\n        const sourceTarget = [{ x: sourceGapped.x, y: targetGapped.y }];\n        const targetSource = [{ x: targetGapped.x, y: sourceGapped.y }];\n        // this handles edges with same handle positions\n        if (dirAccessor === 'x') {\n            points = sourceDir.x === currDir ? targetSource : sourceTarget;\n        }\n        else {\n            points = sourceDir.y === currDir ? sourceTarget : targetSource;\n        }\n        if (sourcePosition === targetPosition) {\n            const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n            // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n            if (diff <= offset) {\n                const gapOffset = Math.min(offset - 1, offset - diff);\n                if (sourceDir[dirAccessor] === currDir) {\n                    sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n                else {\n                    targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n            }\n        }\n        // these are conditions for handling mixed handle positions like Right -> Bottom for example\n        if (sourcePosition !== targetPosition) {\n            const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n            const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n            const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n            const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n            const flipSourceTarget = (sourceDir[dirAccessor] === 1 && ((!isSameDir && sourceGtTargetOppo) || (isSameDir && sourceLtTargetOppo))) ||\n                (sourceDir[dirAccessor] !== 1 && ((!isSameDir && sourceLtTargetOppo) || (isSameDir && sourceGtTargetOppo)));\n            if (flipSourceTarget) {\n                points = dirAccessor === 'x' ? sourceTarget : targetSource;\n            }\n        }\n        const sourceGapPoint = { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y };\n        const targetGapPoint = { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y };\n        const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n        const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n        // we want to place the label on the longest segment of the edge\n        if (maxXDistance >= maxYDistance) {\n            centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n            centerY = points[0].y;\n        }\n        else {\n            centerX = points[0].x;\n            centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n        }\n    }\n    const pathPoints = [\n        source,\n        { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y },\n        ...points,\n        { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y },\n        target,\n    ];\n    return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n    const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n    const { x, y } = b;\n    // no bend\n    if ((a.x === x && x === c.x) || (a.y === y && y === c.y)) {\n        return `L${x} ${y}`;\n    }\n    // first segment is horizontal\n    if (a.y === y) {\n        const xDir = a.x < c.x ? -1 : 1;\n        const yDir = a.y < c.y ? 1 : -1;\n        return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n    }\n    const xDir = a.x < c.x ? 1 : -1;\n    const yDir = a.y < c.y ? -1 : 1;\n    return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\n/**\n * The `getSmoothStepPath` util returns everything you need to render a stepped path\n * between two nodes. The `borderRadius` property can be used to choose how rounded\n * the corners of those steps are.\n * @public\n * @returns A path string you can use in an SVG, the `labelX` and `labelY` position (center of path)\n * and `offsetX`, `offsetY` between source handle and label.\n *\n * - `path`: the path to use in an SVG `<path>` element.\n * - `labelX`: the `x` position you can use to render a label for this edge.\n * - `labelY`: the `y` position you can use to render a label for this edge.\n * - `offsetX`: the absolute difference between the source `x` position and the `x` position of the\n * middle of this path.\n * - `offsetY`: the absolute difference between the source `y` position and the `y` position of the\n * middle of this path.\n * @example\n * ```js\n *  const source = { x: 0, y: 20 };\n *  const target = { x: 150, y: 100 };\n *\n *  const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\n *    sourceX: source.x,\n *    sourceY: source.y,\n *    sourcePosition: Position.Right,\n *    targetX: target.x,\n *    targetY: target.y,\n *    targetPosition: Position.Left,\n *  });\n * ```\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to work with multiple edge paths at once.\n */\nfunction getSmoothStepPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, borderRadius = 5, centerX, centerY, offset = 20, }) {\n    const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n        source: { x: sourceX, y: sourceY },\n        sourcePosition,\n        target: { x: targetX, y: targetY },\n        targetPosition,\n        center: { x: centerX, y: centerY },\n        offset,\n    });\n    const path = points.reduce((res, p, i) => {\n        let segment = '';\n        if (i > 0 && i < points.length - 1) {\n            segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n        }\n        else {\n            segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n        }\n        res += segment;\n        return res;\n    }, '');\n    return [path, labelX, labelY, offsetX, offsetY];\n}\n\nfunction isNodeInitialized(node) {\n    return (node &&\n        !!(node.internals.handleBounds || node.handles?.length) &&\n        !!(node.measured.width || node.width || node.initialWidth));\n}\nfunction getEdgePosition(params) {\n    const { sourceNode, targetNode } = params;\n    if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {\n        return null;\n    }\n    const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);\n    const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);\n    const sourceHandle = getHandle$1(sourceHandleBounds?.source ?? [], params.sourceHandle);\n    const targetHandle = getHandle$1(\n    // when connection type is loose we can define all handles as sources and connect source -> source\n    params.connectionMode === ConnectionMode.Strict\n        ? targetHandleBounds?.target ?? []\n        : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []), params.targetHandle);\n    if (!sourceHandle || !targetHandle) {\n        params.onError?.('008', errorMessages['error008'](!sourceHandle ? 'source' : 'target', {\n            id: params.id,\n            sourceHandle: params.sourceHandle,\n            targetHandle: params.targetHandle,\n        }));\n        return null;\n    }\n    const sourcePosition = sourceHandle?.position || Position.Bottom;\n    const targetPosition = targetHandle?.position || Position.Top;\n    const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);\n    const target = getHandlePosition(targetNode, targetHandle, targetPosition);\n    return {\n        sourceX: source.x,\n        sourceY: source.y,\n        targetX: target.x,\n        targetY: target.y,\n        sourcePosition,\n        targetPosition,\n    };\n}\nfunction toHandleBounds(handles) {\n    if (!handles) {\n        return null;\n    }\n    const source = [];\n    const target = [];\n    for (const handle of handles) {\n        handle.width = handle.width ?? 1;\n        handle.height = handle.height ?? 1;\n        if (handle.type === 'source') {\n            source.push(handle);\n        }\n        else if (handle.type === 'target') {\n            target.push(handle);\n        }\n    }\n    return {\n        source,\n        target,\n    };\n}\nfunction getHandlePosition(node, handle, fallbackPosition = Position.Left, center = false) {\n    const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;\n    const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;\n    const { width, height } = handle ?? getNodeDimensions(node);\n    if (center) {\n        return { x: x + width / 2, y: y + height / 2 };\n    }\n    const position = handle?.position ?? fallbackPosition;\n    switch (position) {\n        case Position.Top:\n            return { x: x + width / 2, y };\n        case Position.Right:\n            return { x: x + width, y: y + height / 2 };\n        case Position.Bottom:\n            return { x: x + width / 2, y: y + height };\n        case Position.Left:\n            return { x, y: y + height / 2 };\n    }\n}\nfunction getHandle$1(bounds, handleId) {\n    if (!bounds) {\n        return null;\n    }\n    // if no handleId is given, we use the first handle, otherwise we check for the id\n    return (!handleId ? bounds[0] : bounds.find((d) => d.id === handleId)) || null;\n}\n\nfunction getMarkerId(marker, id) {\n    if (!marker) {\n        return '';\n    }\n    if (typeof marker === 'string') {\n        return marker;\n    }\n    const idPrefix = id ? `${id}__` : '';\n    return `${idPrefix}${Object.keys(marker)\n        .sort()\n        .map((key) => `${key}=${marker[key]}`)\n        .join('&')}`;\n}\nfunction createMarkerIds(edges, { id, defaultColor, defaultMarkerStart, defaultMarkerEnd, }) {\n    const ids = new Set();\n    return edges\n        .reduce((markers, edge) => {\n        [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach((marker) => {\n            if (marker && typeof marker === 'object') {\n                const markerId = getMarkerId(marker, id);\n                if (!ids.has(markerId)) {\n                    markers.push({ id: markerId, color: marker.color || defaultColor, ...marker });\n                    ids.add(markerId);\n                }\n            }\n        });\n        return markers;\n    }, [])\n        .sort((a, b) => a.id.localeCompare(b.id));\n}\n\nfunction getNodeToolbarTransform(nodeRect, viewport, position, offset, align) {\n    let alignmentOffset = 0.5;\n    if (align === 'start') {\n        alignmentOffset = 0;\n    }\n    else if (align === 'end') {\n        alignmentOffset = 1;\n    }\n    /*\n     * position === Position.Top\n     * we set the x any y position of the toolbar based on the nodes position\n     */\n    let pos = [\n        (nodeRect.x + nodeRect.width * alignmentOffset) * viewport.zoom + viewport.x,\n        nodeRect.y * viewport.zoom + viewport.y - offset,\n    ];\n    // and than shift it based on the alignment. The shift values are in %.\n    let shift = [-100 * alignmentOffset, -100];\n    switch (position) {\n        case Position.Right:\n            pos = [\n                (nodeRect.x + nodeRect.width) * viewport.zoom + viewport.x + offset,\n                (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y,\n            ];\n            shift = [0, -100 * alignmentOffset];\n            break;\n        case Position.Bottom:\n            pos[1] = (nodeRect.y + nodeRect.height) * viewport.zoom + viewport.y + offset;\n            shift[1] = 0;\n            break;\n        case Position.Left:\n            pos = [\n                nodeRect.x * viewport.zoom + viewport.x - offset,\n                (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y,\n            ];\n            shift = [-100, -100 * alignmentOffset];\n            break;\n    }\n    return `translate(${pos[0]}px, ${pos[1]}px) translate(${shift[0]}%, ${shift[1]}%)`;\n}\n\nconst defaultOptions = {\n    nodeOrigin: [0, 0],\n    nodeExtent: infiniteExtent,\n    elevateNodesOnSelect: true,\n    defaults: {},\n};\nconst adoptUserNodesDefaultOptions = {\n    ...defaultOptions,\n    checkEquality: true,\n};\nfunction mergeObjects(base, incoming) {\n    const result = { ...base };\n    for (const key in incoming) {\n        if (incoming[key] !== undefined) {\n            // typecast is safe here, because we check for undefined\n            result[key] = incoming[key];\n        }\n    }\n    return result;\n}\nfunction updateAbsolutePositions(nodeLookup, parentLookup, options) {\n    const _options = mergeObjects(defaultOptions, options);\n    for (const node of nodeLookup.values()) {\n        if (node.parentId) {\n            updateChildNode(node, nodeLookup, parentLookup, _options);\n        }\n        else {\n            const positionWithOrigin = getNodePositionWithOrigin(node, _options.nodeOrigin);\n            const extent = isCoordinateExtent(node.extent) ? node.extent : _options.nodeExtent;\n            const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(node));\n            node.internals.positionAbsolute = clampedPosition;\n        }\n    }\n}\nfunction adoptUserNodes(nodes, nodeLookup, parentLookup, options) {\n    const _options = mergeObjects(adoptUserNodesDefaultOptions, options);\n    let nodesInitialized = nodes.length > 0;\n    const tmpLookup = new Map(nodeLookup);\n    const selectedNodeZ = _options?.elevateNodesOnSelect ? 1000 : 0;\n    nodeLookup.clear();\n    parentLookup.clear();\n    for (const userNode of nodes) {\n        let internalNode = tmpLookup.get(userNode.id);\n        if (_options.checkEquality && userNode === internalNode?.internals.userNode) {\n            nodeLookup.set(userNode.id, internalNode);\n        }\n        else {\n            const positionWithOrigin = getNodePositionWithOrigin(userNode, _options.nodeOrigin);\n            const extent = isCoordinateExtent(userNode.extent) ? userNode.extent : _options.nodeExtent;\n            const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(userNode));\n            internalNode = {\n                ..._options.defaults,\n                ...userNode,\n                measured: {\n                    width: userNode.measured?.width,\n                    height: userNode.measured?.height,\n                },\n                internals: {\n                    positionAbsolute: clampedPosition,\n                    // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured\n                    handleBounds: !userNode.measured ? undefined : internalNode?.internals.handleBounds,\n                    z: calculateZ(userNode, selectedNodeZ),\n                    userNode,\n                },\n            };\n            nodeLookup.set(userNode.id, internalNode);\n        }\n        if ((internalNode.measured === undefined ||\n            internalNode.measured.width === undefined ||\n            internalNode.measured.height === undefined) &&\n            !internalNode.hidden) {\n            nodesInitialized = false;\n        }\n        if (userNode.parentId) {\n            updateChildNode(internalNode, nodeLookup, parentLookup, options);\n        }\n    }\n    return nodesInitialized;\n}\nfunction updateParentLookup(node, parentLookup) {\n    if (!node.parentId) {\n        return;\n    }\n    const childNodes = parentLookup.get(node.parentId);\n    if (childNodes) {\n        childNodes.set(node.id, node);\n    }\n    else {\n        parentLookup.set(node.parentId, new Map([[node.id, node]]));\n    }\n}\n/**\n * Updates positionAbsolute and zIndex of a child node and the parentLookup.\n */\nfunction updateChildNode(node, nodeLookup, parentLookup, options) {\n    const { elevateNodesOnSelect, nodeOrigin, nodeExtent } = mergeObjects(defaultOptions, options);\n    const parentId = node.parentId;\n    const parentNode = nodeLookup.get(parentId);\n    if (!parentNode) {\n        console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);\n        return;\n    }\n    updateParentLookup(node, parentLookup);\n    const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\n    const { x, y, z } = calculateChildXYZ(node, parentNode, nodeOrigin, nodeExtent, selectedNodeZ);\n    const { positionAbsolute } = node.internals;\n    const positionChanged = x !== positionAbsolute.x || y !== positionAbsolute.y;\n    if (positionChanged || z !== node.internals.z) {\n        // we create a new object to mark the node as updated\n        nodeLookup.set(node.id, {\n            ...node,\n            internals: {\n                ...node.internals,\n                positionAbsolute: positionChanged ? { x, y } : positionAbsolute,\n                z,\n            },\n        });\n    }\n}\nfunction calculateZ(node, selectedNodeZ) {\n    return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n}\nfunction calculateChildXYZ(childNode, parentNode, nodeOrigin, nodeExtent, selectedNodeZ) {\n    const { x: parentX, y: parentY } = parentNode.internals.positionAbsolute;\n    const childDimensions = getNodeDimensions(childNode);\n    const positionWithOrigin = getNodePositionWithOrigin(childNode, nodeOrigin);\n    const clampedPosition = isCoordinateExtent(childNode.extent)\n        ? clampPosition(positionWithOrigin, childNode.extent, childDimensions)\n        : positionWithOrigin;\n    let absolutePosition = clampPosition({ x: parentX + clampedPosition.x, y: parentY + clampedPosition.y }, nodeExtent, childDimensions);\n    if (childNode.extent === 'parent') {\n        absolutePosition = clampPositionToParent(absolutePosition, childDimensions, parentNode);\n    }\n    const childZ = calculateZ(childNode, selectedNodeZ);\n    const parentZ = parentNode.internals.z ?? 0;\n    return {\n        x: absolutePosition.x,\n        y: absolutePosition.y,\n        z: parentZ > childZ ? parentZ : childZ,\n    };\n}\nfunction handleExpandParent(children, nodeLookup, parentLookup, nodeOrigin = [0, 0]) {\n    const changes = [];\n    const parentExpansions = new Map();\n    // determine the expanded rectangle the child nodes would take for each parent\n    for (const child of children) {\n        const parent = nodeLookup.get(child.parentId);\n        if (!parent) {\n            continue;\n        }\n        const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);\n        const expandedRect = getBoundsOfRects(parentRect, child.rect);\n        parentExpansions.set(child.parentId, { expandedRect, parent });\n    }\n    if (parentExpansions.size > 0) {\n        parentExpansions.forEach(({ expandedRect, parent }, parentId) => {\n            // determine the position & dimensions of the parent\n            const positionAbsolute = parent.internals.positionAbsolute;\n            const dimensions = getNodeDimensions(parent);\n            const origin = parent.origin ?? nodeOrigin;\n            // determine how much the parent expands in width and position\n            const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;\n            const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;\n            const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));\n            const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));\n            const widthChange = (newWidth - dimensions.width) * origin[0];\n            const heightChange = (newHeight - dimensions.height) * origin[1];\n            // We need to correct the position of the parent node if the origin is not [0,0]\n            if (xChange > 0 || yChange > 0 || widthChange || heightChange) {\n                changes.push({\n                    id: parentId,\n                    type: 'position',\n                    position: {\n                        x: parent.position.x - xChange + widthChange,\n                        y: parent.position.y - yChange + heightChange,\n                    },\n                });\n                /*\n                 * We move all child nodes in the oppsite direction\n                 * so the x,y changes of the parent do not move the children\n                 */\n                parentLookup.get(parentId)?.forEach((childNode) => {\n                    if (!children.some((child) => child.id === childNode.id)) {\n                        changes.push({\n                            id: childNode.id,\n                            type: 'position',\n                            position: {\n                                x: childNode.position.x + xChange,\n                                y: childNode.position.y + yChange,\n                            },\n                        });\n                    }\n                });\n            }\n            // We need to correct the dimensions of the parent node if the origin is not [0,0]\n            if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {\n                changes.push({\n                    id: parentId,\n                    type: 'dimensions',\n                    setAttributes: true,\n                    dimensions: {\n                        width: newWidth + (xChange ? origin[0] * xChange - widthChange : 0),\n                        height: newHeight + (yChange ? origin[1] * yChange - heightChange : 0),\n                    },\n                });\n            }\n        });\n    }\n    return changes;\n}\nfunction updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin, nodeExtent) {\n    const viewportNode = domNode?.querySelector('.xyflow__viewport');\n    let updatedInternals = false;\n    if (!viewportNode) {\n        return { changes: [], updatedInternals };\n    }\n    const changes = [];\n    const style = window.getComputedStyle(viewportNode);\n    const { m22: zoom } = new window.DOMMatrixReadOnly(style.transform);\n    // in this array we collect nodes, that might trigger changes (like expanding parent)\n    const parentExpandChildren = [];\n    for (const update of updates.values()) {\n        const node = nodeLookup.get(update.id);\n        if (!node) {\n            continue;\n        }\n        if (node.hidden) {\n            nodeLookup.set(node.id, {\n                ...node,\n                internals: {\n                    ...node.internals,\n                    handleBounds: undefined,\n                },\n            });\n            updatedInternals = true;\n            continue;\n        }\n        const dimensions = getDimensions(update.nodeElement);\n        const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;\n        const doUpdate = !!(dimensions.width &&\n            dimensions.height &&\n            (dimensionChanged || !node.internals.handleBounds || update.force));\n        if (doUpdate) {\n            const nodeBounds = update.nodeElement.getBoundingClientRect();\n            const extent = isCoordinateExtent(node.extent) ? node.extent : nodeExtent;\n            let { positionAbsolute } = node.internals;\n            if (node.parentId && node.extent === 'parent') {\n                positionAbsolute = clampPositionToParent(positionAbsolute, dimensions, nodeLookup.get(node.parentId));\n            }\n            else if (extent) {\n                positionAbsolute = clampPosition(positionAbsolute, extent, dimensions);\n            }\n            const newNode = {\n                ...node,\n                measured: dimensions,\n                internals: {\n                    ...node.internals,\n                    positionAbsolute,\n                    handleBounds: {\n                        source: getHandleBounds('source', update.nodeElement, nodeBounds, zoom, node.id),\n                        target: getHandleBounds('target', update.nodeElement, nodeBounds, zoom, node.id),\n                    },\n                },\n            };\n            nodeLookup.set(node.id, newNode);\n            if (node.parentId) {\n                updateChildNode(newNode, nodeLookup, parentLookup, { nodeOrigin });\n            }\n            updatedInternals = true;\n            if (dimensionChanged) {\n                changes.push({\n                    id: node.id,\n                    type: 'dimensions',\n                    dimensions,\n                });\n                if (node.expandParent && node.parentId) {\n                    parentExpandChildren.push({\n                        id: node.id,\n                        parentId: node.parentId,\n                        rect: nodeToRect(newNode, nodeOrigin),\n                    });\n                }\n            }\n        }\n    }\n    if (parentExpandChildren.length > 0) {\n        const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);\n        changes.push(...parentExpandChanges);\n    }\n    return { changes, updatedInternals };\n}\nasync function panBy({ delta, panZoom, transform, translateExtent, width, height, }) {\n    if (!panZoom || (!delta.x && !delta.y)) {\n        return Promise.resolve(false);\n    }\n    const nextViewport = await panZoom.setViewportConstrained({\n        x: transform[0] + delta.x,\n        y: transform[1] + delta.y,\n        zoom: transform[2],\n    }, [\n        [0, 0],\n        [width, height],\n    ], translateExtent);\n    const transformChanged = !!nextViewport &&\n        (nextViewport.x !== transform[0] || nextViewport.y !== transform[1] || nextViewport.k !== transform[2]);\n    return Promise.resolve(transformChanged);\n}\n/**\n * this function adds the connection to the connectionLookup\n * at the following keys: nodeId-type-handleId, nodeId-type and nodeId\n * @param type type of the connection\n * @param connection connection that should be added to the lookup\n * @param connectionKey at which key the connection should be added\n * @param connectionLookup reference to the connection lookup\n * @param nodeId nodeId of the connection\n * @param handleId handleId of the conneciton\n */\nfunction addConnectionToLookup(type, connection, connectionKey, connectionLookup, nodeId, handleId) {\n    /*\n     * We add the connection to the connectionLookup at the following keys\n     * 1. nodeId, 2. nodeId-type, 3. nodeId-type-handleId\n     * If the key already exists, we add the connection to the existing map\n     */\n    let key = nodeId;\n    const nodeMap = connectionLookup.get(key) || new Map();\n    connectionLookup.set(key, nodeMap.set(connectionKey, connection));\n    key = `${nodeId}-${type}`;\n    const typeMap = connectionLookup.get(key) || new Map();\n    connectionLookup.set(key, typeMap.set(connectionKey, connection));\n    if (handleId) {\n        key = `${nodeId}-${type}-${handleId}`;\n        const handleMap = connectionLookup.get(key) || new Map();\n        connectionLookup.set(key, handleMap.set(connectionKey, connection));\n    }\n}\nfunction updateConnectionLookup(connectionLookup, edgeLookup, edges) {\n    connectionLookup.clear();\n    edgeLookup.clear();\n    for (const edge of edges) {\n        const { source: sourceNode, target: targetNode, sourceHandle = null, targetHandle = null } = edge;\n        const connection = { edgeId: edge.id, source: sourceNode, target: targetNode, sourceHandle, targetHandle };\n        const sourceKey = `${sourceNode}-${sourceHandle}--${targetNode}-${targetHandle}`;\n        const targetKey = `${targetNode}-${targetHandle}--${sourceNode}-${sourceHandle}`;\n        addConnectionToLookup('source', connection, targetKey, connectionLookup, sourceNode, sourceHandle);\n        addConnectionToLookup('target', connection, sourceKey, connectionLookup, targetNode, targetHandle);\n        edgeLookup.set(edge.id, edge);\n    }\n}\n\nfunction shallowNodeData(a, b) {\n    if (a === null || b === null) {\n        return false;\n    }\n    const _a = Array.isArray(a) ? a : [a];\n    const _b = Array.isArray(b) ? b : [b];\n    if (_a.length !== _b.length) {\n        return false;\n    }\n    for (let i = 0; i < _a.length; i++) {\n        if (_a[i].id !== _b[i].id || _a[i].type !== _b[i].type || !Object.is(_a[i].data, _b[i].data)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction isParentSelected(node, nodeLookup) {\n    if (!node.parentId) {\n        return false;\n    }\n    const parentNode = nodeLookup.get(node.parentId);\n    if (!parentNode) {\n        return false;\n    }\n    if (parentNode.selected) {\n        return true;\n    }\n    return isParentSelected(parentNode, nodeLookup);\n}\nfunction hasSelector(target, selector, domNode) {\n    let current = target;\n    do {\n        if (current?.matches?.(selector))\n            return true;\n        if (current === domNode)\n            return false;\n        current = current?.parentElement;\n    } while (current);\n    return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {\n    const dragItems = new Map();\n    for (const [id, node] of nodeLookup) {\n        if ((node.selected || node.id === nodeId) &&\n            (!node.parentId || !isParentSelected(node, nodeLookup)) &&\n            (node.draggable || (nodesDraggable && typeof node.draggable === 'undefined'))) {\n            const internalNode = nodeLookup.get(id);\n            if (internalNode) {\n                dragItems.set(id, {\n                    id,\n                    position: internalNode.position || { x: 0, y: 0 },\n                    distance: {\n                        x: mousePos.x - internalNode.internals.positionAbsolute.x,\n                        y: mousePos.y - internalNode.internals.positionAbsolute.y,\n                    },\n                    extent: internalNode.extent,\n                    parentId: internalNode.parentId,\n                    origin: internalNode.origin,\n                    expandParent: internalNode.expandParent,\n                    internals: {\n                        positionAbsolute: internalNode.internals.positionAbsolute || { x: 0, y: 0 },\n                    },\n                    measured: {\n                        width: internalNode.measured.width ?? 0,\n                        height: internalNode.measured.height ?? 0,\n                    },\n                });\n            }\n        }\n    }\n    return dragItems;\n}\n/*\n * returns two params:\n * 1. the dragged node (or the first of the list, if we are dragging a node selection)\n * 2. array of selected nodes (for multi selections)\n */\nfunction getEventHandlerParams({ nodeId, dragItems, nodeLookup, dragging = true, }) {\n    const nodesFromDragItems = [];\n    for (const [id, dragItem] of dragItems) {\n        const node = nodeLookup.get(id)?.internals.userNode;\n        if (node) {\n            nodesFromDragItems.push({\n                ...node,\n                position: dragItem.position,\n                dragging,\n            });\n        }\n    }\n    if (!nodeId) {\n        return [nodesFromDragItems[0], nodesFromDragItems];\n    }\n    const node = nodeLookup.get(nodeId)?.internals.userNode;\n    return [\n        !node\n            ? nodesFromDragItems[0]\n            : {\n                ...node,\n                position: dragItems.get(nodeId)?.position || node.position,\n                dragging,\n            },\n        nodesFromDragItems,\n    ];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction XYDrag({ onNodeMouseDown, getStoreItems, onDragStart, onDrag, onDragStop, }) {\n    let lastPos = { x: null, y: null };\n    let autoPanId = 0;\n    let dragItems = new Map();\n    let autoPanStarted = false;\n    let mousePosition = { x: 0, y: 0 };\n    let containerBounds = null;\n    let dragStarted = false;\n    let d3Selection = null;\n    let abortDrag = false; // prevents unintentional dragging on multitouch\n    // public functions\n    function update({ noDragClassName, handleSelector, domNode, isSelectable, nodeId, nodeClickDistance = 0, }) {\n        d3Selection = select(domNode);\n        function updateNodes({ x, y }, dragEvent) {\n            const { nodeLookup, nodeExtent, snapGrid, snapToGrid, nodeOrigin, onNodeDrag, onSelectionDrag, onError, updateNodePositions, } = getStoreItems();\n            lastPos = { x, y };\n            let hasChange = false;\n            let nodesBox = { x: 0, y: 0, x2: 0, y2: 0 };\n            if (dragItems.size > 1 && nodeExtent) {\n                const rect = getInternalNodesBounds(dragItems);\n                nodesBox = rectToBox(rect);\n            }\n            for (const [id, dragItem] of dragItems) {\n                if (!nodeLookup.has(id)) {\n                    /*\n                     * if the node is not in the nodeLookup anymore, it was probably deleted while dragging\n                     * and we don't need to update it anymore\n                     */\n                    continue;\n                }\n                let nextPosition = { x: x - dragItem.distance.x, y: y - dragItem.distance.y };\n                if (snapToGrid) {\n                    nextPosition = snapPosition(nextPosition, snapGrid);\n                }\n                /*\n                 * if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n                 * based on its position so that the node stays at it's position relative to the selection.\n                 */\n                let adjustedNodeExtent = [\n                    [nodeExtent[0][0], nodeExtent[0][1]],\n                    [nodeExtent[1][0], nodeExtent[1][1]],\n                ];\n                if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {\n                    const { positionAbsolute } = dragItem.internals;\n                    const x1 = positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n                    const x2 = positionAbsolute.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];\n                    const y1 = positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n                    const y2 = positionAbsolute.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];\n                    adjustedNodeExtent = [\n                        [x1, y1],\n                        [x2, y2],\n                    ];\n                }\n                const { position, positionAbsolute } = calculateNodePosition({\n                    nodeId: id,\n                    nextPosition,\n                    nodeLookup,\n                    nodeExtent: adjustedNodeExtent,\n                    nodeOrigin,\n                    onError,\n                });\n                // we want to make sure that we only fire a change event when there is a change\n                hasChange = hasChange || dragItem.position.x !== position.x || dragItem.position.y !== position.y;\n                dragItem.position = position;\n                dragItem.internals.positionAbsolute = positionAbsolute;\n            }\n            if (!hasChange) {\n                return;\n            }\n            updateNodePositions(dragItems, true);\n            if (dragEvent && (onDrag || onNodeDrag || (!nodeId && onSelectionDrag))) {\n                const [currentNode, currentNodes] = getEventHandlerParams({\n                    nodeId,\n                    dragItems,\n                    nodeLookup,\n                });\n                onDrag?.(dragEvent, dragItems, currentNode, currentNodes);\n                onNodeDrag?.(dragEvent, currentNode, currentNodes);\n                if (!nodeId) {\n                    onSelectionDrag?.(dragEvent, currentNodes);\n                }\n            }\n        }\n        async function autoPan() {\n            if (!containerBounds) {\n                return;\n            }\n            const { transform, panBy, autoPanSpeed, autoPanOnNodeDrag } = getStoreItems();\n            if (!autoPanOnNodeDrag) {\n                autoPanStarted = false;\n                cancelAnimationFrame(autoPanId);\n                return;\n            }\n            const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);\n            if (xMovement !== 0 || yMovement !== 0) {\n                lastPos.x = (lastPos.x ?? 0) - xMovement / transform[2];\n                lastPos.y = (lastPos.y ?? 0) - yMovement / transform[2];\n                if (await panBy({ x: xMovement, y: yMovement })) {\n                    updateNodes(lastPos, null);\n                }\n            }\n            autoPanId = requestAnimationFrame(autoPan);\n        }\n        function startDrag(event) {\n            const { nodeLookup, multiSelectionActive, nodesDraggable, transform, snapGrid, snapToGrid, selectNodesOnDrag, onNodeDragStart, onSelectionDragStart, unselectNodesAndEdges, } = getStoreItems();\n            dragStarted = true;\n            if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n                if (!nodeLookup.get(nodeId)?.selected) {\n                    // we need to reset selected nodes when selectNodesOnDrag=false\n                    unselectNodesAndEdges();\n                }\n            }\n            if (isSelectable && selectNodesOnDrag && nodeId) {\n                onNodeMouseDown?.(nodeId);\n            }\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid, containerBounds });\n            lastPos = pointerPos;\n            dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);\n            if (dragItems.size > 0 && (onDragStart || onNodeDragStart || (!nodeId && onSelectionDragStart))) {\n                const [currentNode, currentNodes] = getEventHandlerParams({\n                    nodeId,\n                    dragItems,\n                    nodeLookup,\n                });\n                onDragStart?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n                onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);\n                if (!nodeId) {\n                    onSelectionDragStart?.(event.sourceEvent, currentNodes);\n                }\n            }\n        }\n        const d3DragInstance = drag()\n            .clickDistance(nodeClickDistance)\n            .on('start', (event) => {\n            const { domNode, nodeDragThreshold, transform, snapGrid, snapToGrid } = getStoreItems();\n            containerBounds = domNode?.getBoundingClientRect() || null;\n            abortDrag = false;\n            if (nodeDragThreshold === 0) {\n                startDrag(event);\n            }\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid, containerBounds });\n            lastPos = pointerPos;\n            mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n        })\n            .on('drag', (event) => {\n            const { autoPanOnNodeDrag, transform, snapGrid, snapToGrid, nodeDragThreshold, nodeLookup } = getStoreItems();\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid, containerBounds });\n            if ((event.sourceEvent.type === 'touchmove' && event.sourceEvent.touches.length > 1) ||\n                // if user deletes a node while dragging, we need to abort the drag to prevent errors\n                (nodeId && !nodeLookup.has(nodeId))) {\n                abortDrag = true;\n            }\n            if (abortDrag) {\n                return;\n            }\n            if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {\n                autoPanStarted = true;\n                autoPan();\n            }\n            if (!dragStarted) {\n                const x = pointerPos.xSnapped - (lastPos.x ?? 0);\n                const y = pointerPos.ySnapped - (lastPos.y ?? 0);\n                const distance = Math.sqrt(x * x + y * y);\n                if (distance > nodeDragThreshold) {\n                    startDrag(event);\n                }\n            }\n            // skip events without movement\n            if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {\n                // dragEvent = event.sourceEvent as MouseEvent;\n                mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n                updateNodes(pointerPos, event.sourceEvent);\n            }\n        })\n            .on('end', (event) => {\n            if (!dragStarted || abortDrag) {\n                return;\n            }\n            autoPanStarted = false;\n            dragStarted = false;\n            cancelAnimationFrame(autoPanId);\n            if (dragItems.size > 0) {\n                const { nodeLookup, updateNodePositions, onNodeDragStop, onSelectionDragStop } = getStoreItems();\n                updateNodePositions(dragItems, false);\n                if (onDragStop || onNodeDragStop || (!nodeId && onSelectionDragStop)) {\n                    const [currentNode, currentNodes] = getEventHandlerParams({\n                        nodeId,\n                        dragItems,\n                        nodeLookup,\n                        dragging: false,\n                    });\n                    onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n                    onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);\n                    if (!nodeId) {\n                        onSelectionDragStop?.(event.sourceEvent, currentNodes);\n                    }\n                }\n            }\n        })\n            .filter((event) => {\n            const target = event.target;\n            const isDraggable = !event.button &&\n                (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) &&\n                (!handleSelector || hasSelector(target, handleSelector, domNode));\n            return isDraggable;\n        });\n        d3Selection.call(d3DragInstance);\n    }\n    function destroy() {\n        d3Selection?.on('.drag', null);\n    }\n    return {\n        update,\n        destroy,\n    };\n}\n\nfunction getNodesWithinDistance(position, nodeLookup, distance) {\n    const nodes = [];\n    const rect = {\n        x: position.x - distance,\n        y: position.y - distance,\n        width: distance * 2,\n        height: distance * 2,\n    };\n    for (const node of nodeLookup.values()) {\n        if (getOverlappingArea(rect, nodeToRect(node)) > 0) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n/*\n * this distance is used for the area around the user pointer\n * while doing a connection for finding the closest nodes\n */\nconst ADDITIONAL_DISTANCE = 250;\nfunction getClosestHandle(position, connectionRadius, nodeLookup, fromHandle) {\n    let closestHandles = [];\n    let minDistance = Infinity;\n    const closeNodes = getNodesWithinDistance(position, nodeLookup, connectionRadius + ADDITIONAL_DISTANCE);\n    for (const node of closeNodes) {\n        const allHandles = [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n        for (const handle of allHandles) {\n            // if the handle is the same as the fromHandle we skip it\n            if (fromHandle.nodeId === handle.nodeId && fromHandle.type === handle.type && fromHandle.id === handle.id) {\n                continue;\n            }\n            // determine absolute position of the handle\n            const { x, y } = getHandlePosition(node, handle, handle.position, true);\n            const distance = Math.sqrt(Math.pow(x - position.x, 2) + Math.pow(y - position.y, 2));\n            if (distance > connectionRadius) {\n                continue;\n            }\n            if (distance < minDistance) {\n                closestHandles = [{ ...handle, x, y }];\n                minDistance = distance;\n            }\n            else if (distance === minDistance) {\n                // when multiple handles are on the same distance we collect all of them\n                closestHandles.push({ ...handle, x, y });\n            }\n        }\n    }\n    if (!closestHandles.length) {\n        return null;\n    }\n    // when multiple handles overlay each other we prefer the opposite handle\n    if (closestHandles.length > 1) {\n        const oppositeHandleType = fromHandle.type === 'source' ? 'target' : 'source';\n        return closestHandles.find((handle) => handle.type === oppositeHandleType) ?? closestHandles[0];\n    }\n    return closestHandles[0];\n}\nfunction getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode, withAbsolutePosition = false) {\n    const node = nodeLookup.get(nodeId);\n    if (!node) {\n        return null;\n    }\n    const handles = connectionMode === 'strict'\n        ? node.internals.handleBounds?.[handleType]\n        : [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n    const handle = (handleId ? handles?.find((h) => h.id === handleId) : handles?.[0]) ?? null;\n    return handle && withAbsolutePosition\n        ? { ...handle, ...getHandlePosition(node, handle, handle.position, true) }\n        : handle;\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n    if (edgeUpdaterType) {\n        return edgeUpdaterType;\n    }\n    else if (handleDomNode?.classList.contains('target')) {\n        return 'target';\n    }\n    else if (handleDomNode?.classList.contains('source')) {\n        return 'source';\n    }\n    return null;\n}\nfunction isConnectionValid(isInsideConnectionRadius, isHandleValid) {\n    let isValid = null;\n    if (isHandleValid) {\n        isValid = true;\n    }\n    else if (isInsideConnectionRadius && !isHandleValid) {\n        isValid = false;\n    }\n    return isValid;\n}\n\nconst alwaysValid = () => true;\nfunction onPointerDown(event, { connectionMode, connectionRadius, handleId, nodeId, edgeUpdaterType, isTarget, domNode, nodeLookup, lib, autoPanOnConnect, flowId, panBy, cancelConnection, onConnectStart, onConnect, onConnectEnd, isValidConnection = alwaysValid, onReconnectEnd, updateConnection, getTransform, getFromHandle, autoPanSpeed, }) {\n    // when xyflow is used inside a shadow root we can't use document\n    const doc = getHostForElement(event.target);\n    let autoPanId = 0;\n    let closestHandle;\n    const { x, y } = getEventPosition(event);\n    const clickedHandle = doc?.elementFromPoint(x, y);\n    const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n    const containerBounds = domNode?.getBoundingClientRect();\n    if (!containerBounds || !handleType) {\n        return;\n    }\n    const fromHandleInternal = getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode);\n    if (!fromHandleInternal) {\n        return;\n    }\n    let position = getEventPosition(event, containerBounds);\n    let autoPanStarted = false;\n    let connection = null;\n    let isValid = false;\n    let handleDomNode = null;\n    // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n    function autoPan() {\n        if (!autoPanOnConnect || !containerBounds) {\n            return;\n        }\n        const [x, y] = calcAutoPan(position, containerBounds, autoPanSpeed);\n        panBy({ x, y });\n        autoPanId = requestAnimationFrame(autoPan);\n    }\n    // Stays the same for all consecutive pointermove events\n    const fromHandle = {\n        ...fromHandleInternal,\n        nodeId,\n        type: handleType,\n        position: fromHandleInternal.position,\n    };\n    const fromNodeInternal = nodeLookup.get(nodeId);\n    const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);\n    const newConnection = {\n        inProgress: true,\n        isValid: null,\n        from,\n        fromHandle,\n        fromPosition: fromHandle.position,\n        fromNode: fromNodeInternal,\n        to: position,\n        toHandle: null,\n        toPosition: oppositePosition[fromHandle.position],\n        toNode: null,\n    };\n    updateConnection(newConnection);\n    let previousConnection = newConnection;\n    onConnectStart?.(event, { nodeId, handleId, handleType });\n    function onPointerMove(event) {\n        if (!getFromHandle() || !fromHandle) {\n            onPointerUp(event);\n            return;\n        }\n        const transform = getTransform();\n        position = getEventPosition(event, containerBounds);\n        closestHandle = getClosestHandle(pointToRendererPoint(position, transform, false, [1, 1]), connectionRadius, nodeLookup, fromHandle);\n        if (!autoPanStarted) {\n            autoPan();\n            autoPanStarted = true;\n        }\n        const result = isValidHandle(event, {\n            handle: closestHandle,\n            connectionMode,\n            fromNodeId: nodeId,\n            fromHandleId: handleId,\n            fromType: isTarget ? 'target' : 'source',\n            isValidConnection,\n            doc,\n            lib,\n            flowId,\n            nodeLookup,\n        });\n        handleDomNode = result.handleDomNode;\n        connection = result.connection;\n        isValid = isConnectionValid(!!closestHandle, result.isValid);\n        const newConnection = {\n            // from stays the same\n            ...previousConnection,\n            isValid,\n            to: closestHandle && isValid\n                ? rendererPointToPoint({ x: closestHandle.x, y: closestHandle.y }, transform)\n                : position,\n            toHandle: result.toHandle,\n            toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],\n            toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null,\n        };\n        /*\n         * we don't want to trigger an update when the connection\n         * is snapped to the same handle as before\n         */\n        if (isValid &&\n            closestHandle &&\n            previousConnection.toHandle &&\n            newConnection.toHandle &&\n            previousConnection.toHandle.type === newConnection.toHandle.type &&\n            previousConnection.toHandle.nodeId === newConnection.toHandle.nodeId &&\n            previousConnection.toHandle.id === newConnection.toHandle.id &&\n            previousConnection.to.x === newConnection.to.x &&\n            previousConnection.to.y === newConnection.to.y) {\n            return;\n        }\n        updateConnection(newConnection);\n        previousConnection = newConnection;\n    }\n    function onPointerUp(event) {\n        if ((closestHandle || handleDomNode) && connection && isValid) {\n            onConnect?.(connection);\n        }\n        /*\n         * it's important to get a fresh reference from the store here\n         * in order to get the latest state of onConnectEnd\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { inProgress, ...connectionState } = previousConnection;\n        const finalConnectionState = {\n            ...connectionState,\n            toPosition: previousConnection.toHandle ? previousConnection.toPosition : null,\n        };\n        onConnectEnd?.(event, finalConnectionState);\n        if (edgeUpdaterType) {\n            onReconnectEnd?.(event, finalConnectionState);\n        }\n        cancelConnection();\n        cancelAnimationFrame(autoPanId);\n        autoPanStarted = false;\n        isValid = false;\n        connection = null;\n        handleDomNode = null;\n        doc.removeEventListener('mousemove', onPointerMove);\n        doc.removeEventListener('mouseup', onPointerUp);\n        doc.removeEventListener('touchmove', onPointerMove);\n        doc.removeEventListener('touchend', onPointerUp);\n    }\n    doc.addEventListener('mousemove', onPointerMove);\n    doc.addEventListener('mouseup', onPointerUp);\n    doc.addEventListener('touchmove', onPointerMove);\n    doc.addEventListener('touchend', onPointerUp);\n}\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(event, { handle, connectionMode, fromNodeId, fromHandleId, fromType, doc, lib, flowId, isValidConnection = alwaysValid, nodeLookup, }) {\n    const isTarget = fromType === 'target';\n    const handleDomNode = handle\n        ? doc.querySelector(`.${lib}-flow__handle[data-id=\"${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`)\n        : null;\n    const { x, y } = getEventPosition(event);\n    const handleBelow = doc.elementFromPoint(x, y);\n    /*\n     * we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n     * because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n     */\n    const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;\n    const result = {\n        handleDomNode: handleToCheck,\n        isValid: false,\n        connection: null,\n        toHandle: null,\n    };\n    if (handleToCheck) {\n        const handleType = getHandleType(undefined, handleToCheck);\n        const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n        const handleId = handleToCheck.getAttribute('data-handleid');\n        const connectable = handleToCheck.classList.contains('connectable');\n        const connectableEnd = handleToCheck.classList.contains('connectableend');\n        if (!handleNodeId || !handleType) {\n            return result;\n        }\n        const connection = {\n            source: isTarget ? handleNodeId : fromNodeId,\n            sourceHandle: isTarget ? handleId : fromHandleId,\n            target: isTarget ? fromNodeId : handleNodeId,\n            targetHandle: isTarget ? fromHandleId : handleId,\n        };\n        result.connection = connection;\n        const isConnectable = connectable && connectableEnd;\n        // in strict mode we don't allow target to target or source to source connections\n        const isValid = isConnectable &&\n            (connectionMode === ConnectionMode.Strict\n                ? (isTarget && handleType === 'source') || (!isTarget && handleType === 'target')\n                : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n        result.isValid = isValid && isValidConnection(connection);\n        result.toHandle = getHandle(handleNodeId, handleType, handleId, nodeLookup, connectionMode, false);\n    }\n    return result;\n}\nconst XYHandle = {\n    onPointerDown,\n    isValid: isValidHandle,\n};\n\nfunction XYMinimap({ domNode, panZoom, getTransform, getViewScale }) {\n    const selection = select(domNode);\n    function update({ translateExtent, width, height, zoomStep = 10, pannable = true, zoomable = true, inversePan = false, }) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const zoomHandler = (event) => {\n            const transform = getTransform();\n            if (event.sourceEvent.type !== 'wheel' || !panZoom) {\n                return;\n            }\n            const pinchDelta = -event.sourceEvent.deltaY *\n                (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 0.002) *\n                zoomStep;\n            const nextZoom = transform[2] * Math.pow(2, pinchDelta);\n            panZoom.scaleTo(nextZoom);\n        };\n        let panStart = [0, 0];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const panStartHandler = (event) => {\n            if (event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart') {\n                panStart = [\n                    event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,\n                    event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY,\n                ];\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const panHandler = (event) => {\n            const transform = getTransform();\n            if ((event.sourceEvent.type !== 'mousemove' && event.sourceEvent.type !== 'touchmove') || !panZoom) {\n                return;\n            }\n            const panCurrent = [\n                event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,\n                event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY,\n            ];\n            const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];\n            panStart = panCurrent;\n            const moveScale = getViewScale() * Math.max(transform[2], Math.log(transform[2])) * (inversePan ? -1 : 1);\n            const position = {\n                x: transform[0] - panDelta[0] * moveScale,\n                y: transform[1] - panDelta[1] * moveScale,\n            };\n            const extent = [\n                [0, 0],\n                [width, height],\n            ];\n            panZoom.setViewportConstrained({\n                x: position.x,\n                y: position.y,\n                zoom: transform[2],\n            }, extent, translateExtent);\n        };\n        const zoomAndPanHandler = zoom()\n            .on('start', panStartHandler)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            .on('zoom', pannable ? panHandler : null)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            .on('zoom.wheel', zoomable ? zoomHandler : null);\n        selection.call(zoomAndPanHandler, {});\n    }\n    function destroy() {\n        selection.on('zoom', null);\n    }\n    return {\n        update,\n        destroy,\n        pointer,\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\nconst transformToViewport = (transform) => ({\n    x: transform.x,\n    y: transform.y,\n    zoom: transform.k,\n});\nconst viewportToTransform = ({ x, y, zoom }) => zoomIdentity.translate(x, y).scale(zoom);\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst getD3Transition = (selection, duration = 0, onEnd = () => { }) => {\n    const hasDuration = typeof duration === 'number' && duration > 0;\n    if (!hasDuration) {\n        onEnd();\n    }\n    return hasDuration ? selection.transition().duration(duration).on('end', onEnd) : selection;\n};\nconst wheelDelta = (event) => {\n    const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\n\nfunction createPanOnScrollHandler({ zoomPanValues, noWheelClassName, d3Selection, d3Zoom, panOnScrollMode, panOnScrollSpeed, zoomOnPinch, onPanZoomStart, onPanZoom, onPanZoomEnd, }) {\n    return (event) => {\n        if (isWrappedWithClass(event, noWheelClassName)) {\n            return false;\n        }\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        const currentZoom = d3Selection.property('__zoom').k || 1;\n        // macos sets ctrlKey=true for pinch gesture on a trackpad\n        if (event.ctrlKey && zoomOnPinch) {\n            const point = pointer(event);\n            const pinchDelta = wheelDelta(event);\n            const zoom = currentZoom * Math.pow(2, pinchDelta);\n            // @ts-ignore\n            d3Zoom.scaleTo(d3Selection, zoom, point, event);\n            return;\n        }\n        /*\n         * increase scroll speed in firefox\n         * firefox: deltaMode === 1; chrome: deltaMode === 0\n         */\n        const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n        let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n        let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n        // this enables vertical scrolling with shift + scroll on windows\n        if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n            deltaX = event.deltaY * deltaNormalize;\n            deltaY = 0;\n        }\n        d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed, \n        // @ts-ignore\n        { internal: true });\n        const nextViewport = transformToViewport(d3Selection.property('__zoom'));\n        clearTimeout(zoomPanValues.panScrollTimeout);\n        /*\n         * for pan on scroll we need to handle the event calls on our own\n         * we can't use the start, zoom and end events from d3-zoom\n         * because start and move gets called on every scroll event and not once at the beginning\n         */\n        if (!zoomPanValues.isPanScrolling) {\n            zoomPanValues.isPanScrolling = true;\n            onPanZoomStart?.(event, nextViewport);\n        }\n        if (zoomPanValues.isPanScrolling) {\n            onPanZoom?.(event, nextViewport);\n            zoomPanValues.panScrollTimeout = setTimeout(() => {\n                onPanZoomEnd?.(event, nextViewport);\n                zoomPanValues.isPanScrolling = false;\n            }, 150);\n        }\n    };\n}\nfunction createZoomOnScrollHandler({ noWheelClassName, preventScrolling, d3ZoomHandler }) {\n    return function (event, d) {\n        const isWheel = event.type === 'wheel';\n        // we still want to enable pinch zooming even if preventScrolling is set to false\n        const preventZoom = !preventScrolling && isWheel && !event.ctrlKey;\n        const hasNoWheelClass = isWrappedWithClass(event, noWheelClassName);\n        // if user is pinch zooming above a nowheel element, we don't want the browser to zoom\n        if (event.ctrlKey && isWheel && hasNoWheelClass) {\n            event.preventDefault();\n        }\n        if (preventZoom || hasNoWheelClass) {\n            return null;\n        }\n        event.preventDefault();\n        d3ZoomHandler.call(this, event, d);\n    };\n}\nfunction createPanZoomStartHandler({ zoomPanValues, onDraggingChange, onPanZoomStart }) {\n    return (event) => {\n        if (event.sourceEvent?.internal) {\n            return;\n        }\n        const viewport = transformToViewport(event.transform);\n        // we need to remember it here, because it's always 0 in the \"zoom\" event\n        zoomPanValues.mouseButton = event.sourceEvent?.button || 0;\n        zoomPanValues.isZoomingOrPanning = true;\n        zoomPanValues.prevViewport = viewport;\n        if (event.sourceEvent?.type === 'mousedown') {\n            onDraggingChange(true);\n        }\n        if (onPanZoomStart) {\n            onPanZoomStart?.(event.sourceEvent, viewport);\n        }\n    };\n}\nfunction createPanZoomHandler({ zoomPanValues, panOnDrag, onPaneContextMenu, onTransformChange, onPanZoom, }) {\n    return (event) => {\n        zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));\n        if (!event.sourceEvent?.sync) {\n            onTransformChange([event.transform.x, event.transform.y, event.transform.k]);\n        }\n        if (onPanZoom && !event.sourceEvent?.internal) {\n            onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));\n        }\n    };\n}\nfunction createPanZoomEndHandler({ zoomPanValues, panOnDrag, panOnScroll, onDraggingChange, onPanZoomEnd, onPaneContextMenu, }) {\n    return (event) => {\n        if (event.sourceEvent?.internal) {\n            return;\n        }\n        zoomPanValues.isZoomingOrPanning = false;\n        if (onPaneContextMenu &&\n            isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) &&\n            !zoomPanValues.usedRightMouseButton &&\n            event.sourceEvent) {\n            onPaneContextMenu(event.sourceEvent);\n        }\n        zoomPanValues.usedRightMouseButton = false;\n        onDraggingChange(false);\n        if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {\n            const viewport = transformToViewport(event.transform);\n            zoomPanValues.prevViewport = viewport;\n            clearTimeout(zoomPanValues.timerId);\n            zoomPanValues.timerId = setTimeout(() => {\n                onPanZoomEnd?.(event.sourceEvent, viewport);\n            }, \n            // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll\n            panOnScroll ? 150 : 0);\n        }\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createFilter({ zoomActivationKeyPressed, zoomOnScroll, zoomOnPinch, panOnDrag, panOnScroll, zoomOnDoubleClick, userSelectionActive, noWheelClassName, noPanClassName, lib, }) {\n    return (event) => {\n        const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n        const pinchZoom = zoomOnPinch && event.ctrlKey;\n        if (event.button === 1 &&\n            event.type === 'mousedown' &&\n            (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {\n            return true;\n        }\n        // if all interactions are disabled, we prevent all zoom events\n        if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n            return false;\n        }\n        // during a selection we prevent all other interactions\n        if (userSelectionActive) {\n            return false;\n        }\n        // if the target element is inside an element with the nowheel class, we prevent zooming\n        if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n            return false;\n        }\n        // if the target element is inside an element with the nopan class, we prevent panning\n        if (isWrappedWithClass(event, noPanClassName) &&\n            (event.type !== 'wheel' || (panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed))) {\n            return false;\n        }\n        if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n            return false;\n        }\n        if (!zoomOnPinch && event.type === 'touchstart' && event.touches?.length > 1) {\n            event.preventDefault(); // if you manage to start with 2 touches, we prevent native zoom\n            return false;\n        }\n        // when there is no scroll handling enabled, we prevent all wheel events\n        if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n            return false;\n        }\n        // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n        if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n            return false;\n        }\n        // if the pane is only movable using allowed clicks\n        if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n            return false;\n        }\n        // We only allow right clicks if pan on drag is set to right click\n        const buttonAllowed = (Array.isArray(panOnDrag) && panOnDrag.includes(event.button)) || !event.button || event.button <= 1;\n        // default filter for d3-zoom\n        return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n    };\n}\n\nfunction XYPanZoom({ domNode, minZoom, maxZoom, paneClickDistance, translateExtent, viewport, onPanZoom, onPanZoomStart, onPanZoomEnd, onDraggingChange, }) {\n    const zoomPanValues = {\n        isZoomingOrPanning: false,\n        usedRightMouseButton: false,\n        prevViewport: { x: 0, y: 0, zoom: 0 },\n        mouseButton: 0,\n        timerId: undefined,\n        panScrollTimeout: undefined,\n        isPanScrolling: false,\n    };\n    const bbox = domNode.getBoundingClientRect();\n    const d3ZoomInstance = zoom()\n        .clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance)\n        .scaleExtent([minZoom, maxZoom])\n        .translateExtent(translateExtent);\n    const d3Selection = select(domNode).call(d3ZoomInstance);\n    setViewportConstrained({\n        x: viewport.x,\n        y: viewport.y,\n        zoom: clamp(viewport.zoom, minZoom, maxZoom),\n    }, [\n        [0, 0],\n        [bbox.width, bbox.height],\n    ], translateExtent);\n    const d3ZoomHandler = d3Selection.on('wheel.zoom');\n    const d3DblClickZoomHandler = d3Selection.on('dblclick.zoom');\n    d3ZoomInstance.wheelDelta(wheelDelta);\n    function setTransform(transform, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    // public functions\n    function update({ noWheelClassName, noPanClassName, onPaneContextMenu, userSelectionActive, panOnScroll, panOnDrag, panOnScrollMode, panOnScrollSpeed, preventScrolling, zoomOnPinch, zoomOnScroll, zoomOnDoubleClick, zoomActivationKeyPressed, lib, onTransformChange, }) {\n        if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {\n            destroy();\n        }\n        const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;\n        const wheelHandler = isPanOnScroll\n            ? createPanOnScrollHandler({\n                zoomPanValues,\n                noWheelClassName,\n                d3Selection,\n                d3Zoom: d3ZoomInstance,\n                panOnScrollMode,\n                panOnScrollSpeed,\n                zoomOnPinch,\n                onPanZoomStart,\n                onPanZoom,\n                onPanZoomEnd,\n            })\n            : createZoomOnScrollHandler({\n                noWheelClassName,\n                preventScrolling,\n                d3ZoomHandler,\n            });\n        d3Selection.on('wheel.zoom', wheelHandler, { passive: false });\n        if (!userSelectionActive) {\n            // pan zoom start\n            const startHandler = createPanZoomStartHandler({\n                zoomPanValues,\n                onDraggingChange,\n                onPanZoomStart,\n            });\n            d3ZoomInstance.on('start', startHandler);\n            // pan zoom\n            const panZoomHandler = createPanZoomHandler({\n                zoomPanValues,\n                panOnDrag,\n                onPaneContextMenu: !!onPaneContextMenu,\n                onPanZoom,\n                onTransformChange,\n            });\n            d3ZoomInstance.on('zoom', panZoomHandler);\n            // pan zoom end\n            const panZoomEndHandler = createPanZoomEndHandler({\n                zoomPanValues,\n                panOnDrag,\n                panOnScroll,\n                onPaneContextMenu,\n                onPanZoomEnd,\n                onDraggingChange,\n            });\n            d3ZoomInstance.on('end', panZoomEndHandler);\n        }\n        const filter = createFilter({\n            zoomActivationKeyPressed,\n            panOnDrag,\n            zoomOnScroll,\n            panOnScroll,\n            zoomOnDoubleClick,\n            zoomOnPinch,\n            userSelectionActive,\n            noPanClassName,\n            noWheelClassName,\n            lib,\n        });\n        d3ZoomInstance.filter(filter);\n        /*\n         * We cannot add zoomOnDoubleClick to the filter above because\n         * double tapping on touch screens circumvents the filter and\n         * dblclick.zoom is fired on the selection directly\n         */\n        if (zoomOnDoubleClick) {\n            d3Selection.on('dblclick.zoom', d3DblClickZoomHandler);\n        }\n        else {\n            d3Selection.on('dblclick.zoom', null);\n        }\n    }\n    function destroy() {\n        d3ZoomInstance.on('zoom', null);\n    }\n    async function setViewportConstrained(viewport, extent, translateExtent) {\n        const nextTransform = viewportToTransform(viewport);\n        const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent);\n        if (contrainedTransform) {\n            await setTransform(contrainedTransform);\n        }\n        return new Promise((resolve) => resolve(contrainedTransform));\n    }\n    async function setViewport(viewport, options) {\n        const nextTransform = viewportToTransform(viewport);\n        await setTransform(nextTransform, options);\n        return new Promise((resolve) => resolve(nextTransform));\n    }\n    function syncViewport(viewport) {\n        if (d3Selection) {\n            const nextTransform = viewportToTransform(viewport);\n            const currentTransform = d3Selection.property('__zoom');\n            if (currentTransform.k !== viewport.zoom ||\n                currentTransform.x !== viewport.x ||\n                currentTransform.y !== viewport.y) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                d3ZoomInstance?.transform(d3Selection, nextTransform, null, { sync: true });\n            }\n        }\n    }\n    function getViewport() {\n        const transform = d3Selection ? zoomTransform(d3Selection.node()) : { x: 0, y: 0, k: 1 };\n        return { x: transform.x, y: transform.y, zoom: transform.k };\n    }\n    function scaleTo(zoom, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    function scaleBy(factor, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    function setScaleExtent(scaleExtent) {\n        d3ZoomInstance?.scaleExtent(scaleExtent);\n    }\n    function setTranslateExtent(translateExtent) {\n        d3ZoomInstance?.translateExtent(translateExtent);\n    }\n    function setClickDistance(distance) {\n        const validDistance = !isNumeric(distance) || distance < 0 ? 0 : distance;\n        d3ZoomInstance?.clickDistance(validDistance);\n    }\n    return {\n        update,\n        destroy,\n        setViewport,\n        setViewportConstrained,\n        getViewport,\n        scaleTo,\n        scaleBy,\n        setScaleExtent,\n        setTranslateExtent,\n        syncViewport,\n        setClickDistance,\n    };\n}\n\n/**\n * Used to determine the variant of the resize control\n *\n * @public\n */\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n    ResizeControlVariant[\"Line\"] = \"line\";\n    ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\nconst XY_RESIZER_HANDLE_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nconst XY_RESIZER_LINE_POSITIONS = ['top', 'right', 'bottom', 'left'];\n\n/**\n * Get all connecting edges for a given set of nodes\n * @param width - new width of the node\n * @param prevWidth - previous width of the node\n * @param height - new height of the node\n * @param prevHeight - previous height of the node\n * @param affectsX - whether to invert the resize direction for the x axis\n * @param affectsY - whether to invert the resize direction for the y axis\n * @returns array of two numbers representing the direction of the resize for each axis, 0 = no change, 1 = increase, -1 = decrease\n */\nfunction getResizeDirection({ width, prevWidth, height, prevHeight, affectsX, affectsY, }) {\n    const deltaWidth = width - prevWidth;\n    const deltaHeight = height - prevHeight;\n    const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n    if (deltaWidth && affectsX) {\n        direction[0] = direction[0] * -1;\n    }\n    if (deltaHeight && affectsY) {\n        direction[1] = direction[1] * -1;\n    }\n    return direction;\n}\n/**\n * Parses the control position that is being dragged to dimensions that are being resized\n * @param controlPosition - position of the control that is being dragged\n * @returns isHorizontal, isVertical, affectsX, affectsY,\n */\nfunction getControlDirection(controlPosition) {\n    const isHorizontal = controlPosition.includes('right') || controlPosition.includes('left');\n    const isVertical = controlPosition.includes('bottom') || controlPosition.includes('top');\n    const affectsX = controlPosition.includes('left');\n    const affectsY = controlPosition.includes('top');\n    return {\n        isHorizontal,\n        isVertical,\n        affectsX,\n        affectsY,\n    };\n}\nfunction getLowerExtentClamp(lowerExtent, lowerBound) {\n    return Math.max(0, lowerBound - lowerExtent);\n}\nfunction getUpperExtentClamp(upperExtent, upperBound) {\n    return Math.max(0, upperExtent - upperBound);\n}\nfunction getSizeClamp(size, minSize, maxSize) {\n    return Math.max(0, minSize - size, size - maxSize);\n}\nfunction xor(a, b) {\n    return a ? !b : b;\n}\n/**\n * Calculates new width & height and x & y of node after resize based on pointer position\n * @description - Buckle up, this is a chunky one... If you want to determine the new dimensions of a node after a resize,\n * you have to account for all possible restrictions: min/max width/height of the node, the maximum extent the node is allowed\n * to move in (in this case: resize into) determined by the parent node, the minimal extent determined by child nodes\n * with expandParent or extent: 'parent' set and oh yeah, these things also have to work with keepAspectRatio!\n * The way this is done is by determining how much each of these restricting actually restricts the resize and then applying the\n * strongest restriction. Because the resize affects x, y and width, height and width, height of a opposing side with keepAspectRatio,\n * the resize amount is always kept in distX & distY amount (the distance in mouse movement)\n * Instead of clamping each value, we first calculate the biggest 'clamp' (for the lack of a better name) and then apply it to all values.\n * To complicate things nodeOrigin has to be taken into account as well. This is done by offsetting the nodes as if their origin is [0, 0],\n * then calculating the restrictions as usual\n * @param startValues - starting values of resize\n * @param controlDirection - dimensions affected by the resize\n * @param pointerPosition - the current pointer position corrected for snapping\n * @param boundaries - minimum and maximum dimensions of the node\n * @param keepAspectRatio - prevent changes of asprect ratio\n * @returns x, y, width and height of the node after resize\n */\nfunction getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {\n    let { affectsX, affectsY } = controlDirection;\n    const { isHorizontal, isVertical } = controlDirection;\n    const isDiagonal = isHorizontal && isVertical;\n    const { xSnapped, ySnapped } = pointerPosition;\n    const { minWidth, maxWidth, minHeight, maxHeight } = boundaries;\n    const { x: startX, y: startY, width: startWidth, height: startHeight, aspectRatio } = startValues;\n    let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);\n    let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);\n    const newWidth = startWidth + (affectsX ? -distX : distX);\n    const newHeight = startHeight + (affectsY ? -distY : distY);\n    const originOffsetX = -nodeOrigin[0] * startWidth;\n    const originOffsetY = -nodeOrigin[1] * startHeight;\n    // Check if maxWidth, minWWidth, maxHeight, minHeight are restricting the resize\n    let clampX = getSizeClamp(newWidth, minWidth, maxWidth);\n    let clampY = getSizeClamp(newHeight, minHeight, maxHeight);\n    // Check if extent is restricting the resize\n    if (extent) {\n        let xExtentClamp = 0;\n        let yExtentClamp = 0;\n        if (affectsX && distX < 0) {\n            xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);\n        }\n        else if (!affectsX && distX > 0) {\n            xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);\n        }\n        if (affectsY && distY < 0) {\n            yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);\n        }\n        else if (!affectsY && distY > 0) {\n            yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);\n        }\n        clampX = Math.max(clampX, xExtentClamp);\n        clampY = Math.max(clampY, yExtentClamp);\n    }\n    // Check if the child extent is restricting the resize\n    if (childExtent) {\n        let xExtentClamp = 0;\n        let yExtentClamp = 0;\n        if (affectsX && distX > 0) {\n            xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);\n        }\n        else if (!affectsX && distX < 0) {\n            xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);\n        }\n        if (affectsY && distY > 0) {\n            yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);\n        }\n        else if (!affectsY && distY < 0) {\n            yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);\n        }\n        clampX = Math.max(clampX, xExtentClamp);\n        clampY = Math.max(clampY, yExtentClamp);\n    }\n    // Check if the aspect ratio resizing of the other side is restricting the resize\n    if (keepAspectRatio) {\n        if (isHorizontal) {\n            // Check if the max dimensions might be restricting the resize\n            const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;\n            clampX = Math.max(clampX, aspectHeightClamp);\n            // Check if the extent is restricting the resize\n            if (extent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsX && !affectsY && isDiagonal)) {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) *\n                            aspectRatio;\n                }\n                clampX = Math.max(clampX, aspectExtentClamp);\n            }\n            // Check if the child extent is restricting the resize\n            if (childExtent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsX && !affectsY && isDiagonal)) {\n                    aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;\n                }\n                clampX = Math.max(clampX, aspectExtentClamp);\n            }\n        }\n        // Do the same thing for vertical resizing\n        if (isVertical) {\n            const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;\n            clampY = Math.max(clampY, aspectWidthClamp);\n            if (extent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsY && !affectsX && isDiagonal)) {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) /\n                            aspectRatio;\n                }\n                clampY = Math.max(clampY, aspectExtentClamp);\n            }\n            if (childExtent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsY && !affectsX && isDiagonal)) {\n                    aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;\n                }\n                clampY = Math.max(clampY, aspectExtentClamp);\n            }\n        }\n    }\n    distY = distY + (distY < 0 ? clampY : -clampY);\n    distX = distX + (distX < 0 ? clampX : -clampX);\n    if (keepAspectRatio) {\n        if (isDiagonal) {\n            if (newWidth > newHeight * aspectRatio) {\n                distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;\n            }\n            else {\n                distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;\n            }\n        }\n        else {\n            if (isHorizontal) {\n                distY = distX / aspectRatio;\n                affectsY = affectsX;\n            }\n            else {\n                distX = distY * aspectRatio;\n                affectsX = affectsY;\n            }\n        }\n    }\n    const x = affectsX ? startX + distX : startX;\n    const y = affectsY ? startY + distY : startY;\n    return {\n        width: startWidth + (affectsX ? -distX : distX),\n        height: startHeight + (affectsY ? -distY : distY),\n        x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,\n        y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y,\n    };\n}\n\nconst initPrevValues = { width: 0, height: 0, x: 0, y: 0 };\nconst initStartValues = {\n    ...initPrevValues,\n    pointerX: 0,\n    pointerY: 0,\n    aspectRatio: 1,\n};\nfunction nodeToParentExtent(node) {\n    return [\n        [0, 0],\n        [node.measured.width, node.measured.height],\n    ];\n}\nfunction nodeToChildExtent(child, parent, nodeOrigin) {\n    const x = parent.position.x + child.position.x;\n    const y = parent.position.y + child.position.y;\n    const width = child.measured.width ?? 0;\n    const height = child.measured.height ?? 0;\n    const originOffsetX = nodeOrigin[0] * width;\n    const originOffsetY = nodeOrigin[1] * height;\n    return [\n        [x - originOffsetX, y - originOffsetY],\n        [x + width - originOffsetX, y + height - originOffsetY],\n    ];\n}\nfunction XYResizer({ domNode, nodeId, getStoreItems, onChange, onEnd }) {\n    const selection = select(domNode);\n    function update({ controlPosition, boundaries, keepAspectRatio, resizeDirection, onResizeStart, onResize, onResizeEnd, shouldResize, }) {\n        let prevValues = { ...initPrevValues };\n        let startValues = { ...initStartValues };\n        const controlDirection = getControlDirection(controlPosition);\n        let node = undefined;\n        let containerBounds = null;\n        let childNodes = [];\n        let parentNode = undefined; // Needed to fix expandParent\n        let parentExtent = undefined;\n        let childExtent = undefined;\n        const dragHandler = drag()\n            .on('start', (event) => {\n            const { nodeLookup, transform, snapGrid, snapToGrid, nodeOrigin, paneDomNode } = getStoreItems();\n            node = nodeLookup.get(nodeId);\n            if (!node) {\n                return;\n            }\n            containerBounds = paneDomNode?.getBoundingClientRect() ?? null;\n            const { xSnapped, ySnapped } = getPointerPosition(event.sourceEvent, {\n                transform,\n                snapGrid,\n                snapToGrid,\n                containerBounds,\n            });\n            prevValues = {\n                width: node.measured.width ?? 0,\n                height: node.measured.height ?? 0,\n                x: node.position.x ?? 0,\n                y: node.position.y ?? 0,\n            };\n            startValues = {\n                ...prevValues,\n                pointerX: xSnapped,\n                pointerY: ySnapped,\n                aspectRatio: prevValues.width / prevValues.height,\n            };\n            parentNode = undefined;\n            if (node.parentId && (node.extent === 'parent' || node.expandParent)) {\n                parentNode = nodeLookup.get(node.parentId);\n                parentExtent = parentNode && node.extent === 'parent' ? nodeToParentExtent(parentNode) : undefined;\n            }\n            /*\n             * Collect all child nodes to correct their relative positions when top/left changes\n             * Determine largest minimal extent the parent node is allowed to resize to\n             */\n            childNodes = [];\n            childExtent = undefined;\n            for (const [childId, child] of nodeLookup) {\n                if (child.parentId === nodeId) {\n                    childNodes.push({\n                        id: childId,\n                        position: { ...child.position },\n                        extent: child.extent,\n                    });\n                    if (child.extent === 'parent' || child.expandParent) {\n                        const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);\n                        if (childExtent) {\n                            childExtent = [\n                                [Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])],\n                                [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])],\n                            ];\n                        }\n                        else {\n                            childExtent = extent;\n                        }\n                    }\n                }\n            }\n            onResizeStart?.(event, { ...prevValues });\n        })\n            .on('drag', (event) => {\n            const { transform, snapGrid, snapToGrid, nodeOrigin: storeNodeOrigin } = getStoreItems();\n            const pointerPosition = getPointerPosition(event.sourceEvent, {\n                transform,\n                snapGrid,\n                snapToGrid,\n                containerBounds,\n            });\n            const childChanges = [];\n            if (!node) {\n                return;\n            }\n            const { x: prevX, y: prevY, width: prevWidth, height: prevHeight } = prevValues;\n            const change = {};\n            const nodeOrigin = node.origin ?? storeNodeOrigin;\n            const { width, height, x, y } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);\n            const isWidthChange = width !== prevWidth;\n            const isHeightChange = height !== prevHeight;\n            const isXPosChange = x !== prevX && isWidthChange;\n            const isYPosChange = y !== prevY && isHeightChange;\n            if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {\n                return;\n            }\n            if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {\n                change.x = isXPosChange ? x : prevValues.x;\n                change.y = isYPosChange ? y : prevValues.y;\n                prevValues.x = change.x;\n                prevValues.y = change.y;\n                /*\n                 * when top/left changes, correct the relative positions of child nodes\n                 * so that they stay in the same position\n                 */\n                if (childNodes.length > 0) {\n                    const xChange = x - prevX;\n                    const yChange = y - prevY;\n                    for (const childNode of childNodes) {\n                        childNode.position = {\n                            x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),\n                            y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight),\n                        };\n                        childChanges.push(childNode);\n                    }\n                }\n            }\n            if (isWidthChange || isHeightChange) {\n                change.width =\n                    isWidthChange && (!resizeDirection || resizeDirection === 'horizontal') ? width : prevValues.width;\n                change.height =\n                    isHeightChange && (!resizeDirection || resizeDirection === 'vertical') ? height : prevValues.height;\n                prevValues.width = change.width;\n                prevValues.height = change.height;\n            }\n            // Fix expandParent when resizing from top/left\n            if (parentNode && node.expandParent) {\n                const xLimit = nodeOrigin[0] * (change.width ?? 0);\n                if (change.x && change.x < xLimit) {\n                    prevValues.x = xLimit;\n                    startValues.x = startValues.x - (change.x - xLimit);\n                }\n                const yLimit = nodeOrigin[1] * (change.height ?? 0);\n                if (change.y && change.y < yLimit) {\n                    prevValues.y = yLimit;\n                    startValues.y = startValues.y - (change.y - yLimit);\n                }\n            }\n            const direction = getResizeDirection({\n                width: prevValues.width,\n                prevWidth,\n                height: prevValues.height,\n                prevHeight,\n                affectsX: controlDirection.affectsX,\n                affectsY: controlDirection.affectsY,\n            });\n            const nextValues = { ...prevValues, direction };\n            const callResize = shouldResize?.(event, nextValues);\n            if (callResize === false) {\n                return;\n            }\n            onResize?.(event, nextValues);\n            onChange(change, childChanges);\n        })\n            .on('end', (event) => {\n            onResizeEnd?.(event, { ...prevValues });\n            onEnd?.({ ...prevValues });\n        });\n        selection.call(dragHandler);\n    }\n    function destroy() {\n        selection.on('.drag', null);\n    }\n    return {\n        update,\n        destroy,\n    };\n}\n\nexport { ConnectionLineType, ConnectionMode, MarkerType, PanOnScrollMode, Position, ResizeControlVariant, SelectionMode, XYDrag, XYHandle, XYMinimap, XYPanZoom, XYResizer, XY_RESIZER_HANDLE_POSITIONS, XY_RESIZER_LINE_POSITIONS, addEdge, adoptUserNodes, areConnectionMapsEqual, areSetsEqual, boxToRect, calcAutoPan, calculateNodePosition, clamp, clampPosition, clampPositionToParent, createMarkerIds, devWarn, elementSelectionKeys, errorMessages, evaluateAbsolutePosition, fitViewport, getBezierEdgeCenter, getBezierPath, getBoundsOfBoxes, getBoundsOfRects, getConnectedEdges, getConnectionStatus, getDimensions, getEdgeCenter, getEdgePosition, getElementsToRemove, getElevatedEdgeZIndex, getEventPosition, getHandleBounds, getHandlePosition, getHostForElement, getIncomers, getInternalNodesBounds, getMarkerId, getNodeDimensions, getNodePositionWithOrigin, getNodeToolbarTransform, getNodesBounds, getNodesInside, getOutgoers, getOverlappingArea, getPointerPosition, getSmoothStepPath, getStraightPath, getViewportForBounds, handleConnectionChange, handleExpandParent, infiniteExtent, initialConnection, isCoordinateExtent, isEdgeBase, isEdgeVisible, isInputDOMNode, isInternalNodeBase, isMacOs, isMouseEvent, isNodeBase, isNumeric, isRectObject, nodeHasDimensions, nodeToBox, nodeToRect, oppositePosition, panBy, pointToRendererPoint, reconnectEdge, rectToBox, rendererPointToPoint, shallowNodeData, snapPosition, updateAbsolutePositions, updateConnectionLookup, updateNodeInternals, withResolvers };\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,SAAS;AAC9B,SAASC,MAAM,EAAEC,OAAO,QAAQ,cAAc;AAC9C,SAASC,IAAI,EAAEC,YAAY,EAAEC,aAAa,QAAQ,SAAS;AAE3D,MAAMC,aAAa,GAAG;EAClBC,QAAQ,EAAEA,CAAA,KAAM,mHAAmH;EACnIC,QAAQ,EAAEA,CAAA,KAAM,6KAA6K;EAC7LC,QAAQ,EAAGC,QAAQ,IAAK,cAAcA,QAAQ,6CAA6C;EAC3FC,QAAQ,EAAEA,CAAA,KAAM,iFAAiF;EACjGC,QAAQ,EAAEA,CAAA,KAAM,2CAA2C;EAC3DC,QAAQ,EAAEA,CAAA,KAAM,yDAAyD;EACzEC,QAAQ,EAAGC,EAAE,IAAK,wBAAwBA,EAAE,kBAAkB;EAC9DC,QAAQ,EAAGC,IAAI,IAAK,gBAAgBA,IAAI,kBAAkB;EAC1DC,QAAQ,EAAEA,CAACC,UAAU,EAAE;IAAEJ,EAAE;IAAEK,YAAY;IAAEC;EAAa,CAAC,KAAK,4BAA4BF,UAAU,gBAAgBA,UAAU,KAAK,QAAQ,GAAGC,YAAY,GAAGC,YAAY,eAAeN,EAAE,GAAG;EAC7LO,QAAQ,EAAEA,CAAA,KAAM,gFAAgF;EAChGC,QAAQ,EAAGC,QAAQ,IAAK,cAAcA,QAAQ,6CAA6C;EAC3FC,QAAQ,EAAGV,EAAE,IAAK,iBAAiBA,EAAE,gIAAgI;EACrKW,QAAQ,EAAEA,CAACC,GAAG,GAAG,OAAO,KAAK,uEAAuEA,GAAG,2EAA2E;EAClLC,QAAQ,EAAEA,CAAA,KAAM,0GAA0G;EAC1HC,QAAQ,EAAEA,CAAA,KAAM;AACpB,CAAC;AACD,MAAMC,cAAc,GAAG,CACnB,CAACC,MAAM,CAACC,iBAAiB,EAAED,MAAM,CAACC,iBAAiB,CAAC,EACpD,CAACD,MAAM,CAACE,iBAAiB,EAAEF,MAAM,CAACE,iBAAiB,CAAC,CACvD;AACD,MAAMC,oBAAoB,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc;AAClB,CAAC,UAAUA,cAAc,EAAE;EACvBA,cAAc,CAAC,QAAQ,CAAC,GAAG,QAAQ;EACnCA,cAAc,CAAC,OAAO,CAAC,GAAG,OAAO;AACrC,CAAC,EAAEA,cAAc,KAAKA,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,eAAe;AACnB,CAAC,UAAUA,eAAe,EAAE;EACxBA,eAAe,CAAC,MAAM,CAAC,GAAG,MAAM;EAChCA,eAAe,CAAC,UAAU,CAAC,GAAG,UAAU;EACxCA,eAAe,CAAC,YAAY,CAAC,GAAG,YAAY;AAChD,CAAC,EAAEA,eAAe,KAAKA,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7C,IAAIC,aAAa;AACjB,CAAC,UAAUA,aAAa,EAAE;EACtBA,aAAa,CAAC,SAAS,CAAC,GAAG,SAAS;EACpCA,aAAa,CAAC,MAAM,CAAC,GAAG,MAAM;AAClC,CAAC,EAAEA,aAAa,KAAKA,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;AACzC,MAAMC,iBAAiB,GAAG;EACtBC,UAAU,EAAE,KAAK;EACjBC,OAAO,EAAE,IAAI;EACbC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE,IAAI;EAClBC,QAAQ,EAAE,IAAI;EACdC,EAAE,EAAE,IAAI;EACRC,QAAQ,EAAE,IAAI;EACdC,UAAU,EAAE,IAAI;EAChBC,MAAM,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,kBAAkB;AACtB,CAAC,UAAUA,kBAAkB,EAAE;EAC3BA,kBAAkB,CAAC,QAAQ,CAAC,GAAG,SAAS;EACxCA,kBAAkB,CAAC,UAAU,CAAC,GAAG,UAAU;EAC3CA,kBAAkB,CAAC,MAAM,CAAC,GAAG,MAAM;EACnCA,kBAAkB,CAAC,YAAY,CAAC,GAAG,YAAY;EAC/CA,kBAAkB,CAAC,cAAc,CAAC,GAAG,cAAc;AACvD,CAAC,EAAEA,kBAAkB,KAAKA,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU;AACd,CAAC,UAAUA,UAAU,EAAE;EACnBA,UAAU,CAAC,OAAO,CAAC,GAAG,OAAO;EAC7BA,UAAU,CAAC,aAAa,CAAC,GAAG,aAAa;AAC7C,CAAC,EAAEA,UAAU,KAAKA,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ;AACZ,CAAC,UAAUA,QAAQ,EAAE;EACjBA,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM;EACzBA,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK;EACvBA,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO;EAC3BA,QAAQ,CAAC,QAAQ,CAAC,GAAG,QAAQ;AACjC,CAAC,EAAEA,QAAQ,KAAKA,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/B,MAAMC,gBAAgB,GAAG;EACrB,CAACD,QAAQ,CAACE,IAAI,GAAGF,QAAQ,CAACG,KAAK;EAC/B,CAACH,QAAQ,CAACG,KAAK,GAAGH,QAAQ,CAACE,IAAI;EAC/B,CAACF,QAAQ,CAACI,GAAG,GAAGJ,QAAQ,CAACK,MAAM;EAC/B,CAACL,QAAQ,CAACK,MAAM,GAAGL,QAAQ,CAACI;AAChC,CAAC;;AAED;AACA;AACA;AACA,SAASE,sBAAsBA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAClC,IAAI,CAACD,CAAC,IAAI,CAACC,CAAC,EAAE;IACV,OAAO,IAAI;EACf;EACA,IAAI,CAACD,CAAC,IAAI,CAACC,CAAC,IAAID,CAAC,CAACE,IAAI,KAAKD,CAAC,CAACC,IAAI,EAAE;IAC/B,OAAO,KAAK;EAChB;EACA,IAAI,CAACF,CAAC,CAACE,IAAI,IAAI,CAACD,CAAC,CAACC,IAAI,EAAE;IACpB,OAAO,IAAI;EACf;EACA,KAAK,MAAMC,GAAG,IAAIH,CAAC,CAACI,IAAI,CAAC,CAAC,EAAE;IACxB,IAAI,CAACH,CAAC,CAACI,GAAG,CAACF,GAAG,CAAC,EAAE;MACb,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,sBAAsBA,CAACN,CAAC,EAAEC,CAAC,EAAEM,EAAE,EAAE;EACtC,IAAI,CAACA,EAAE,EAAE;IACL;EACJ;EACA,MAAMC,IAAI,GAAG,EAAE;EACfR,CAAC,CAACS,OAAO,CAAC,CAACC,UAAU,EAAEP,GAAG,KAAK;IAC3B,IAAI,CAACF,CAAC,EAAEI,GAAG,CAACF,GAAG,CAAC,EAAE;MACdK,IAAI,CAACG,IAAI,CAACD,UAAU,CAAC;IACzB;EACJ,CAAC,CAAC;EACF,IAAIF,IAAI,CAACI,MAAM,EAAE;IACbL,EAAE,CAACC,IAAI,CAAC;EACZ;AACJ;AACA,SAASK,mBAAmBA,CAAC/B,OAAO,EAAE;EAClC,OAAOA,OAAO,KAAK,IAAI,GAAG,IAAI,GAAGA,OAAO,GAAG,OAAO,GAAG,SAAS;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgC,UAAU,GAAIC,OAAO,IAAK,IAAI,IAAIA,OAAO,IAAI,QAAQ,IAAIA,OAAO,IAAI,QAAQ,IAAIA,OAAO;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAID,OAAO,IAAK,IAAI,IAAIA,OAAO,IAAI,UAAU,IAAIA,OAAO,IAAI,EAAE,QAAQ,IAAIA,OAAO,CAAC,IAAI,EAAE,QAAQ,IAAIA,OAAO,CAAC;AAC5H,MAAME,kBAAkB,GAAIF,OAAO,IAAK,IAAI,IAAIA,OAAO,IAAI,WAAW,IAAIA,OAAO,IAAI,EAAE,QAAQ,IAAIA,OAAO,CAAC,IAAI,EAAE,QAAQ,IAAIA,OAAO,CAAC;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAW,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACxC,IAAI,CAACF,IAAI,CAAC9D,EAAE,EAAE;IACV,OAAO,EAAE;EACb;EACA,MAAMiE,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC5BF,KAAK,CAACZ,OAAO,CAAEe,IAAI,IAAK;IACpB,IAAIA,IAAI,CAACC,MAAM,KAAKN,IAAI,CAAC9D,EAAE,EAAE;MACzBiE,UAAU,CAACI,GAAG,CAACF,IAAI,CAACG,MAAM,CAAC;IAC/B;EACJ,CAAC,CAAC;EACF,OAAOP,KAAK,CAACQ,MAAM,CAAEC,CAAC,IAAKP,UAAU,CAACjB,GAAG,CAACwB,CAAC,CAACxE,EAAE,CAAC,CAAC;AACpD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyE,WAAW,GAAGA,CAACX,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACxC,IAAI,CAACF,IAAI,CAAC9D,EAAE,EAAE;IACV,OAAO,EAAE;EACb;EACA,MAAM0E,WAAW,GAAG,IAAIR,GAAG,CAAC,CAAC;EAC7BF,KAAK,CAACZ,OAAO,CAAEe,IAAI,IAAK;IACpB,IAAIA,IAAI,CAACG,MAAM,KAAKR,IAAI,CAAC9D,EAAE,EAAE;MACzB0E,WAAW,CAACL,GAAG,CAACF,IAAI,CAACC,MAAM,CAAC;IAChC;EACJ,CAAC,CAAC;EACF,OAAOL,KAAK,CAACQ,MAAM,CAAEC,CAAC,IAAKE,WAAW,CAAC1B,GAAG,CAACwB,CAAC,CAACxE,EAAE,CAAC,CAAC;AACrD,CAAC;AACD,MAAM2E,yBAAyB,GAAGA,CAACb,IAAI,EAAEc,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;EAC7D,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGC,iBAAiB,CAACjB,IAAI,CAAC;EACjD,MAAMkB,MAAM,GAAGlB,IAAI,CAACkB,MAAM,IAAIJ,UAAU;EACxC,MAAMK,OAAO,GAAGJ,KAAK,GAAGG,MAAM,CAAC,CAAC,CAAC;EACjC,MAAME,OAAO,GAAGJ,MAAM,GAAGE,MAAM,CAAC,CAAC,CAAC;EAClC,OAAO;IACHG,CAAC,EAAErB,IAAI,CAACsB,QAAQ,CAACD,CAAC,GAAGF,OAAO;IAC5BI,CAAC,EAAEvB,IAAI,CAACsB,QAAQ,CAACC,CAAC,GAAGH;EACzB,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,cAAc,GAAGA,CAACvB,KAAK,EAAEwB,MAAM,GAAG;EAAEX,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC;AAAE,CAAC,KAAK;EAC/D,IAAIY,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,IAAI,CAACH,MAAM,CAACI,UAAU,EAAE;IAC9DC,OAAO,CAACC,IAAI,CAAC,sLAAsL,CAAC;EACxM;EACA,IAAI9B,KAAK,CAACR,MAAM,KAAK,CAAC,EAAE;IACpB,OAAO;MAAE4B,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAER,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;EAC9C;EACA,MAAMgB,GAAG,GAAG/B,KAAK,CAACgC,MAAM,CAAC,CAACC,OAAO,EAAEC,QAAQ,KAAK;IAC5C,MAAMC,IAAI,GAAG,OAAOD,QAAQ,KAAK,QAAQ;IACzC,IAAIE,WAAW,GAAG,CAACZ,MAAM,CAACI,UAAU,IAAI,CAACO,IAAI,GAAGD,QAAQ,GAAGG,SAAS;IACpE,IAAIb,MAAM,CAACI,UAAU,EAAE;MACnBQ,WAAW,GAAGD,IAAI,GACZX,MAAM,CAACI,UAAU,CAACU,GAAG,CAACJ,QAAQ,CAAC,GAC/B,CAACrC,kBAAkB,CAACqC,QAAQ,CAAC,GACzBV,MAAM,CAACI,UAAU,CAACU,GAAG,CAACJ,QAAQ,CAACjG,EAAE,CAAC,GAClCiG,QAAQ;IACtB;IACA,MAAMK,OAAO,GAAGH,WAAW,GAAGI,SAAS,CAACJ,WAAW,EAAEZ,MAAM,CAACX,UAAU,CAAC,GAAG;MAAEO,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAEmB,EAAE,EAAE,CAAC;MAAEC,EAAE,EAAE;IAAE,CAAC;IACtG,OAAOC,gBAAgB,CAACV,OAAO,EAAEM,OAAO,CAAC;EAC7C,CAAC,EAAE;IAAEnB,CAAC,EAAEwB,QAAQ;IAAEtB,CAAC,EAAEsB,QAAQ;IAAEH,EAAE,EAAE,CAACG,QAAQ;IAAEF,EAAE,EAAE,CAACE;EAAS,CAAC,CAAC;EAC9D,OAAOC,SAAS,CAACd,GAAG,CAAC;AACzB,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMe,sBAAsB,GAAGA,CAAClB,UAAU,EAAEJ,MAAM,GAAG,CAAC,CAAC,KAAK;EACxD,IAAII,UAAU,CAAC9C,IAAI,KAAK,CAAC,EAAE;IACvB,OAAO;MAAEsC,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAER,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;EAC9C;EACA,IAAIgB,GAAG,GAAG;IAAEX,CAAC,EAAEwB,QAAQ;IAAEtB,CAAC,EAAEsB,QAAQ;IAAEH,EAAE,EAAE,CAACG,QAAQ;IAAEF,EAAE,EAAE,CAACE;EAAS,CAAC;EACpEhB,UAAU,CAACvC,OAAO,CAAEU,IAAI,IAAK;IACzB,IAAIyB,MAAM,CAAChB,MAAM,KAAK6B,SAAS,IAAIb,MAAM,CAAChB,MAAM,CAACT,IAAI,CAAC,EAAE;MACpD,MAAMwC,OAAO,GAAGC,SAAS,CAACzC,IAAI,CAAC;MAC/BgC,GAAG,GAAGY,gBAAgB,CAACZ,GAAG,EAAEQ,OAAO,CAAC;IACxC;EACJ,CAAC,CAAC;EACF,OAAOM,SAAS,CAACd,GAAG,CAAC;AACzB,CAAC;AACD,MAAMgB,cAAc,GAAGA,CAAC/C,KAAK,EAAEgD,IAAI,EAAE,CAACC,EAAE,EAAEC,EAAE,EAAEC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEC,SAAS,GAAG,KAAK;AACpF;AACAC,yBAAyB,GAAG,KAAK,KAAK;EAClC,MAAMC,QAAQ,GAAG;IACb,GAAGC,oBAAoB,CAACP,IAAI,EAAE,CAACC,EAAE,EAAEC,EAAE,EAAEC,MAAM,CAAC,CAAC;IAC/CrC,KAAK,EAAEkC,IAAI,CAAClC,KAAK,GAAGqC,MAAM;IAC1BpC,MAAM,EAAEiC,IAAI,CAACjC,MAAM,GAAGoC;EAC1B,CAAC;EACD,MAAMK,YAAY,GAAG,EAAE;EACvB,KAAK,MAAMzD,IAAI,IAAIC,KAAK,CAACyD,MAAM,CAAC,CAAC,EAAE;IAC/B,MAAM;MAAEC,QAAQ;MAAEC,UAAU,GAAG,IAAI;MAAEC,MAAM,GAAG;IAAM,CAAC,GAAG7D,IAAI;IAC5D,IAAKsD,yBAAyB,IAAI,CAACM,UAAU,IAAKC,MAAM,EAAE;MACtD;IACJ;IACA,MAAM9C,KAAK,GAAG4C,QAAQ,CAAC5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,IAAI,IAAI;IACvE,MAAM9C,MAAM,GAAG2C,QAAQ,CAAC3C,MAAM,IAAIhB,IAAI,CAACgB,MAAM,IAAIhB,IAAI,CAAC+D,aAAa,IAAI,IAAI;IAC3E,MAAMC,eAAe,GAAGC,kBAAkB,CAACV,QAAQ,EAAEW,UAAU,CAAClE,IAAI,CAAC,CAAC;IACtE,MAAMmE,IAAI,GAAG,CAACpD,KAAK,IAAI,CAAC,KAAKC,MAAM,IAAI,CAAC,CAAC;IACzC,MAAMoD,gBAAgB,GAAGf,SAAS,IAAIW,eAAe,GAAG,CAAC;IACzD,MAAMK,kBAAkB,GAAG,CAACrE,IAAI,CAACsE,SAAS,CAACC,YAAY;IACvD,MAAMC,SAAS,GAAGH,kBAAkB,IAAID,gBAAgB,IAAIJ,eAAe,IAAIG,IAAI;IACnF,IAAIK,SAAS,IAAIxE,IAAI,CAACyE,QAAQ,EAAE;MAC5BhB,YAAY,CAACjE,IAAI,CAACQ,IAAI,CAAC;IAC3B;EACJ;EACA,OAAOyD,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiB,iBAAiB,GAAGA,CAACzE,KAAK,EAAEC,KAAK,KAAK;EACxC,MAAMyE,OAAO,GAAG,IAAIvE,GAAG,CAAC,CAAC;EACzBH,KAAK,CAACX,OAAO,CAAEU,IAAI,IAAK;IACpB2E,OAAO,CAACpE,GAAG,CAACP,IAAI,CAAC9D,EAAE,CAAC;EACxB,CAAC,CAAC;EACF,OAAOgE,KAAK,CAACO,MAAM,CAAEJ,IAAI,IAAKsE,OAAO,CAACzF,GAAG,CAACmB,IAAI,CAACC,MAAM,CAAC,IAAIqE,OAAO,CAACzF,GAAG,CAACmB,IAAI,CAACG,MAAM,CAAC,CAAC;AACvF,CAAC;AACD,SAASoE,eAAeA,CAAC/C,UAAU,EAAEgD,OAAO,EAAE;EAC1C,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC9B,MAAMC,aAAa,GAAGH,OAAO,EAAE5E,KAAK,GAAG,IAAIG,GAAG,CAACyE,OAAO,CAAC5E,KAAK,CAACgF,GAAG,CAAEjF,IAAI,IAAKA,IAAI,CAAC9D,EAAE,CAAC,CAAC,GAAG,IAAI;EAC3F2F,UAAU,CAACvC,OAAO,CAAEoB,CAAC,IAAK;IACtB,MAAM8D,SAAS,GAAG9D,CAAC,CAACiD,QAAQ,CAAC5C,KAAK,IAAIL,CAAC,CAACiD,QAAQ,CAAC3C,MAAM,KAAK6D,OAAO,EAAEK,kBAAkB,IAAI,CAACxE,CAAC,CAACmD,MAAM,CAAC;IACrG,IAAIW,SAAS,KAAK,CAACQ,aAAa,IAAIA,aAAa,CAAC9F,GAAG,CAACwB,CAAC,CAACxE,EAAE,CAAC,CAAC,EAAE;MAC1D4I,YAAY,CAACK,GAAG,CAACzE,CAAC,CAACxE,EAAE,EAAEwE,CAAC,CAAC;IAC7B;EACJ,CAAC,CAAC;EACF,OAAOoE,YAAY;AACvB;AACA,eAAeM,WAAWA,CAAC;EAAEnF,KAAK;EAAEc,KAAK;EAAEC,MAAM;EAAEqE,OAAO;EAAEC,OAAO;EAAEC;AAAQ,CAAC,EAAEV,OAAO,EAAE;EACrF,IAAI5E,KAAK,CAAClB,IAAI,KAAK,CAAC,EAAE;IAClB,OAAOyG,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAChC;EACA,MAAMC,UAAU,GAAGd,eAAe,CAAC3E,KAAK,EAAE4E,OAAO,CAAC;EAClD,MAAMc,MAAM,GAAG5C,sBAAsB,CAAC2C,UAAU,CAAC;EACjD,MAAME,QAAQ,GAAGC,oBAAoB,CAACF,MAAM,EAAE5E,KAAK,EAAEC,MAAM,EAAE6D,OAAO,EAAES,OAAO,IAAIA,OAAO,EAAET,OAAO,EAAEU,OAAO,IAAIA,OAAO,EAAEV,OAAO,EAAEiB,OAAO,IAAI,GAAG,CAAC;EAC/I,MAAMT,OAAO,CAACU,WAAW,CAACH,QAAQ,EAAE;IAAEI,QAAQ,EAAEnB,OAAO,EAAEmB;EAAS,CAAC,CAAC;EACpE,OAAOR,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,qBAAqBA,CAAC;EAAEC,MAAM;EAAEC,YAAY;EAAEtE,UAAU;EAAEf,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAAEsF,UAAU;EAAEC;AAAS,CAAC,EAAE;EAC5G,MAAMrG,IAAI,GAAG6B,UAAU,CAACU,GAAG,CAAC2D,MAAM,CAAC;EACnC,MAAMI,UAAU,GAAGtG,IAAI,CAACuG,QAAQ,GAAG1E,UAAU,CAACU,GAAG,CAACvC,IAAI,CAACuG,QAAQ,CAAC,GAAGjE,SAAS;EAC5E,MAAM;IAAEjB,CAAC,EAAEmF,OAAO;IAAEjF,CAAC,EAAEkF;EAAQ,CAAC,GAAGH,UAAU,GAAGA,UAAU,CAAChC,SAAS,CAACoC,gBAAgB,GAAG;IAAErF,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EACtG,MAAML,MAAM,GAAGlB,IAAI,CAACkB,MAAM,IAAIJ,UAAU;EACxC,IAAI6F,MAAM,GAAGP,UAAU;EACvB,IAAIpG,IAAI,CAAC2G,MAAM,KAAK,QAAQ,IAAI,CAAC3G,IAAI,CAAC4G,YAAY,EAAE;IAChD,IAAI,CAACN,UAAU,EAAE;MACbD,OAAO,GAAG,KAAK,EAAE5K,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,MACI;MACD,MAAMoL,WAAW,GAAGP,UAAU,CAAC3C,QAAQ,CAAC5C,KAAK;MAC7C,MAAM+F,YAAY,GAAGR,UAAU,CAAC3C,QAAQ,CAAC3C,MAAM;MAC/C,IAAI6F,WAAW,IAAIC,YAAY,EAAE;QAC7BH,MAAM,GAAG,CACL,CAACH,OAAO,EAAEC,OAAO,CAAC,EAClB,CAACD,OAAO,GAAGK,WAAW,EAAEJ,OAAO,GAAGK,YAAY,CAAC,CAClD;MACL;IACJ;EACJ,CAAC,MACI,IAAIR,UAAU,IAAIS,kBAAkB,CAAC/G,IAAI,CAAC2G,MAAM,CAAC,EAAE;IACpDA,MAAM,GAAG,CACL,CAAC3G,IAAI,CAAC2G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,OAAO,EAAExG,IAAI,CAAC2G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGF,OAAO,CAAC,EAC1D,CAACzG,IAAI,CAAC2G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,OAAO,EAAExG,IAAI,CAAC2G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGF,OAAO,CAAC,CAC7D;EACL;EACA,MAAMC,gBAAgB,GAAGK,kBAAkB,CAACJ,MAAM,CAAC,GAC7CK,aAAa,CAACb,YAAY,EAAEQ,MAAM,EAAE3G,IAAI,CAAC2D,QAAQ,CAAC,GAClDwC,YAAY;EAClB,IAAInG,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,KAAKuB,SAAS,IAAItC,IAAI,CAAC2D,QAAQ,CAAC3C,MAAM,KAAKsB,SAAS,EAAE;IACzE+D,OAAO,GAAG,KAAK,EAAE5K,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACjD;EACA,OAAO;IACH6F,QAAQ,EAAE;MACND,CAAC,EAAEqF,gBAAgB,CAACrF,CAAC,GAAGmF,OAAO,GAAG,CAACxG,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,IAAI,CAAC,IAAIG,MAAM,CAAC,CAAC,CAAC;MACxEK,CAAC,EAAEmF,gBAAgB,CAACnF,CAAC,GAAGkF,OAAO,GAAG,CAACzG,IAAI,CAAC2D,QAAQ,CAAC3C,MAAM,IAAI,CAAC,IAAIE,MAAM,CAAC,CAAC;IAC5E,CAAC;IACDwF;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeO,mBAAmBA,CAAC;EAAEC,aAAa,GAAG,EAAE;EAAEC,aAAa,GAAG,EAAE;EAAElH,KAAK;EAAEC,KAAK;EAAEkH;AAAgB,CAAC,EAAE;EAC1G,MAAMzC,OAAO,GAAG,IAAIvE,GAAG,CAAC8G,aAAa,CAACjC,GAAG,CAAEjF,IAAI,IAAKA,IAAI,CAAC9D,EAAE,CAAC,CAAC;EAC7D,MAAMmL,aAAa,GAAG,EAAE;EACxB,KAAK,MAAMrH,IAAI,IAAIC,KAAK,EAAE;IACtB,IAAID,IAAI,CAACsH,SAAS,KAAK,KAAK,EAAE;MAC1B;IACJ;IACA,MAAMC,UAAU,GAAG5C,OAAO,CAACzF,GAAG,CAACc,IAAI,CAAC9D,EAAE,CAAC;IACvC,MAAMsL,SAAS,GAAG,CAACD,UAAU,IAAIvH,IAAI,CAACuG,QAAQ,IAAIc,aAAa,CAACI,IAAI,CAAE/G,CAAC,IAAKA,CAAC,CAACxE,EAAE,KAAK8D,IAAI,CAACuG,QAAQ,CAAC;IACnG,IAAIgB,UAAU,IAAIC,SAAS,EAAE;MACzBH,aAAa,CAAC7H,IAAI,CAACQ,IAAI,CAAC;IAC5B;EACJ;EACA,MAAM0H,OAAO,GAAG,IAAItH,GAAG,CAAC+G,aAAa,CAAClC,GAAG,CAAE5E,IAAI,IAAKA,IAAI,CAACnE,EAAE,CAAC,CAAC;EAC7D,MAAMyL,cAAc,GAAGzH,KAAK,CAACO,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAACiH,SAAS,KAAK,KAAK,CAAC;EACvE,MAAMM,cAAc,GAAGlD,iBAAiB,CAAC2C,aAAa,EAAEM,cAAc,CAAC;EACvE,MAAME,aAAa,GAAGD,cAAc;EACpC,KAAK,MAAMvH,IAAI,IAAIsH,cAAc,EAAE;IAC/B,MAAMJ,UAAU,GAAGG,OAAO,CAACxI,GAAG,CAACmB,IAAI,CAACnE,EAAE,CAAC;IACvC,IAAIqL,UAAU,IAAI,CAACM,aAAa,CAACJ,IAAI,CAAEK,CAAC,IAAKA,CAAC,CAAC5L,EAAE,KAAKmE,IAAI,CAACnE,EAAE,CAAC,EAAE;MAC5D2L,aAAa,CAACrI,IAAI,CAACa,IAAI,CAAC;IAC5B;EACJ;EACA,IAAI,CAAC+G,cAAc,EAAE;IACjB,OAAO;MACHlH,KAAK,EAAE2H,aAAa;MACpB5H,KAAK,EAAEoH;IACX,CAAC;EACL;EACA,MAAMU,oBAAoB,GAAG,MAAMX,cAAc,CAAC;IAC9CnH,KAAK,EAAEoH,aAAa;IACpBnH,KAAK,EAAE2H;EACX,CAAC,CAAC;EACF,IAAI,OAAOE,oBAAoB,KAAK,SAAS,EAAE;IAC3C,OAAOA,oBAAoB,GAAG;MAAE7H,KAAK,EAAE2H,aAAa;MAAE5H,KAAK,EAAEoH;IAAc,CAAC,GAAG;MAAEnH,KAAK,EAAE,EAAE;MAAED,KAAK,EAAE;IAAG,CAAC;EAC3G;EACA,OAAO8H,oBAAoB;AAC/B;AAEA,MAAMC,KAAK,GAAGA,CAACC,GAAG,EAAEC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG,CAAC,KAAKC,IAAI,CAACF,GAAG,CAACE,IAAI,CAACD,GAAG,CAACF,GAAG,EAAEC,GAAG,CAAC,EAAEC,GAAG,CAAC;AAC1E,MAAMnB,aAAa,GAAGA,CAAC1F,QAAQ,GAAG;EAAED,CAAC,EAAE,CAAC;EAAEE,CAAC,EAAE;AAAE,CAAC,EAAEoF,MAAM,EAAE0B,UAAU,MAAM;EACtEhH,CAAC,EAAE2G,KAAK,CAAC1G,QAAQ,CAACD,CAAC,EAAEsF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI0B,UAAU,EAAEtH,KAAK,IAAI,CAAC,CAAC,CAAC;EAC3EQ,CAAC,EAAEyG,KAAK,CAAC1G,QAAQ,CAACC,CAAC,EAAEoF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI0B,UAAU,EAAErH,MAAM,IAAI,CAAC,CAAC;AAC/E,CAAC,CAAC;AACF,SAASsH,qBAAqBA,CAACC,aAAa,EAAEC,eAAe,EAAEC,MAAM,EAAE;EACnE,MAAM;IAAE1H,KAAK,EAAE8F,WAAW;IAAE7F,MAAM,EAAE8F;EAAa,CAAC,GAAG7F,iBAAiB,CAACwH,MAAM,CAAC;EAC9E,MAAM;IAAEpH,CAAC,EAAEmF,OAAO;IAAEjF,CAAC,EAAEkF;EAAQ,CAAC,GAAGgC,MAAM,CAACnE,SAAS,CAACoC,gBAAgB;EACpE,OAAOM,aAAa,CAACuB,aAAa,EAAE,CAChC,CAAC/B,OAAO,EAAEC,OAAO,CAAC,EAClB,CAACD,OAAO,GAAGK,WAAW,EAAEJ,OAAO,GAAGK,YAAY,CAAC,CAClD,EAAE0B,eAAe,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,mBAAmB,GAAGA,CAACC,KAAK,EAAET,GAAG,EAAEC,GAAG,KAAK;EAC7C,IAAIQ,KAAK,GAAGT,GAAG,EAAE;IACb,OAAOF,KAAK,CAACI,IAAI,CAACQ,GAAG,CAACD,KAAK,GAAGT,GAAG,CAAC,EAAE,CAAC,EAAEA,GAAG,CAAC,GAAGA,GAAG;EACrD,CAAC,MACI,IAAIS,KAAK,GAAGR,GAAG,EAAE;IAClB,OAAO,CAACH,KAAK,CAACI,IAAI,CAACQ,GAAG,CAACD,KAAK,GAAGR,GAAG,CAAC,EAAE,CAAC,EAAED,GAAG,CAAC,GAAGA,GAAG;EACtD;EACA,OAAO,CAAC;AACZ,CAAC;AACD,MAAMW,WAAW,GAAGA,CAACC,GAAG,EAAEnD,MAAM,EAAEoD,KAAK,GAAG,EAAE,EAAEC,QAAQ,GAAG,EAAE,KAAK;EAC5D,MAAMC,SAAS,GAAGP,mBAAmB,CAACI,GAAG,CAACzH,CAAC,EAAE2H,QAAQ,EAAErD,MAAM,CAAC5E,KAAK,GAAGiI,QAAQ,CAAC,GAAGD,KAAK;EACvF,MAAMG,SAAS,GAAGR,mBAAmB,CAACI,GAAG,CAACvH,CAAC,EAAEyH,QAAQ,EAAErD,MAAM,CAAC3E,MAAM,GAAGgI,QAAQ,CAAC,GAAGD,KAAK;EACxF,OAAO,CAACE,SAAS,EAAEC,SAAS,CAAC;AACjC,CAAC;AACD,MAAMtG,gBAAgB,GAAGA,CAACuG,IAAI,EAAEC,IAAI,MAAM;EACtC/H,CAAC,EAAE+G,IAAI,CAACF,GAAG,CAACiB,IAAI,CAAC9H,CAAC,EAAE+H,IAAI,CAAC/H,CAAC,CAAC;EAC3BE,CAAC,EAAE6G,IAAI,CAACF,GAAG,CAACiB,IAAI,CAAC5H,CAAC,EAAE6H,IAAI,CAAC7H,CAAC,CAAC;EAC3BmB,EAAE,EAAE0F,IAAI,CAACD,GAAG,CAACgB,IAAI,CAACzG,EAAE,EAAE0G,IAAI,CAAC1G,EAAE,CAAC;EAC9BC,EAAE,EAAEyF,IAAI,CAACD,GAAG,CAACgB,IAAI,CAACxG,EAAE,EAAEyG,IAAI,CAACzG,EAAE;AACjC,CAAC,CAAC;AACF,MAAM0G,SAAS,GAAGA,CAAC;EAAEhI,CAAC;EAAEE,CAAC;EAAER,KAAK;EAAEC;AAAO,CAAC,MAAM;EAC5CK,CAAC;EACDE,CAAC;EACDmB,EAAE,EAAErB,CAAC,GAAGN,KAAK;EACb4B,EAAE,EAAEpB,CAAC,GAAGP;AACZ,CAAC,CAAC;AACF,MAAM8B,SAAS,GAAGA,CAAC;EAAEzB,CAAC;EAAEE,CAAC;EAAEmB,EAAE;EAAEC;AAAG,CAAC,MAAM;EACrCtB,CAAC;EACDE,CAAC;EACDR,KAAK,EAAE2B,EAAE,GAAGrB,CAAC;EACbL,MAAM,EAAE2B,EAAE,GAAGpB;AACjB,CAAC,CAAC;AACF,MAAM2C,UAAU,GAAGA,CAAClE,IAAI,EAAEc,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;EAC9C,MAAM;IAAEO,CAAC;IAAEE;EAAE,CAAC,GAAGzB,kBAAkB,CAACE,IAAI,CAAC,GACnCA,IAAI,CAACsE,SAAS,CAACoC,gBAAgB,GAC/B7F,yBAAyB,CAACb,IAAI,EAAEc,UAAU,CAAC;EACjD,OAAO;IACHO,CAAC;IACDE,CAAC;IACDR,KAAK,EAAEf,IAAI,CAAC2D,QAAQ,EAAE5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,IAAI,CAAC;IACnE9C,MAAM,EAAEhB,IAAI,CAAC2D,QAAQ,EAAE3C,MAAM,IAAIhB,IAAI,CAACgB,MAAM,IAAIhB,IAAI,CAAC+D,aAAa,IAAI;EAC1E,CAAC;AACL,CAAC;AACD,MAAMtB,SAAS,GAAGA,CAACzC,IAAI,EAAEc,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;EAC7C,MAAM;IAAEO,CAAC;IAAEE;EAAE,CAAC,GAAGzB,kBAAkB,CAACE,IAAI,CAAC,GACnCA,IAAI,CAACsE,SAAS,CAACoC,gBAAgB,GAC/B7F,yBAAyB,CAACb,IAAI,EAAEc,UAAU,CAAC;EACjD,OAAO;IACHO,CAAC;IACDE,CAAC;IACDmB,EAAE,EAAErB,CAAC,IAAIrB,IAAI,CAAC2D,QAAQ,EAAE5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,IAAI,CAAC,CAAC;IACtEnB,EAAE,EAAEpB,CAAC,IAAIvB,IAAI,CAAC2D,QAAQ,EAAE3C,MAAM,IAAIhB,IAAI,CAACgB,MAAM,IAAIhB,IAAI,CAAC+D,aAAa,IAAI,CAAC;EAC5E,CAAC;AACL,CAAC;AACD,MAAMuF,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK1G,SAAS,CAACF,gBAAgB,CAACyG,SAAS,CAACE,KAAK,CAAC,EAAEF,SAAS,CAACG,KAAK,CAAC,CAAC,CAAC;AAC1G,MAAMvF,kBAAkB,GAAGA,CAACwF,KAAK,EAAEC,KAAK,KAAK;EACzC,MAAMC,QAAQ,GAAGvB,IAAI,CAACD,GAAG,CAAC,CAAC,EAAEC,IAAI,CAACF,GAAG,CAACuB,KAAK,CAACpI,CAAC,GAAGoI,KAAK,CAAC1I,KAAK,EAAE2I,KAAK,CAACrI,CAAC,GAAGqI,KAAK,CAAC3I,KAAK,CAAC,GAAGqH,IAAI,CAACD,GAAG,CAACsB,KAAK,CAACpI,CAAC,EAAEqI,KAAK,CAACrI,CAAC,CAAC,CAAC;EACjH,MAAMuI,QAAQ,GAAGxB,IAAI,CAACD,GAAG,CAAC,CAAC,EAAEC,IAAI,CAACF,GAAG,CAACuB,KAAK,CAAClI,CAAC,GAAGkI,KAAK,CAACzI,MAAM,EAAE0I,KAAK,CAACnI,CAAC,GAAGmI,KAAK,CAAC1I,MAAM,CAAC,GAAGoH,IAAI,CAACD,GAAG,CAACsB,KAAK,CAAClI,CAAC,EAAEmI,KAAK,CAACnI,CAAC,CAAC,CAAC;EACnH,OAAO6G,IAAI,CAACyB,IAAI,CAACF,QAAQ,GAAGC,QAAQ,CAAC;AACzC,CAAC;AACD;AACA,MAAME,YAAY,GAAIC,GAAG,IAAKC,SAAS,CAACD,GAAG,CAAChJ,KAAK,CAAC,IAAIiJ,SAAS,CAACD,GAAG,CAAC/I,MAAM,CAAC,IAAIgJ,SAAS,CAACD,GAAG,CAAC1I,CAAC,CAAC,IAAI2I,SAAS,CAACD,GAAG,CAACxI,CAAC,CAAC;AACnH;AACA,MAAMyI,SAAS,GAAItJ,CAAC,IAAK,CAACuJ,KAAK,CAACvJ,CAAC,CAAC,IAAIwJ,QAAQ,CAACxJ,CAAC,CAAC;AACjD;AACA,MAAMyJ,OAAO,GAAGA,CAACjO,EAAE,EAAEkO,OAAO,KAAK;EAC7B,IAAI1I,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IACxCE,OAAO,CAACC,IAAI,CAAC,iBAAiBqI,OAAO,sCAAsClO,EAAE,EAAE,CAAC;EACpF;AACJ,CAAC;AACD,MAAMmO,YAAY,GAAGA,CAAC/I,QAAQ,EAAEgJ,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;EAClD,OAAO;IACHjJ,CAAC,EAAEiJ,QAAQ,CAAC,CAAC,CAAC,GAAGlC,IAAI,CAACmC,KAAK,CAACjJ,QAAQ,CAACD,CAAC,GAAGiJ,QAAQ,CAAC,CAAC,CAAC,CAAC;IACrD/I,CAAC,EAAE+I,QAAQ,CAAC,CAAC,CAAC,GAAGlC,IAAI,CAACmC,KAAK,CAACjJ,QAAQ,CAACC,CAAC,GAAG+I,QAAQ,CAAC,CAAC,CAAC;EACxD,CAAC;AACL,CAAC;AACD,MAAM9G,oBAAoB,GAAGA,CAAC;EAAEnC,CAAC;EAAEE;AAAE,CAAC,EAAE,CAAC2B,EAAE,EAAEC,EAAE,EAAEC,MAAM,CAAC,EAAEoH,UAAU,GAAG,KAAK,EAAEF,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;EAChG,MAAMhJ,QAAQ,GAAG;IACbD,CAAC,EAAE,CAACA,CAAC,GAAG6B,EAAE,IAAIE,MAAM;IACpB7B,CAAC,EAAE,CAACA,CAAC,GAAG4B,EAAE,IAAIC;EAClB,CAAC;EACD,OAAOoH,UAAU,GAAGH,YAAY,CAAC/I,QAAQ,EAAEgJ,QAAQ,CAAC,GAAGhJ,QAAQ;AACnE,CAAC;AACD,MAAMmJ,oBAAoB,GAAGA,CAAC;EAAEpJ,CAAC;EAAEE;AAAE,CAAC,EAAE,CAAC2B,EAAE,EAAEC,EAAE,EAAEC,MAAM,CAAC,KAAK;EACzD,OAAO;IACH/B,CAAC,EAAEA,CAAC,GAAG+B,MAAM,GAAGF,EAAE;IAClB3B,CAAC,EAAEA,CAAC,GAAG6B,MAAM,GAAGD;EACpB,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuH,YAAYA,CAAC5E,OAAO,EAAEF,QAAQ,EAAE;EACrC,IAAI,OAAOE,OAAO,KAAK,QAAQ,EAAE;IAC7B,OAAOsC,IAAI,CAACuC,KAAK,CAAC,CAAC/E,QAAQ,GAAGA,QAAQ,IAAI,CAAC,GAAGE,OAAO,CAAC,IAAI,GAAG,CAAC;EAClE;EACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAAC8E,QAAQ,CAAC,IAAI,CAAC,EAAE;IACvD,MAAMC,YAAY,GAAGC,UAAU,CAAChF,OAAO,CAAC;IACxC,IAAI,CAAC5I,MAAM,CAAC+M,KAAK,CAACY,YAAY,CAAC,EAAE;MAC7B,OAAOzC,IAAI,CAACuC,KAAK,CAACE,YAAY,CAAC;IACnC;EACJ;EACA,IAAI,OAAO/E,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAAC8E,QAAQ,CAAC,GAAG,CAAC,EAAE;IACtD,MAAMC,YAAY,GAAGC,UAAU,CAAChF,OAAO,CAAC;IACxC,IAAI,CAAC5I,MAAM,CAAC+M,KAAK,CAACY,YAAY,CAAC,EAAE;MAC7B,OAAOzC,IAAI,CAACuC,KAAK,CAAC/E,QAAQ,GAAGiF,YAAY,GAAG,IAAI,CAAC;IACrD;EACJ;EACA/I,OAAO,CAACiJ,KAAK,CAAC,mCAAmCjF,OAAO,gFAAgF,CAAC;EACzI,OAAO,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkF,aAAaA,CAAClF,OAAO,EAAE/E,KAAK,EAAEC,MAAM,EAAE;EAC3C,IAAI,OAAO8E,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC5D,MAAMmF,QAAQ,GAAGP,YAAY,CAAC5E,OAAO,EAAE9E,MAAM,CAAC;IAC9C,MAAMkK,QAAQ,GAAGR,YAAY,CAAC5E,OAAO,EAAE/E,KAAK,CAAC;IAC7C,OAAO;MACHoK,GAAG,EAAEF,QAAQ;MACbG,KAAK,EAAEF,QAAQ;MACfG,MAAM,EAAEJ,QAAQ;MAChBK,IAAI,EAAEJ,QAAQ;MACd7J,CAAC,EAAE6J,QAAQ,GAAG,CAAC;MACf3J,CAAC,EAAE0J,QAAQ,GAAG;IAClB,CAAC;EACL;EACA,IAAI,OAAOnF,OAAO,KAAK,QAAQ,EAAE;IAC7B,MAAMqF,GAAG,GAAGT,YAAY,CAAC5E,OAAO,CAACqF,GAAG,IAAIrF,OAAO,CAACvE,CAAC,IAAI,CAAC,EAAEP,MAAM,CAAC;IAC/D,MAAMqK,MAAM,GAAGX,YAAY,CAAC5E,OAAO,CAACuF,MAAM,IAAIvF,OAAO,CAACvE,CAAC,IAAI,CAAC,EAAEP,MAAM,CAAC;IACrE,MAAMsK,IAAI,GAAGZ,YAAY,CAAC5E,OAAO,CAACwF,IAAI,IAAIxF,OAAO,CAACzE,CAAC,IAAI,CAAC,EAAEN,KAAK,CAAC;IAChE,MAAMqK,KAAK,GAAGV,YAAY,CAAC5E,OAAO,CAACsF,KAAK,IAAItF,OAAO,CAACzE,CAAC,IAAI,CAAC,EAAEN,KAAK,CAAC;IAClE,OAAO;MAAEoK,GAAG;MAAEC,KAAK;MAAEC,MAAM;MAAEC,IAAI;MAAEjK,CAAC,EAAEiK,IAAI,GAAGF,KAAK;MAAE7J,CAAC,EAAE4J,GAAG,GAAGE;IAAO,CAAC;EACzE;EACA,OAAO;IAAEF,GAAG,EAAE,CAAC;IAAEC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,IAAI,EAAE,CAAC;IAAEjK,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgK,wBAAwBA,CAAC5F,MAAM,EAAEtE,CAAC,EAAEE,CAAC,EAAEjG,IAAI,EAAEyF,KAAK,EAAEC,MAAM,EAAE;EACjE,MAAM;IAAEK,CAAC,EAAEiK,IAAI;IAAE/J,CAAC,EAAE4J;EAAI,CAAC,GAAGV,oBAAoB,CAAC9E,MAAM,EAAE,CAACtE,CAAC,EAAEE,CAAC,EAAEjG,IAAI,CAAC,CAAC;EACtE,MAAM;IAAE+F,CAAC,EAAEmK,UAAU;IAAEjK,CAAC,EAAEkK;EAAY,CAAC,GAAGhB,oBAAoB,CAAC;IAAEpJ,CAAC,EAAEsE,MAAM,CAACtE,CAAC,GAAGsE,MAAM,CAAC5E,KAAK;IAAEQ,CAAC,EAAEoE,MAAM,CAACpE,CAAC,GAAGoE,MAAM,CAAC3E;EAAO,CAAC,EAAE,CAACK,CAAC,EAAEE,CAAC,EAAEjG,IAAI,CAAC,CAAC;EACzI,MAAM8P,KAAK,GAAGrK,KAAK,GAAGyK,UAAU;EAChC,MAAMH,MAAM,GAAGrK,MAAM,GAAGyK,WAAW;EACnC,OAAO;IACHH,IAAI,EAAElD,IAAI,CAACuC,KAAK,CAACW,IAAI,CAAC;IACtBH,GAAG,EAAE/C,IAAI,CAACuC,KAAK,CAACQ,GAAG,CAAC;IACpBC,KAAK,EAAEhD,IAAI,CAACuC,KAAK,CAACS,KAAK,CAAC;IACxBC,MAAM,EAAEjD,IAAI,CAACuC,KAAK,CAACU,MAAM;EAC7B,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMxF,oBAAoB,GAAGA,CAACF,MAAM,EAAE5E,KAAK,EAAEC,MAAM,EAAEsE,OAAO,EAAEC,OAAO,EAAEO,OAAO,KAAK;EAC/E;EACA,MAAM4F,CAAC,GAAGV,aAAa,CAAClF,OAAO,EAAE/E,KAAK,EAAEC,MAAM,CAAC;EAC/C,MAAM2K,KAAK,GAAG,CAAC5K,KAAK,GAAG2K,CAAC,CAACrK,CAAC,IAAIsE,MAAM,CAAC5E,KAAK;EAC1C,MAAM6K,KAAK,GAAG,CAAC5K,MAAM,GAAG0K,CAAC,CAACnK,CAAC,IAAIoE,MAAM,CAAC3E,MAAM;EAC5C;EACA,MAAM1F,IAAI,GAAG8M,IAAI,CAACF,GAAG,CAACyD,KAAK,EAAEC,KAAK,CAAC;EACnC,MAAMC,WAAW,GAAG7D,KAAK,CAAC1M,IAAI,EAAEgK,OAAO,EAAEC,OAAO,CAAC;EACjD,MAAMuG,aAAa,GAAGnG,MAAM,CAACtE,CAAC,GAAGsE,MAAM,CAAC5E,KAAK,GAAG,CAAC;EACjD,MAAMgL,aAAa,GAAGpG,MAAM,CAACpE,CAAC,GAAGoE,MAAM,CAAC3E,MAAM,GAAG,CAAC;EAClD,MAAMK,CAAC,GAAGN,KAAK,GAAG,CAAC,GAAG+K,aAAa,GAAGD,WAAW;EACjD,MAAMtK,CAAC,GAAGP,MAAM,GAAG,CAAC,GAAG+K,aAAa,GAAGF,WAAW;EAClD;EACA,MAAMG,UAAU,GAAGT,wBAAwB,CAAC5F,MAAM,EAAEtE,CAAC,EAAEE,CAAC,EAAEsK,WAAW,EAAE9K,KAAK,EAAEC,MAAM,CAAC;EACrF;EACA,MAAMiL,MAAM,GAAG;IACXX,IAAI,EAAElD,IAAI,CAACF,GAAG,CAAC8D,UAAU,CAACV,IAAI,GAAGI,CAAC,CAACJ,IAAI,EAAE,CAAC,CAAC;IAC3CH,GAAG,EAAE/C,IAAI,CAACF,GAAG,CAAC8D,UAAU,CAACb,GAAG,GAAGO,CAAC,CAACP,GAAG,EAAE,CAAC,CAAC;IACxCC,KAAK,EAAEhD,IAAI,CAACF,GAAG,CAAC8D,UAAU,CAACZ,KAAK,GAAGM,CAAC,CAACN,KAAK,EAAE,CAAC,CAAC;IAC9CC,MAAM,EAAEjD,IAAI,CAACF,GAAG,CAAC8D,UAAU,CAACX,MAAM,GAAGK,CAAC,CAACL,MAAM,EAAE,CAAC;EACpD,CAAC;EACD,OAAO;IACHhK,CAAC,EAAEA,CAAC,GAAG4K,MAAM,CAACX,IAAI,GAAGW,MAAM,CAACb,KAAK;IACjC7J,CAAC,EAAEA,CAAC,GAAG0K,MAAM,CAACd,GAAG,GAAGc,MAAM,CAACZ,MAAM;IACjC/P,IAAI,EAAEuQ;EACV,CAAC;AACL,CAAC;AACD,MAAMK,OAAO,GAAGA,CAAA,KAAM,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAEC,SAAS,EAAEC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC;AACnG,SAAStF,kBAAkBA,CAACJ,MAAM,EAAE;EAChC,OAAOA,MAAM,KAAKrE,SAAS,IAAIqE,MAAM,KAAK,QAAQ;AACtD;AACA,SAAS1F,iBAAiBA,CAACjB,IAAI,EAAE;EAC7B,OAAO;IACHe,KAAK,EAAEf,IAAI,CAAC2D,QAAQ,EAAE5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,IAAI,CAAC;IACnE9C,MAAM,EAAEhB,IAAI,CAAC2D,QAAQ,EAAE3C,MAAM,IAAIhB,IAAI,CAACgB,MAAM,IAAIhB,IAAI,CAAC+D,aAAa,IAAI;EAC1E,CAAC;AACL;AACA,SAASuI,iBAAiBA,CAACtM,IAAI,EAAE;EAC7B,OAAQ,CAACA,IAAI,CAAC2D,QAAQ,EAAE5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,MAAMxB,SAAS,IAC3E,CAACtC,IAAI,CAAC2D,QAAQ,EAAE3C,MAAM,IAAIhB,IAAI,CAACgB,MAAM,IAAIhB,IAAI,CAAC+D,aAAa,MAAMzB,SAAS;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiK,wBAAwBA,CAACjL,QAAQ,EAAE+G,UAAU,GAAG;EAAEtH,KAAK,EAAE,CAAC;EAAEC,MAAM,EAAE;AAAE,CAAC,EAAEuF,QAAQ,EAAE1E,UAAU,EAAEf,UAAU,EAAE;EAChH,MAAM4F,gBAAgB,GAAG;IAAE,GAAGpF;EAAS,CAAC;EACxC,MAAMmH,MAAM,GAAG5G,UAAU,CAACU,GAAG,CAACgE,QAAQ,CAAC;EACvC,IAAIkC,MAAM,EAAE;IACR,MAAMvH,MAAM,GAAGuH,MAAM,CAACvH,MAAM,IAAIJ,UAAU;IAC1C4F,gBAAgB,CAACrF,CAAC,IAAIoH,MAAM,CAACnE,SAAS,CAACoC,gBAAgB,CAACrF,CAAC,GAAG,CAACgH,UAAU,CAACtH,KAAK,IAAI,CAAC,IAAIG,MAAM,CAAC,CAAC,CAAC;IAC/FwF,gBAAgB,CAACnF,CAAC,IAAIkH,MAAM,CAACnE,SAAS,CAACoC,gBAAgB,CAACnF,CAAC,GAAG,CAAC8G,UAAU,CAACrH,MAAM,IAAI,CAAC,IAAIE,MAAM,CAAC,CAAC,CAAC;EACpG;EACA,OAAOwF,gBAAgB;AAC3B;AACA,SAAS8F,YAAYA,CAAC3N,CAAC,EAAEC,CAAC,EAAE;EACxB,IAAID,CAAC,CAACE,IAAI,KAAKD,CAAC,CAACC,IAAI,EAAE;IACnB,OAAO,KAAK;EAChB;EACA,KAAK,MAAM0N,IAAI,IAAI5N,CAAC,EAAE;IAClB,IAAI,CAACC,CAAC,CAACI,GAAG,CAACuN,IAAI,CAAC,EAAE;MACd,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAA,EAAG;EACrB,IAAIjH,OAAO;EACX,IAAIkH,MAAM;EACV,MAAMC,OAAO,GAAG,IAAIpH,OAAO,CAAC,CAACqH,GAAG,EAAEC,GAAG,KAAK;IACtCrH,OAAO,GAAGoH,GAAG;IACbF,MAAM,GAAGG,GAAG;EAChB,CAAC,CAAC;EACF,OAAO;IAAEF,OAAO;IAAEnH,OAAO;IAAEkH;EAAO,CAAC;AACvC;AAEA,SAASI,kBAAkBA,CAACC,KAAK,EAAE;EAAE1C,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAAEE,UAAU,GAAG,KAAK;EAAEyC,SAAS;EAAEC;AAAgB,CAAC,EAAE;EACtG,MAAM;IAAE7L,CAAC;IAAEE;EAAE,CAAC,GAAG4L,gBAAgB,CAACH,KAAK,CAAC;EACxC,MAAMI,UAAU,GAAG5J,oBAAoB,CAAC;IAAEnC,CAAC,EAAEA,CAAC,IAAI6L,eAAe,EAAE5B,IAAI,IAAI,CAAC,CAAC;IAAE/J,CAAC,EAAEA,CAAC,IAAI2L,eAAe,EAAE/B,GAAG,IAAI,CAAC;EAAE,CAAC,EAAE8B,SAAS,CAAC;EAC/H,MAAM;IAAE5L,CAAC,EAAEgM,QAAQ;IAAE9L,CAAC,EAAE+L;EAAS,CAAC,GAAG9C,UAAU,GAAGH,YAAY,CAAC+C,UAAU,EAAE9C,QAAQ,CAAC,GAAG8C,UAAU;EACjG;EACA,OAAO;IACHC,QAAQ;IACRC,QAAQ;IACR,GAAGF;EACP,CAAC;AACL;AACA,MAAMG,aAAa,GAAIvN,IAAI,KAAM;EAC7Be,KAAK,EAAEf,IAAI,CAACwN,WAAW;EACvBxM,MAAM,EAAEhB,IAAI,CAACyN;AACjB,CAAC,CAAC;AACF,MAAMC,iBAAiB,GAAI9N,OAAO,IAAKA,OAAO,EAAE+N,WAAW,GAAG,CAAC,IAAIC,MAAM,EAAEC,QAAQ;AACnF,MAAMC,SAAS,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC;AACjD,SAASC,cAAcA,CAACf,KAAK,EAAE;EAC3B;EACA,MAAMxM,MAAM,GAAIwM,KAAK,CAACgB,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIhB,KAAK,CAACxM,MAAO;EAC5D,IAAIA,MAAM,EAAE3E,QAAQ,KAAK,CAAC,CAAC,yBACvB,OAAO,KAAK;EAChB,MAAMoS,OAAO,GAAGH,SAAS,CAACI,QAAQ,CAAC1N,MAAM,CAAC2N,QAAQ,CAAC,IAAI3N,MAAM,CAAC4N,YAAY,CAAC,iBAAiB,CAAC;EAC7F;EACA,OAAOH,OAAO,IAAI,CAAC,CAACzN,MAAM,CAAC6N,OAAO,CAAC,QAAQ,CAAC;AAChD;AACA,MAAMC,YAAY,GAAItB,KAAK,IAAK,SAAS,IAAIA,KAAK;AAClD,MAAMG,gBAAgB,GAAGA,CAACH,KAAK,EAAErH,MAAM,KAAK;EACxC,MAAM4I,OAAO,GAAGD,YAAY,CAACtB,KAAK,CAAC;EACnC,MAAMwB,IAAI,GAAGD,OAAO,GAAGvB,KAAK,CAACyB,OAAO,GAAGzB,KAAK,CAAC0B,OAAO,GAAG,CAAC,CAAC,CAACD,OAAO;EACjE,MAAME,IAAI,GAAGJ,OAAO,GAAGvB,KAAK,CAAC4B,OAAO,GAAG5B,KAAK,CAAC0B,OAAO,GAAG,CAAC,CAAC,CAACE,OAAO;EACjE,OAAO;IACHvN,CAAC,EAAEmN,IAAI,IAAI7I,MAAM,EAAE2F,IAAI,IAAI,CAAC,CAAC;IAC7B/J,CAAC,EAAEoN,IAAI,IAAIhJ,MAAM,EAAEwF,GAAG,IAAI,CAAC;EAC/B,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAM0D,eAAe,GAAGA,CAACzS,IAAI,EAAE0S,WAAW,EAAEC,UAAU,EAAEzT,IAAI,EAAE4K,MAAM,KAAK;EACrE,MAAM8I,OAAO,GAAGF,WAAW,CAACG,gBAAgB,CAAC,IAAI7S,IAAI,EAAE,CAAC;EACxD,IAAI,CAAC4S,OAAO,IAAI,CAACA,OAAO,CAACvP,MAAM,EAAE;IAC7B,OAAO,IAAI;EACf;EACA,OAAOyP,KAAK,CAACtR,IAAI,CAACoR,OAAO,CAAC,CAAC/J,GAAG,CAAEkK,MAAM,IAAK;IACvC,MAAM5K,YAAY,GAAG4K,MAAM,CAACC,qBAAqB,CAAC,CAAC;IACnD,OAAO;MACHlT,EAAE,EAAEiT,MAAM,CAACE,YAAY,CAAC,eAAe,CAAC;MACxCjT,IAAI;MACJ8J,MAAM;MACN5E,QAAQ,EAAE6N,MAAM,CAACE,YAAY,CAAC,gBAAgB,CAAC;MAC/ChO,CAAC,EAAE,CAACkD,YAAY,CAAC+G,IAAI,GAAGyD,UAAU,CAACzD,IAAI,IAAIhQ,IAAI;MAC/CiG,CAAC,EAAE,CAACgD,YAAY,CAAC4G,GAAG,GAAG4D,UAAU,CAAC5D,GAAG,IAAI7P,IAAI;MAC7C,GAAGiS,aAAa,CAAC4B,MAAM;IAC3B,CAAC;EACL,CAAC,CAAC;AACN,CAAC;AAED,SAASG,mBAAmBA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC,OAAO;EAAEC,OAAO;EAAEC,cAAc;EAAEC,cAAc;EAAEC,cAAc;EAAEC;AAAgB,CAAC,EAAE;EAClI;AACJ;AACA;AACA;EACI,MAAMC,OAAO,GAAGR,OAAO,GAAG,KAAK,GAAGI,cAAc,GAAG,KAAK,GAAGE,cAAc,GAAG,KAAK,GAAGJ,OAAO,GAAG,KAAK;EACnG,MAAMO,OAAO,GAAGR,OAAO,GAAG,KAAK,GAAGI,cAAc,GAAG,KAAK,GAAGE,cAAc,GAAG,KAAK,GAAGJ,OAAO,GAAG,KAAK;EACnG,MAAMvO,OAAO,GAAGiH,IAAI,CAACQ,GAAG,CAACmH,OAAO,GAAGR,OAAO,CAAC;EAC3C,MAAMnO,OAAO,GAAGgH,IAAI,CAACQ,GAAG,CAACoH,OAAO,GAAGR,OAAO,CAAC;EAC3C,OAAO,CAACO,OAAO,EAAEC,OAAO,EAAE7O,OAAO,EAAEC,OAAO,CAAC;AAC/C;AACA,SAAS6O,sBAAsBA,CAACjH,QAAQ,EAAEkH,SAAS,EAAE;EACjD,IAAIlH,QAAQ,IAAI,CAAC,EAAE;IACf,OAAO,GAAG,GAAGA,QAAQ;EACzB;EACA,OAAOkH,SAAS,GAAG,EAAE,GAAG9H,IAAI,CAAC+H,IAAI,CAAC,CAACnH,QAAQ,CAAC;AAChD;AACA,SAASoH,uBAAuBA,CAAC;EAAEtH,GAAG;EAAEuH,EAAE;EAAEC,EAAE;EAAE5N,EAAE;EAAEC,EAAE;EAAE4N;AAAE,CAAC,EAAE;EACzD,QAAQzH,GAAG;IACP,KAAKxK,QAAQ,CAACE,IAAI;MACd,OAAO,CAAC6R,EAAE,GAAGJ,sBAAsB,CAACI,EAAE,GAAG3N,EAAE,EAAE6N,CAAC,CAAC,EAAED,EAAE,CAAC;IACxD,KAAKhS,QAAQ,CAACG,KAAK;MACf,OAAO,CAAC4R,EAAE,GAAGJ,sBAAsB,CAACvN,EAAE,GAAG2N,EAAE,EAAEE,CAAC,CAAC,EAAED,EAAE,CAAC;IACxD,KAAKhS,QAAQ,CAACI,GAAG;MACb,OAAO,CAAC2R,EAAE,EAAEC,EAAE,GAAGL,sBAAsB,CAACK,EAAE,GAAG3N,EAAE,EAAE4N,CAAC,CAAC,CAAC;IACxD,KAAKjS,QAAQ,CAACK,MAAM;MAChB,OAAO,CAAC0R,EAAE,EAAEC,EAAE,GAAGL,sBAAsB,CAACtN,EAAE,GAAG2N,EAAE,EAAEC,CAAC,CAAC,CAAC;EAC5D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAC;EAAEjB,OAAO;EAAEC,OAAO;EAAEiB,cAAc,GAAGnS,QAAQ,CAACK,MAAM;EAAE8Q,OAAO;EAAEC,OAAO;EAAEgB,cAAc,GAAGpS,QAAQ,CAACI,GAAG;EAAEwR,SAAS,GAAG;AAAM,CAAC,EAAE;EAC/I,MAAM,CAACP,cAAc,EAAEC,cAAc,CAAC,GAAGQ,uBAAuB,CAAC;IAC7DtH,GAAG,EAAE2H,cAAc;IACnBJ,EAAE,EAAEd,OAAO;IACXe,EAAE,EAAEd,OAAO;IACX9M,EAAE,EAAE+M,OAAO;IACX9M,EAAE,EAAE+M,OAAO;IACXa,CAAC,EAAEL;EACP,CAAC,CAAC;EACF,MAAM,CAACL,cAAc,EAAEC,cAAc,CAAC,GAAGM,uBAAuB,CAAC;IAC7DtH,GAAG,EAAE4H,cAAc;IACnBL,EAAE,EAAEZ,OAAO;IACXa,EAAE,EAAEZ,OAAO;IACXhN,EAAE,EAAE6M,OAAO;IACX5M,EAAE,EAAE6M,OAAO;IACXe,CAAC,EAAEL;EACP,CAAC,CAAC;EACF,MAAM,CAACS,MAAM,EAAEC,MAAM,EAAEzP,OAAO,EAAEC,OAAO,CAAC,GAAGkO,mBAAmB,CAAC;IAC3DC,OAAO;IACPC,OAAO;IACPC,OAAO;IACPC,OAAO;IACPC,cAAc;IACdC,cAAc;IACdC,cAAc;IACdC;EACJ,CAAC,CAAC;EACF,OAAO,CACH,IAAIP,OAAO,IAAIC,OAAO,KAAKG,cAAc,IAAIC,cAAc,IAAIC,cAAc,IAAIC,cAAc,IAAIL,OAAO,IAAIC,OAAO,EAAE,EACvHiB,MAAM,EACNC,MAAM,EACNzP,OAAO,EACPC,OAAO,CACV;AACL;;AAEA;AACA,SAASyP,aAAaA,CAAC;EAAEtB,OAAO;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAS,CAAC,EAAE;EAC5D,MAAMoB,OAAO,GAAG1I,IAAI,CAACQ,GAAG,CAAC6G,OAAO,GAAGF,OAAO,CAAC,GAAG,CAAC;EAC/C,MAAMQ,OAAO,GAAGN,OAAO,GAAGF,OAAO,GAAGE,OAAO,GAAGqB,OAAO,GAAGrB,OAAO,GAAGqB,OAAO;EACzE,MAAMC,OAAO,GAAG3I,IAAI,CAACQ,GAAG,CAAC8G,OAAO,GAAGF,OAAO,CAAC,GAAG,CAAC;EAC/C,MAAMQ,OAAO,GAAGN,OAAO,GAAGF,OAAO,GAAGE,OAAO,GAAGqB,OAAO,GAAGrB,OAAO,GAAGqB,OAAO;EACzE,OAAO,CAAChB,OAAO,EAAEC,OAAO,EAAEc,OAAO,EAAEC,OAAO,CAAC;AAC/C;AACA,SAASC,qBAAqBA,CAAC;EAAEC,UAAU;EAAEC,UAAU;EAAEC,QAAQ,GAAG,KAAK;EAAEC,MAAM,GAAG,CAAC;EAAEC,eAAe,GAAG;AAAO,CAAC,EAAE;EAC/G,IAAI,CAACA,eAAe,EAAE;IAClB,OAAOD,MAAM;EACjB;EACA,MAAME,2BAA2B,GAAGH,QAAQ,IAAID,UAAU,CAACC,QAAQ,IAAIF,UAAU,CAACE,QAAQ;EAC1F,MAAMI,cAAc,GAAGnJ,IAAI,CAACD,GAAG,CAAC8I,UAAU,CAAC3M,SAAS,CAACkN,CAAC,IAAI,CAAC,EAAEN,UAAU,CAAC5M,SAAS,CAACkN,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;EAC/F,OAAOJ,MAAM,IAAIE,2BAA2B,GAAGC,cAAc,GAAG,CAAC,CAAC;AACtE;AACA,SAASE,aAAaA,CAAC;EAAER,UAAU;EAAEC,UAAU;EAAEnQ,KAAK;EAAEC,MAAM;EAAEiM;AAAU,CAAC,EAAE;EACzE,MAAMyE,OAAO,GAAG9O,gBAAgB,CAACH,SAAS,CAACwO,UAAU,CAAC,EAAExO,SAAS,CAACyO,UAAU,CAAC,CAAC;EAC9E,IAAIQ,OAAO,CAACrQ,CAAC,KAAKqQ,OAAO,CAAChP,EAAE,EAAE;IAC1BgP,OAAO,CAAChP,EAAE,IAAI,CAAC;EACnB;EACA,IAAIgP,OAAO,CAACnQ,CAAC,KAAKmQ,OAAO,CAAC/O,EAAE,EAAE;IAC1B+O,OAAO,CAAC/O,EAAE,IAAI,CAAC;EACnB;EACA,MAAMgP,QAAQ,GAAG;IACbtQ,CAAC,EAAE,CAAC4L,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC;IAC/B1L,CAAC,EAAE,CAAC0L,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC;IAC/BlM,KAAK,EAAEA,KAAK,GAAGkM,SAAS,CAAC,CAAC,CAAC;IAC3BjM,MAAM,EAAEA,MAAM,GAAGiM,SAAS,CAAC,CAAC;EAChC,CAAC;EACD,OAAOhJ,kBAAkB,CAAC0N,QAAQ,EAAE7O,SAAS,CAAC4O,OAAO,CAAC,CAAC,GAAG,CAAC;AAC/D;AACA,MAAME,SAAS,GAAGA,CAAC;EAAEtR,MAAM;EAAE/D,YAAY;EAAEiE,MAAM;EAAEhE;AAAa,CAAC,KAAK,YAAY8D,MAAM,GAAG/D,YAAY,IAAI,EAAE,IAAIiE,MAAM,GAAGhE,YAAY,IAAI,EAAE,EAAE;AAC9I,MAAMqV,gBAAgB,GAAGA,CAACxR,IAAI,EAAEH,KAAK,KAAK;EACtC,OAAOA,KAAK,CAAC4R,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACzR,MAAM,KAAKD,IAAI,CAACC,MAAM,IAC/CyR,EAAE,CAACvR,MAAM,KAAKH,IAAI,CAACG,MAAM,KACxBuR,EAAE,CAACxV,YAAY,KAAK8D,IAAI,CAAC9D,YAAY,IAAK,CAACwV,EAAE,CAACxV,YAAY,IAAI,CAAC8D,IAAI,CAAC9D,YAAa,CAAC,KAClFwV,EAAE,CAACvV,YAAY,KAAK6D,IAAI,CAAC7D,YAAY,IAAK,CAACuV,EAAE,CAACvV,YAAY,IAAI,CAAC6D,IAAI,CAAC7D,YAAa,CAAC,CAAC;AAC5F,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwV,OAAO,GAAGA,CAACC,UAAU,EAAE/R,KAAK,KAAK;EACnC,IAAI,CAAC+R,UAAU,CAAC3R,MAAM,IAAI,CAAC2R,UAAU,CAACzR,MAAM,EAAE;IAC1C2J,OAAO,CAAC,KAAK,EAAE1O,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3C,OAAOyE,KAAK;EAChB;EACA,IAAIG,IAAI;EACR,IAAIV,UAAU,CAACsS,UAAU,CAAC,EAAE;IACxB5R,IAAI,GAAG;MAAE,GAAG4R;IAAW,CAAC;EAC5B,CAAC,MACI;IACD5R,IAAI,GAAG;MACH,GAAG4R,UAAU;MACb/V,EAAE,EAAE0V,SAAS,CAACK,UAAU;IAC5B,CAAC;EACL;EACA,IAAIJ,gBAAgB,CAACxR,IAAI,EAAEH,KAAK,CAAC,EAAE;IAC/B,OAAOA,KAAK;EAChB;EACA,IAAIG,IAAI,CAAC9D,YAAY,KAAK,IAAI,EAAE;IAC5B,OAAO8D,IAAI,CAAC9D,YAAY;EAC5B;EACA,IAAI8D,IAAI,CAAC7D,YAAY,KAAK,IAAI,EAAE;IAC5B,OAAO6D,IAAI,CAAC7D,YAAY;EAC5B;EACA,OAAO0D,KAAK,CAACgS,MAAM,CAAC7R,IAAI,CAAC;AAC7B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8R,aAAa,GAAGA,CAACC,OAAO,EAAEC,aAAa,EAAEnS,KAAK,EAAE2E,OAAO,GAAG;EAAEyN,eAAe,EAAE;AAAK,CAAC,KAAK;EAC1F,MAAM;IAAEpW,EAAE,EAAEqW,SAAS;IAAE,GAAGC;EAAK,CAAC,GAAGJ,OAAO;EAC1C,IAAI,CAACC,aAAa,CAAC/R,MAAM,IAAI,CAAC+R,aAAa,CAAC7R,MAAM,EAAE;IAChD2J,OAAO,CAAC,KAAK,EAAE1O,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3C,OAAOyE,KAAK;EAChB;EACA,MAAMuS,SAAS,GAAGvS,KAAK,CAACuH,IAAI,CAAEK,CAAC,IAAKA,CAAC,CAAC5L,EAAE,KAAKkW,OAAO,CAAClW,EAAE,CAAC;EACxD,IAAI,CAACuW,SAAS,EAAE;IACZtI,OAAO,CAAC,KAAK,EAAE1O,aAAa,CAAC,UAAU,CAAC,CAAC8W,SAAS,CAAC,CAAC;IACpD,OAAOrS,KAAK;EAChB;EACA;EACA,MAAMG,IAAI,GAAG;IACT,GAAGmS,IAAI;IACPtW,EAAE,EAAE2I,OAAO,CAACyN,eAAe,GAAGV,SAAS,CAACS,aAAa,CAAC,GAAGE,SAAS;IAClEjS,MAAM,EAAE+R,aAAa,CAAC/R,MAAM;IAC5BE,MAAM,EAAE6R,aAAa,CAAC7R,MAAM;IAC5BjE,YAAY,EAAE8V,aAAa,CAAC9V,YAAY;IACxCC,YAAY,EAAE6V,aAAa,CAAC7V;EAChC,CAAC;EACD,OAAO0D,KAAK,CAACO,MAAM,CAAEqH,CAAC,IAAKA,CAAC,CAAC5L,EAAE,KAAKqW,SAAS,CAAC,CAACL,MAAM,CAAC7R,IAAI,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqS,eAAeA,CAAC;EAAEnD,OAAO;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAS,CAAC,EAAE;EAC9D,MAAM,CAACiB,MAAM,EAAEC,MAAM,EAAEzP,OAAO,EAAEC,OAAO,CAAC,GAAGyP,aAAa,CAAC;IACrDtB,OAAO;IACPC,OAAO;IACPC,OAAO;IACPC;EACJ,CAAC,CAAC;EACF,OAAO,CAAC,KAAKH,OAAO,IAAIC,OAAO,KAAKC,OAAO,IAAIC,OAAO,EAAE,EAAEiB,MAAM,EAAEC,MAAM,EAAEzP,OAAO,EAAEC,OAAO,CAAC;AAC/F;AAEA,MAAMuR,gBAAgB,GAAG;EACrB,CAACrU,QAAQ,CAACE,IAAI,GAAG;IAAE6C,CAAC,EAAE,CAAC,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EAChC,CAACjD,QAAQ,CAACG,KAAK,GAAG;IAAE4C,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EAChC,CAACjD,QAAQ,CAACI,GAAG,GAAG;IAAE2C,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE,CAAC;EAAE,CAAC;EAC/B,CAACjD,QAAQ,CAACK,MAAM,GAAG;IAAE0C,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE;AACpC,CAAC;AACD,MAAMqR,YAAY,GAAGA,CAAC;EAAEtS,MAAM;EAAEmQ,cAAc,GAAGnS,QAAQ,CAACK,MAAM;EAAE6B;AAAQ,CAAC,KAAK;EAC5E,IAAIiQ,cAAc,KAAKnS,QAAQ,CAACE,IAAI,IAAIiS,cAAc,KAAKnS,QAAQ,CAACG,KAAK,EAAE;IACvE,OAAO6B,MAAM,CAACe,CAAC,GAAGb,MAAM,CAACa,CAAC,GAAG;MAAEA,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE;IAAE,CAAC,GAAG;MAAEF,CAAC,EAAE,CAAC,CAAC;MAAEE,CAAC,EAAE;IAAE,CAAC;EACjE;EACA,OAAOjB,MAAM,CAACiB,CAAC,GAAGf,MAAM,CAACe,CAAC,GAAG;IAAEF,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC,GAAG;IAAEF,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE,CAAC;EAAE,CAAC;AACjE,CAAC;AACD,MAAMyH,QAAQ,GAAGA,CAACnK,CAAC,EAAEC,CAAC,KAAKsJ,IAAI,CAAC+H,IAAI,CAAC/H,IAAI,CAACyK,GAAG,CAAC/T,CAAC,CAACuC,CAAC,GAAGxC,CAAC,CAACwC,CAAC,EAAE,CAAC,CAAC,GAAG+G,IAAI,CAACyK,GAAG,CAAC/T,CAAC,CAACyC,CAAC,GAAG1C,CAAC,CAAC0C,CAAC,EAAE,CAAC,CAAC,CAAC;AACrF;AACA;AACA;AACA;AACA,SAASuR,SAASA,CAAC;EAAExS,MAAM;EAAEmQ,cAAc,GAAGnS,QAAQ,CAACK,MAAM;EAAE6B,MAAM;EAAEkQ,cAAc,GAAGpS,QAAQ,CAACI,GAAG;EAAEqU,MAAM;EAAE9G;AAAQ,CAAC,EAAE;EACrH,MAAM+G,SAAS,GAAGL,gBAAgB,CAAClC,cAAc,CAAC;EAClD,MAAMwC,SAAS,GAAGN,gBAAgB,CAACjC,cAAc,CAAC;EAClD,MAAMwC,YAAY,GAAG;IAAE7R,CAAC,EAAEf,MAAM,CAACe,CAAC,GAAG2R,SAAS,CAAC3R,CAAC,GAAG4K,MAAM;IAAE1K,CAAC,EAAEjB,MAAM,CAACiB,CAAC,GAAGyR,SAAS,CAACzR,CAAC,GAAG0K;EAAO,CAAC;EAC/F,MAAMkH,YAAY,GAAG;IAAE9R,CAAC,EAAEb,MAAM,CAACa,CAAC,GAAG4R,SAAS,CAAC5R,CAAC,GAAG4K,MAAM;IAAE1K,CAAC,EAAEf,MAAM,CAACe,CAAC,GAAG0R,SAAS,CAAC1R,CAAC,GAAG0K;EAAO,CAAC;EAC/F,MAAMmH,GAAG,GAAGR,YAAY,CAAC;IACrBtS,MAAM,EAAE4S,YAAY;IACpBzC,cAAc;IACdjQ,MAAM,EAAE2S;EACZ,CAAC,CAAC;EACF,MAAME,WAAW,GAAGD,GAAG,CAAC/R,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG;EAC3C,MAAMiS,OAAO,GAAGF,GAAG,CAACC,WAAW,CAAC;EAChC,IAAIE,MAAM,GAAG,EAAE;EACf,IAAIxD,OAAO,EAAEC,OAAO;EACpB,MAAMwD,eAAe,GAAG;IAAEnS,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EACtC,MAAMkS,eAAe,GAAG;IAAEpS,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EACtC,MAAM,CAACmS,cAAc,EAAEC,cAAc,EAAEC,cAAc,EAAEC,cAAc,CAAC,GAAGhD,aAAa,CAAC;IACnFtB,OAAO,EAAEjP,MAAM,CAACe,CAAC;IACjBmO,OAAO,EAAElP,MAAM,CAACiB,CAAC;IACjBkO,OAAO,EAAEjP,MAAM,CAACa,CAAC;IACjBqO,OAAO,EAAElP,MAAM,CAACe;EACpB,CAAC,CAAC;EACF;EACA,IAAIyR,SAAS,CAACK,WAAW,CAAC,GAAGJ,SAAS,CAACI,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;IACxDtD,OAAO,GAAGgD,MAAM,CAAC1R,CAAC,IAAIqS,cAAc;IACpC1D,OAAO,GAAG+C,MAAM,CAACxR,CAAC,IAAIoS,cAAc;IACpC;AACR;AACA;AACA;AACA;IACQ,MAAMG,aAAa,GAAG,CAClB;MAAEzS,CAAC,EAAE0O,OAAO;MAAExO,CAAC,EAAE2R,YAAY,CAAC3R;IAAE,CAAC,EACjC;MAAEF,CAAC,EAAE0O,OAAO;MAAExO,CAAC,EAAE4R,YAAY,CAAC5R;IAAE,CAAC,CACpC;IACD;AACR;AACA;AACA;AACA;IACQ,MAAMwS,eAAe,GAAG,CACpB;MAAE1S,CAAC,EAAE6R,YAAY,CAAC7R,CAAC;MAAEE,CAAC,EAAEyO;IAAQ,CAAC,EACjC;MAAE3O,CAAC,EAAE8R,YAAY,CAAC9R,CAAC;MAAEE,CAAC,EAAEyO;IAAQ,CAAC,CACpC;IACD,IAAIgD,SAAS,CAACK,WAAW,CAAC,KAAKC,OAAO,EAAE;MACpCC,MAAM,GAAGF,WAAW,KAAK,GAAG,GAAGS,aAAa,GAAGC,eAAe;IAClE,CAAC,MACI;MACDR,MAAM,GAAGF,WAAW,KAAK,GAAG,GAAGU,eAAe,GAAGD,aAAa;IAClE;EACJ,CAAC,MACI;IACD;IACA,MAAME,YAAY,GAAG,CAAC;MAAE3S,CAAC,EAAE6R,YAAY,CAAC7R,CAAC;MAAEE,CAAC,EAAE4R,YAAY,CAAC5R;IAAE,CAAC,CAAC;IAC/D,MAAM0S,YAAY,GAAG,CAAC;MAAE5S,CAAC,EAAE8R,YAAY,CAAC9R,CAAC;MAAEE,CAAC,EAAE2R,YAAY,CAAC3R;IAAE,CAAC,CAAC;IAC/D;IACA,IAAI8R,WAAW,KAAK,GAAG,EAAE;MACrBE,MAAM,GAAGP,SAAS,CAAC3R,CAAC,KAAKiS,OAAO,GAAGW,YAAY,GAAGD,YAAY;IAClE,CAAC,MACI;MACDT,MAAM,GAAGP,SAAS,CAACzR,CAAC,KAAK+R,OAAO,GAAGU,YAAY,GAAGC,YAAY;IAClE;IACA,IAAIxD,cAAc,KAAKC,cAAc,EAAE;MACnC,MAAMrR,IAAI,GAAG+I,IAAI,CAACQ,GAAG,CAACtI,MAAM,CAAC+S,WAAW,CAAC,GAAG7S,MAAM,CAAC6S,WAAW,CAAC,CAAC;MAChE;MACA,IAAIhU,IAAI,IAAI4M,MAAM,EAAE;QAChB,MAAMiI,SAAS,GAAG9L,IAAI,CAACF,GAAG,CAAC+D,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG5M,IAAI,CAAC;QACrD,IAAI2T,SAAS,CAACK,WAAW,CAAC,KAAKC,OAAO,EAAE;UACpCE,eAAe,CAACH,WAAW,CAAC,GAAG,CAACH,YAAY,CAACG,WAAW,CAAC,GAAG/S,MAAM,CAAC+S,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAIa,SAAS;QACzG,CAAC,MACI;UACDT,eAAe,CAACJ,WAAW,CAAC,GAAG,CAACF,YAAY,CAACE,WAAW,CAAC,GAAG7S,MAAM,CAAC6S,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAIa,SAAS;QACzG;MACJ;IACJ;IACA;IACA,IAAIzD,cAAc,KAAKC,cAAc,EAAE;MACnC,MAAMyD,mBAAmB,GAAGd,WAAW,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;MAC3D,MAAMe,SAAS,GAAGpB,SAAS,CAACK,WAAW,CAAC,KAAKJ,SAAS,CAACkB,mBAAmB,CAAC;MAC3E,MAAME,kBAAkB,GAAGnB,YAAY,CAACiB,mBAAmB,CAAC,GAAGhB,YAAY,CAACgB,mBAAmB,CAAC;MAChG,MAAMG,kBAAkB,GAAGpB,YAAY,CAACiB,mBAAmB,CAAC,GAAGhB,YAAY,CAACgB,mBAAmB,CAAC;MAChG,MAAMI,gBAAgB,GAAIvB,SAAS,CAACK,WAAW,CAAC,KAAK,CAAC,KAAM,CAACe,SAAS,IAAIC,kBAAkB,IAAMD,SAAS,IAAIE,kBAAmB,CAAC,IAC9HtB,SAAS,CAACK,WAAW,CAAC,KAAK,CAAC,KAAM,CAACe,SAAS,IAAIE,kBAAkB,IAAMF,SAAS,IAAIC,kBAAmB,CAAE;MAC/G,IAAIE,gBAAgB,EAAE;QAClBhB,MAAM,GAAGF,WAAW,KAAK,GAAG,GAAGW,YAAY,GAAGC,YAAY;MAC9D;IACJ;IACA,MAAMO,cAAc,GAAG;MAAEnT,CAAC,EAAE6R,YAAY,CAAC7R,CAAC,GAAGmS,eAAe,CAACnS,CAAC;MAAEE,CAAC,EAAE2R,YAAY,CAAC3R,CAAC,GAAGiS,eAAe,CAACjS;IAAE,CAAC;IACvG,MAAMkT,cAAc,GAAG;MAAEpT,CAAC,EAAE8R,YAAY,CAAC9R,CAAC,GAAGoS,eAAe,CAACpS,CAAC;MAAEE,CAAC,EAAE4R,YAAY,CAAC5R,CAAC,GAAGkS,eAAe,CAAClS;IAAE,CAAC;IACvG,MAAMmT,YAAY,GAAGtM,IAAI,CAACD,GAAG,CAACC,IAAI,CAACQ,GAAG,CAAC4L,cAAc,CAACnT,CAAC,GAAGkS,MAAM,CAAC,CAAC,CAAC,CAAClS,CAAC,CAAC,EAAE+G,IAAI,CAACQ,GAAG,CAAC6L,cAAc,CAACpT,CAAC,GAAGkS,MAAM,CAAC,CAAC,CAAC,CAAClS,CAAC,CAAC,CAAC;IACjH,MAAMsT,YAAY,GAAGvM,IAAI,CAACD,GAAG,CAACC,IAAI,CAACQ,GAAG,CAAC4L,cAAc,CAACjT,CAAC,GAAGgS,MAAM,CAAC,CAAC,CAAC,CAAChS,CAAC,CAAC,EAAE6G,IAAI,CAACQ,GAAG,CAAC6L,cAAc,CAAClT,CAAC,GAAGgS,MAAM,CAAC,CAAC,CAAC,CAAChS,CAAC,CAAC,CAAC;IACjH;IACA,IAAImT,YAAY,IAAIC,YAAY,EAAE;MAC9B5E,OAAO,GAAG,CAACyE,cAAc,CAACnT,CAAC,GAAGoT,cAAc,CAACpT,CAAC,IAAI,CAAC;MACnD2O,OAAO,GAAGuD,MAAM,CAAC,CAAC,CAAC,CAAChS,CAAC;IACzB,CAAC,MACI;MACDwO,OAAO,GAAGwD,MAAM,CAAC,CAAC,CAAC,CAAClS,CAAC;MACrB2O,OAAO,GAAG,CAACwE,cAAc,CAACjT,CAAC,GAAGkT,cAAc,CAAClT,CAAC,IAAI,CAAC;IACvD;EACJ;EACA,MAAMqT,UAAU,GAAG,CACftU,MAAM,EACN;IAAEe,CAAC,EAAE6R,YAAY,CAAC7R,CAAC,GAAGmS,eAAe,CAACnS,CAAC;IAAEE,CAAC,EAAE2R,YAAY,CAAC3R,CAAC,GAAGiS,eAAe,CAACjS;EAAE,CAAC,EAChF,GAAGgS,MAAM,EACT;IAAElS,CAAC,EAAE8R,YAAY,CAAC9R,CAAC,GAAGoS,eAAe,CAACpS,CAAC;IAAEE,CAAC,EAAE4R,YAAY,CAAC5R,CAAC,GAAGkS,eAAe,CAAClS;EAAE,CAAC,EAChFf,MAAM,CACT;EACD,OAAO,CAACoU,UAAU,EAAE7E,OAAO,EAAEC,OAAO,EAAE4D,cAAc,EAAEC,cAAc,CAAC;AACzE;AACA,SAASgB,OAAOA,CAAChW,CAAC,EAAEC,CAAC,EAAEyR,CAAC,EAAExR,IAAI,EAAE;EAC5B,MAAM+V,QAAQ,GAAG1M,IAAI,CAACF,GAAG,CAACc,QAAQ,CAACnK,CAAC,EAAEC,CAAC,CAAC,GAAG,CAAC,EAAEkK,QAAQ,CAAClK,CAAC,EAAEyR,CAAC,CAAC,GAAG,CAAC,EAAExR,IAAI,CAAC;EACvE,MAAM;IAAEsC,CAAC;IAAEE;EAAE,CAAC,GAAGzC,CAAC;EAClB;EACA,IAAKD,CAAC,CAACwC,CAAC,KAAKA,CAAC,IAAIA,CAAC,KAAKkP,CAAC,CAAClP,CAAC,IAAMxC,CAAC,CAAC0C,CAAC,KAAKA,CAAC,IAAIA,CAAC,KAAKgP,CAAC,CAAChP,CAAE,EAAE;IACtD,OAAO,IAAIF,CAAC,IAAIE,CAAC,EAAE;EACvB;EACA;EACA,IAAI1C,CAAC,CAAC0C,CAAC,KAAKA,CAAC,EAAE;IACX,MAAMwT,IAAI,GAAGlW,CAAC,CAACwC,CAAC,GAAGkP,CAAC,CAAClP,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAC/B,MAAM2T,IAAI,GAAGnW,CAAC,CAAC0C,CAAC,GAAGgP,CAAC,CAAChP,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B,OAAO,KAAKF,CAAC,GAAGyT,QAAQ,GAAGC,IAAI,IAAIxT,CAAC,KAAKF,CAAC,IAAIE,CAAC,IAAIF,CAAC,IAAIE,CAAC,GAAGuT,QAAQ,GAAGE,IAAI,EAAE;EACjF;EACA,MAAMD,IAAI,GAAGlW,CAAC,CAACwC,CAAC,GAAGkP,CAAC,CAAClP,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC/B,MAAM2T,IAAI,GAAGnW,CAAC,CAAC0C,CAAC,GAAGgP,CAAC,CAAChP,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAC/B,OAAO,KAAKF,CAAC,IAAIE,CAAC,GAAGuT,QAAQ,GAAGE,IAAI,KAAK3T,CAAC,IAAIE,CAAC,IAAIF,CAAC,GAAGyT,QAAQ,GAAGC,IAAI,IAAIxT,CAAC,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0T,iBAAiBA,CAAC;EAAE1F,OAAO;EAAEC,OAAO;EAAEiB,cAAc,GAAGnS,QAAQ,CAACK,MAAM;EAAE8Q,OAAO;EAAEC,OAAO;EAAEgB,cAAc,GAAGpS,QAAQ,CAACI,GAAG;EAAEwW,YAAY,GAAG,CAAC;EAAEnF,OAAO;EAAEC,OAAO;EAAE/D,MAAM,GAAG;AAAI,CAAC,EAAE;EAClL,MAAM,CAACsH,MAAM,EAAE5C,MAAM,EAAEC,MAAM,EAAEzP,OAAO,EAAEC,OAAO,CAAC,GAAG0R,SAAS,CAAC;IACzDxS,MAAM,EAAE;MAAEe,CAAC,EAAEkO,OAAO;MAAEhO,CAAC,EAAEiO;IAAQ,CAAC;IAClCiB,cAAc;IACdjQ,MAAM,EAAE;MAAEa,CAAC,EAAEoO,OAAO;MAAElO,CAAC,EAAEmO;IAAQ,CAAC;IAClCgB,cAAc;IACdqC,MAAM,EAAE;MAAE1R,CAAC,EAAE0O,OAAO;MAAExO,CAAC,EAAEyO;IAAQ,CAAC;IAClC/D;EACJ,CAAC,CAAC;EACF,MAAMkJ,IAAI,GAAG5B,MAAM,CAACtR,MAAM,CAAC,CAAC4K,GAAG,EAAEnB,CAAC,EAAE0J,CAAC,KAAK;IACtC,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAID,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAG7B,MAAM,CAAC9T,MAAM,GAAG,CAAC,EAAE;MAChC4V,OAAO,GAAGR,OAAO,CAACtB,MAAM,CAAC6B,CAAC,GAAG,CAAC,CAAC,EAAE1J,CAAC,EAAE6H,MAAM,CAAC6B,CAAC,GAAG,CAAC,CAAC,EAAEF,YAAY,CAAC;IACpE,CAAC,MACI;MACDG,OAAO,GAAG,GAAGD,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG1J,CAAC,CAACrK,CAAC,IAAIqK,CAAC,CAACnK,CAAC,EAAE;IACnD;IACAsL,GAAG,IAAIwI,OAAO;IACd,OAAOxI,GAAG;EACd,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACsI,IAAI,EAAExE,MAAM,EAAEC,MAAM,EAAEzP,OAAO,EAAEC,OAAO,CAAC;AACnD;AAEA,SAASkU,iBAAiBA,CAACtV,IAAI,EAAE;EAC7B,OAAQA,IAAI,IACR,CAAC,EAAEA,IAAI,CAACsE,SAAS,CAACC,YAAY,IAAIvE,IAAI,CAACgP,OAAO,EAAEvP,MAAM,CAAC,IACvD,CAAC,EAAEO,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,CAAC;AAClE;AACA,SAASyR,eAAeA,CAAC9T,MAAM,EAAE;EAC7B,MAAM;IAAEwP,UAAU;IAAEC;EAAW,CAAC,GAAGzP,MAAM;EACzC,IAAI,CAAC6T,iBAAiB,CAACrE,UAAU,CAAC,IAAI,CAACqE,iBAAiB,CAACpE,UAAU,CAAC,EAAE;IAClE,OAAO,IAAI;EACf;EACA,MAAMsE,kBAAkB,GAAGvE,UAAU,CAAC3M,SAAS,CAACC,YAAY,IAAIkR,cAAc,CAACxE,UAAU,CAACjC,OAAO,CAAC;EAClG,MAAM0G,kBAAkB,GAAGxE,UAAU,CAAC5M,SAAS,CAACC,YAAY,IAAIkR,cAAc,CAACvE,UAAU,CAAClC,OAAO,CAAC;EAClG,MAAMzS,YAAY,GAAGoZ,WAAW,CAACH,kBAAkB,EAAElV,MAAM,IAAI,EAAE,EAAEmB,MAAM,CAAClF,YAAY,CAAC;EACvF,MAAMC,YAAY,GAAGmZ,WAAW;EAChC;EACAlU,MAAM,CAACmU,cAAc,KAAKtY,cAAc,CAACuY,MAAM,GACzCH,kBAAkB,EAAElV,MAAM,IAAI,EAAE,GAChC,CAACkV,kBAAkB,EAAElV,MAAM,IAAI,EAAE,EAAE0R,MAAM,CAACwD,kBAAkB,EAAEpV,MAAM,IAAI,EAAE,CAAC,EAAEmB,MAAM,CAACjF,YAAY,CAAC;EACvG,IAAI,CAACD,YAAY,IAAI,CAACC,YAAY,EAAE;IAChCiF,MAAM,CAAC4E,OAAO,GAAG,KAAK,EAAE5K,aAAa,CAAC,UAAU,CAAC,CAAC,CAACc,YAAY,GAAG,QAAQ,GAAG,QAAQ,EAAE;MACnFL,EAAE,EAAEuF,MAAM,CAACvF,EAAE;MACbK,YAAY,EAAEkF,MAAM,CAAClF,YAAY;MACjCC,YAAY,EAAEiF,MAAM,CAACjF;IACzB,CAAC,CAAC,CAAC;IACH,OAAO,IAAI;EACf;EACA,MAAMiU,cAAc,GAAGlU,YAAY,EAAE+E,QAAQ,IAAIhD,QAAQ,CAACK,MAAM;EAChE,MAAM+R,cAAc,GAAGlU,YAAY,EAAE8E,QAAQ,IAAIhD,QAAQ,CAACI,GAAG;EAC7D,MAAM4B,MAAM,GAAGwV,iBAAiB,CAAC7E,UAAU,EAAE1U,YAAY,EAAEkU,cAAc,CAAC;EAC1E,MAAMjQ,MAAM,GAAGsV,iBAAiB,CAAC5E,UAAU,EAAE1U,YAAY,EAAEkU,cAAc,CAAC;EAC1E,OAAO;IACHnB,OAAO,EAAEjP,MAAM,CAACe,CAAC;IACjBmO,OAAO,EAAElP,MAAM,CAACiB,CAAC;IACjBkO,OAAO,EAAEjP,MAAM,CAACa,CAAC;IACjBqO,OAAO,EAAElP,MAAM,CAACe,CAAC;IACjBkP,cAAc;IACdC;EACJ,CAAC;AACL;AACA,SAAS+E,cAAcA,CAACzG,OAAO,EAAE;EAC7B,IAAI,CAACA,OAAO,EAAE;IACV,OAAO,IAAI;EACf;EACA,MAAM1O,MAAM,GAAG,EAAE;EACjB,MAAME,MAAM,GAAG,EAAE;EACjB,KAAK,MAAM2O,MAAM,IAAIH,OAAO,EAAE;IAC1BG,MAAM,CAACpO,KAAK,GAAGoO,MAAM,CAACpO,KAAK,IAAI,CAAC;IAChCoO,MAAM,CAACnO,MAAM,GAAGmO,MAAM,CAACnO,MAAM,IAAI,CAAC;IAClC,IAAImO,MAAM,CAAC/S,IAAI,KAAK,QAAQ,EAAE;MAC1BkE,MAAM,CAACd,IAAI,CAAC2P,MAAM,CAAC;IACvB,CAAC,MACI,IAAIA,MAAM,CAAC/S,IAAI,KAAK,QAAQ,EAAE;MAC/BoE,MAAM,CAAChB,IAAI,CAAC2P,MAAM,CAAC;IACvB;EACJ;EACA,OAAO;IACH7O,MAAM;IACNE;EACJ,CAAC;AACL;AACA,SAASsV,iBAAiBA,CAAC9V,IAAI,EAAEmP,MAAM,EAAE4G,gBAAgB,GAAGzX,QAAQ,CAACE,IAAI,EAAEuU,MAAM,GAAG,KAAK,EAAE;EACvF,MAAM1R,CAAC,GAAG,CAAC8N,MAAM,EAAE9N,CAAC,IAAI,CAAC,IAAIrB,IAAI,CAACsE,SAAS,CAACoC,gBAAgB,CAACrF,CAAC;EAC9D,MAAME,CAAC,GAAG,CAAC4N,MAAM,EAAE5N,CAAC,IAAI,CAAC,IAAIvB,IAAI,CAACsE,SAAS,CAACoC,gBAAgB,CAACnF,CAAC;EAC9D,MAAM;IAAER,KAAK;IAAEC;EAAO,CAAC,GAAGmO,MAAM,IAAIlO,iBAAiB,CAACjB,IAAI,CAAC;EAC3D,IAAI+S,MAAM,EAAE;IACR,OAAO;MAAE1R,CAAC,EAAEA,CAAC,GAAGN,KAAK,GAAG,CAAC;MAAEQ,CAAC,EAAEA,CAAC,GAAGP,MAAM,GAAG;IAAE,CAAC;EAClD;EACA,MAAMM,QAAQ,GAAG6N,MAAM,EAAE7N,QAAQ,IAAIyU,gBAAgB;EACrD,QAAQzU,QAAQ;IACZ,KAAKhD,QAAQ,CAACI,GAAG;MACb,OAAO;QAAE2C,CAAC,EAAEA,CAAC,GAAGN,KAAK,GAAG,CAAC;QAAEQ;MAAE,CAAC;IAClC,KAAKjD,QAAQ,CAACG,KAAK;MACf,OAAO;QAAE4C,CAAC,EAAEA,CAAC,GAAGN,KAAK;QAAEQ,CAAC,EAAEA,CAAC,GAAGP,MAAM,GAAG;MAAE,CAAC;IAC9C,KAAK1C,QAAQ,CAACK,MAAM;MAChB,OAAO;QAAE0C,CAAC,EAAEA,CAAC,GAAGN,KAAK,GAAG,CAAC;QAAEQ,CAAC,EAAEA,CAAC,GAAGP;MAAO,CAAC;IAC9C,KAAK1C,QAAQ,CAACE,IAAI;MACd,OAAO;QAAE6C,CAAC;QAAEE,CAAC,EAAEA,CAAC,GAAGP,MAAM,GAAG;MAAE,CAAC;EACvC;AACJ;AACA,SAAS2U,WAAWA,CAAChQ,MAAM,EAAEqQ,QAAQ,EAAE;EACnC,IAAI,CAACrQ,MAAM,EAAE;IACT,OAAO,IAAI;EACf;EACA;EACA,OAAO,CAAC,CAACqQ,QAAQ,GAAGrQ,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC8B,IAAI,CAAEwO,CAAC,IAAKA,CAAC,CAAC/Z,EAAE,KAAK8Z,QAAQ,CAAC,KAAK,IAAI;AAClF;AAEA,SAASE,WAAWA,CAACC,MAAM,EAAEja,EAAE,EAAE;EAC7B,IAAI,CAACia,MAAM,EAAE;IACT,OAAO,EAAE;EACb;EACA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC5B,OAAOA,MAAM;EACjB;EACA,MAAMC,QAAQ,GAAGla,EAAE,GAAG,GAAGA,EAAE,IAAI,GAAG,EAAE;EACpC,OAAO,GAAGka,QAAQ,GAAGC,MAAM,CAACpX,IAAI,CAACkX,MAAM,CAAC,CACnCG,IAAI,CAAC,CAAC,CACNrR,GAAG,CAAEjG,GAAG,IAAK,GAAGA,GAAG,IAAImX,MAAM,CAACnX,GAAG,CAAC,EAAE,CAAC,CACrCuX,IAAI,CAAC,GAAG,CAAC,EAAE;AACpB;AACA,SAASC,eAAeA,CAACtW,KAAK,EAAE;EAAEhE,EAAE;EAAEua,YAAY;EAAEC,kBAAkB;EAAEC;AAAkB,CAAC,EAAE;EACzF,MAAMC,GAAG,GAAG,IAAIxW,GAAG,CAAC,CAAC;EACrB,OAAOF,KAAK,CACP+B,MAAM,CAAC,CAAC4U,OAAO,EAAExW,IAAI,KAAK;IAC3B,CAACA,IAAI,CAACyW,WAAW,IAAIJ,kBAAkB,EAAErW,IAAI,CAAC0W,SAAS,IAAIJ,gBAAgB,CAAC,CAACrX,OAAO,CAAE6W,MAAM,IAAK;MAC7F,IAAIA,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QACtC,MAAMa,QAAQ,GAAGd,WAAW,CAACC,MAAM,EAAEja,EAAE,CAAC;QACxC,IAAI,CAAC0a,GAAG,CAAC1X,GAAG,CAAC8X,QAAQ,CAAC,EAAE;UACpBH,OAAO,CAACrX,IAAI,CAAC;YAAEtD,EAAE,EAAE8a,QAAQ;YAAEC,KAAK,EAAEd,MAAM,CAACc,KAAK,IAAIR,YAAY;YAAE,GAAGN;UAAO,CAAC,CAAC;UAC9ES,GAAG,CAACrW,GAAG,CAACyW,QAAQ,CAAC;QACrB;MACJ;IACJ,CAAC,CAAC;IACF,OAAOH,OAAO;EAClB,CAAC,EAAE,EAAE,CAAC,CACDP,IAAI,CAAC,CAACzX,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC3C,EAAE,CAACgb,aAAa,CAACpY,CAAC,CAAC5C,EAAE,CAAC,CAAC;AACjD;AAEA,SAASib,uBAAuBA,CAACC,QAAQ,EAAExR,QAAQ,EAAEtE,QAAQ,EAAE2K,MAAM,EAAEoL,KAAK,EAAE;EAC1E,IAAIC,eAAe,GAAG,GAAG;EACzB,IAAID,KAAK,KAAK,OAAO,EAAE;IACnBC,eAAe,GAAG,CAAC;EACvB,CAAC,MACI,IAAID,KAAK,KAAK,KAAK,EAAE;IACtBC,eAAe,GAAG,CAAC;EACvB;EACA;AACJ;AACA;AACA;EACI,IAAIxO,GAAG,GAAG,CACN,CAACsO,QAAQ,CAAC/V,CAAC,GAAG+V,QAAQ,CAACrW,KAAK,GAAGuW,eAAe,IAAI1R,QAAQ,CAACtK,IAAI,GAAGsK,QAAQ,CAACvE,CAAC,EAC5E+V,QAAQ,CAAC7V,CAAC,GAAGqE,QAAQ,CAACtK,IAAI,GAAGsK,QAAQ,CAACrE,CAAC,GAAG0K,MAAM,CACnD;EACD;EACA,IAAIsL,KAAK,GAAG,CAAC,CAAC,GAAG,GAAGD,eAAe,EAAE,CAAC,GAAG,CAAC;EAC1C,QAAQhW,QAAQ;IACZ,KAAKhD,QAAQ,CAACG,KAAK;MACfqK,GAAG,GAAG,CACF,CAACsO,QAAQ,CAAC/V,CAAC,GAAG+V,QAAQ,CAACrW,KAAK,IAAI6E,QAAQ,CAACtK,IAAI,GAAGsK,QAAQ,CAACvE,CAAC,GAAG4K,MAAM,EACnE,CAACmL,QAAQ,CAAC7V,CAAC,GAAG6V,QAAQ,CAACpW,MAAM,GAAGsW,eAAe,IAAI1R,QAAQ,CAACtK,IAAI,GAAGsK,QAAQ,CAACrE,CAAC,CAChF;MACDgW,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAGD,eAAe,CAAC;MACnC;IACJ,KAAKhZ,QAAQ,CAACK,MAAM;MAChBmK,GAAG,CAAC,CAAC,CAAC,GAAG,CAACsO,QAAQ,CAAC7V,CAAC,GAAG6V,QAAQ,CAACpW,MAAM,IAAI4E,QAAQ,CAACtK,IAAI,GAAGsK,QAAQ,CAACrE,CAAC,GAAG0K,MAAM;MAC7EsL,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;MACZ;IACJ,KAAKjZ,QAAQ,CAACE,IAAI;MACdsK,GAAG,GAAG,CACFsO,QAAQ,CAAC/V,CAAC,GAAGuE,QAAQ,CAACtK,IAAI,GAAGsK,QAAQ,CAACvE,CAAC,GAAG4K,MAAM,EAChD,CAACmL,QAAQ,CAAC7V,CAAC,GAAG6V,QAAQ,CAACpW,MAAM,GAAGsW,eAAe,IAAI1R,QAAQ,CAACtK,IAAI,GAAGsK,QAAQ,CAACrE,CAAC,CAChF;MACDgW,KAAK,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAGD,eAAe,CAAC;MACtC;EACR;EACA,OAAO,aAAaxO,GAAG,CAAC,CAAC,CAAC,OAAOA,GAAG,CAAC,CAAC,CAAC,iBAAiByO,KAAK,CAAC,CAAC,CAAC,MAAMA,KAAK,CAAC,CAAC,CAAC,IAAI;AACtF;AAEA,MAAMC,cAAc,GAAG;EACnB1W,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAClBsF,UAAU,EAAEnJ,cAAc;EAC1Bwa,oBAAoB,EAAE,IAAI;EAC1BC,QAAQ,EAAE,CAAC;AACf,CAAC;AACD,MAAMC,4BAA4B,GAAG;EACjC,GAAGH,cAAc;EACjBI,aAAa,EAAE;AACnB,CAAC;AACD,SAASC,YAAYA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAClC,MAAMC,MAAM,GAAG;IAAE,GAAGF;EAAK,CAAC;EAC1B,KAAK,MAAM9Y,GAAG,IAAI+Y,QAAQ,EAAE;IACxB,IAAIA,QAAQ,CAAC/Y,GAAG,CAAC,KAAKsD,SAAS,EAAE;MAC7B;MACA0V,MAAM,CAAChZ,GAAG,CAAC,GAAG+Y,QAAQ,CAAC/Y,GAAG,CAAC;IAC/B;EACJ;EACA,OAAOgZ,MAAM;AACjB;AACA,SAASC,uBAAuBA,CAACpW,UAAU,EAAEqW,YAAY,EAAErT,OAAO,EAAE;EAChE,MAAMsT,QAAQ,GAAGN,YAAY,CAACL,cAAc,EAAE3S,OAAO,CAAC;EACtD,KAAK,MAAM7E,IAAI,IAAI6B,UAAU,CAAC6B,MAAM,CAAC,CAAC,EAAE;IACpC,IAAI1D,IAAI,CAACuG,QAAQ,EAAE;MACf6R,eAAe,CAACpY,IAAI,EAAE6B,UAAU,EAAEqW,YAAY,EAAEC,QAAQ,CAAC;IAC7D,CAAC,MACI;MACD,MAAME,kBAAkB,GAAGxX,yBAAyB,CAACb,IAAI,EAAEmY,QAAQ,CAACrX,UAAU,CAAC;MAC/E,MAAM6F,MAAM,GAAGI,kBAAkB,CAAC/G,IAAI,CAAC2G,MAAM,CAAC,GAAG3G,IAAI,CAAC2G,MAAM,GAAGwR,QAAQ,CAAC/R,UAAU;MAClF,MAAMkS,eAAe,GAAGtR,aAAa,CAACqR,kBAAkB,EAAE1R,MAAM,EAAE1F,iBAAiB,CAACjB,IAAI,CAAC,CAAC;MAC1FA,IAAI,CAACsE,SAAS,CAACoC,gBAAgB,GAAG4R,eAAe;IACrD;EACJ;AACJ;AACA,SAASC,cAAcA,CAACtY,KAAK,EAAE4B,UAAU,EAAEqW,YAAY,EAAErT,OAAO,EAAE;EAC9D,MAAMsT,QAAQ,GAAGN,YAAY,CAACF,4BAA4B,EAAE9S,OAAO,CAAC;EACpE,IAAI2T,gBAAgB,GAAGvY,KAAK,CAACR,MAAM,GAAG,CAAC;EACvC,MAAMgZ,SAAS,GAAG,IAAI1T,GAAG,CAAClD,UAAU,CAAC;EACrC,MAAM6W,aAAa,GAAGP,QAAQ,EAAEV,oBAAoB,GAAG,IAAI,GAAG,CAAC;EAC/D5V,UAAU,CAAC8W,KAAK,CAAC,CAAC;EAClBT,YAAY,CAACS,KAAK,CAAC,CAAC;EACpB,KAAK,MAAMC,QAAQ,IAAI3Y,KAAK,EAAE;IAC1B,IAAI4Y,YAAY,GAAGJ,SAAS,CAAClW,GAAG,CAACqW,QAAQ,CAAC1c,EAAE,CAAC;IAC7C,IAAIic,QAAQ,CAACP,aAAa,IAAIgB,QAAQ,KAAKC,YAAY,EAAEvU,SAAS,CAACsU,QAAQ,EAAE;MACzE/W,UAAU,CAACsD,GAAG,CAACyT,QAAQ,CAAC1c,EAAE,EAAE2c,YAAY,CAAC;IAC7C,CAAC,MACI;MACD,MAAMR,kBAAkB,GAAGxX,yBAAyB,CAAC+X,QAAQ,EAAET,QAAQ,CAACrX,UAAU,CAAC;MACnF,MAAM6F,MAAM,GAAGI,kBAAkB,CAAC6R,QAAQ,CAACjS,MAAM,CAAC,GAAGiS,QAAQ,CAACjS,MAAM,GAAGwR,QAAQ,CAAC/R,UAAU;MAC1F,MAAMkS,eAAe,GAAGtR,aAAa,CAACqR,kBAAkB,EAAE1R,MAAM,EAAE1F,iBAAiB,CAAC2X,QAAQ,CAAC,CAAC;MAC9FC,YAAY,GAAG;QACX,GAAGV,QAAQ,CAACT,QAAQ;QACpB,GAAGkB,QAAQ;QACXjV,QAAQ,EAAE;UACN5C,KAAK,EAAE6X,QAAQ,CAACjV,QAAQ,EAAE5C,KAAK;UAC/BC,MAAM,EAAE4X,QAAQ,CAACjV,QAAQ,EAAE3C;QAC/B,CAAC;QACDsD,SAAS,EAAE;UACPoC,gBAAgB,EAAE4R,eAAe;UACjC;UACA/T,YAAY,EAAE,CAACqU,QAAQ,CAACjV,QAAQ,GAAGrB,SAAS,GAAGuW,YAAY,EAAEvU,SAAS,CAACC,YAAY;UACnFiN,CAAC,EAAEsH,UAAU,CAACF,QAAQ,EAAEF,aAAa,CAAC;UACtCE;QACJ;MACJ,CAAC;MACD/W,UAAU,CAACsD,GAAG,CAACyT,QAAQ,CAAC1c,EAAE,EAAE2c,YAAY,CAAC;IAC7C;IACA,IAAI,CAACA,YAAY,CAAClV,QAAQ,KAAKrB,SAAS,IACpCuW,YAAY,CAAClV,QAAQ,CAAC5C,KAAK,KAAKuB,SAAS,IACzCuW,YAAY,CAAClV,QAAQ,CAAC3C,MAAM,KAAKsB,SAAS,KAC1C,CAACuW,YAAY,CAAChV,MAAM,EAAE;MACtB2U,gBAAgB,GAAG,KAAK;IAC5B;IACA,IAAII,QAAQ,CAACrS,QAAQ,EAAE;MACnB6R,eAAe,CAACS,YAAY,EAAEhX,UAAU,EAAEqW,YAAY,EAAErT,OAAO,CAAC;IACpE;EACJ;EACA,OAAO2T,gBAAgB;AAC3B;AACA,SAASO,kBAAkBA,CAAC/Y,IAAI,EAAEkY,YAAY,EAAE;EAC5C,IAAI,CAAClY,IAAI,CAACuG,QAAQ,EAAE;IAChB;EACJ;EACA,MAAMyS,UAAU,GAAGd,YAAY,CAAC3V,GAAG,CAACvC,IAAI,CAACuG,QAAQ,CAAC;EAClD,IAAIyS,UAAU,EAAE;IACZA,UAAU,CAAC7T,GAAG,CAACnF,IAAI,CAAC9D,EAAE,EAAE8D,IAAI,CAAC;EACjC,CAAC,MACI;IACDkY,YAAY,CAAC/S,GAAG,CAACnF,IAAI,CAACuG,QAAQ,EAAE,IAAIxB,GAAG,CAAC,CAAC,CAAC/E,IAAI,CAAC9D,EAAE,EAAE8D,IAAI,CAAC,CAAC,CAAC,CAAC;EAC/D;AACJ;AACA;AACA;AACA;AACA,SAASoY,eAAeA,CAACpY,IAAI,EAAE6B,UAAU,EAAEqW,YAAY,EAAErT,OAAO,EAAE;EAC9D,MAAM;IAAE4S,oBAAoB;IAAE3W,UAAU;IAAEsF;EAAW,CAAC,GAAGyR,YAAY,CAACL,cAAc,EAAE3S,OAAO,CAAC;EAC9F,MAAM0B,QAAQ,GAAGvG,IAAI,CAACuG,QAAQ;EAC9B,MAAMD,UAAU,GAAGzE,UAAU,CAACU,GAAG,CAACgE,QAAQ,CAAC;EAC3C,IAAI,CAACD,UAAU,EAAE;IACbxE,OAAO,CAACC,IAAI,CAAC,eAAewE,QAAQ,sGAAsG,CAAC;IAC3I;EACJ;EACAwS,kBAAkB,CAAC/Y,IAAI,EAAEkY,YAAY,CAAC;EACtC,MAAMQ,aAAa,GAAGjB,oBAAoB,GAAG,IAAI,GAAG,CAAC;EACrD,MAAM;IAAEpW,CAAC;IAAEE,CAAC;IAAEiQ;EAAE,CAAC,GAAGyH,iBAAiB,CAACjZ,IAAI,EAAEsG,UAAU,EAAExF,UAAU,EAAEsF,UAAU,EAAEsS,aAAa,CAAC;EAC9F,MAAM;IAAEhS;EAAiB,CAAC,GAAG1G,IAAI,CAACsE,SAAS;EAC3C,MAAM4U,eAAe,GAAG7X,CAAC,KAAKqF,gBAAgB,CAACrF,CAAC,IAAIE,CAAC,KAAKmF,gBAAgB,CAACnF,CAAC;EAC5E,IAAI2X,eAAe,IAAI1H,CAAC,KAAKxR,IAAI,CAACsE,SAAS,CAACkN,CAAC,EAAE;IAC3C;IACA3P,UAAU,CAACsD,GAAG,CAACnF,IAAI,CAAC9D,EAAE,EAAE;MACpB,GAAG8D,IAAI;MACPsE,SAAS,EAAE;QACP,GAAGtE,IAAI,CAACsE,SAAS;QACjBoC,gBAAgB,EAAEwS,eAAe,GAAG;UAAE7X,CAAC;UAAEE;QAAE,CAAC,GAAGmF,gBAAgB;QAC/D8K;MACJ;IACJ,CAAC,CAAC;EACN;AACJ;AACA,SAASsH,UAAUA,CAAC9Y,IAAI,EAAE0Y,aAAa,EAAE;EACrC,OAAO,CAAC1O,SAAS,CAAChK,IAAI,CAACoR,MAAM,CAAC,GAAGpR,IAAI,CAACoR,MAAM,GAAG,CAAC,KAAKpR,IAAI,CAACmR,QAAQ,GAAGuH,aAAa,GAAG,CAAC,CAAC;AAC3F;AACA,SAASO,iBAAiBA,CAACE,SAAS,EAAE7S,UAAU,EAAExF,UAAU,EAAEsF,UAAU,EAAEsS,aAAa,EAAE;EACrF,MAAM;IAAErX,CAAC,EAAEmF,OAAO;IAAEjF,CAAC,EAAEkF;EAAQ,CAAC,GAAGH,UAAU,CAAChC,SAAS,CAACoC,gBAAgB;EACxE,MAAM8B,eAAe,GAAGvH,iBAAiB,CAACkY,SAAS,CAAC;EACpD,MAAMd,kBAAkB,GAAGxX,yBAAyB,CAACsY,SAAS,EAAErY,UAAU,CAAC;EAC3E,MAAMwX,eAAe,GAAGvR,kBAAkB,CAACoS,SAAS,CAACxS,MAAM,CAAC,GACtDK,aAAa,CAACqR,kBAAkB,EAAEc,SAAS,CAACxS,MAAM,EAAE6B,eAAe,CAAC,GACpE6P,kBAAkB;EACxB,IAAIe,gBAAgB,GAAGpS,aAAa,CAAC;IAAE3F,CAAC,EAAEmF,OAAO,GAAG8R,eAAe,CAACjX,CAAC;IAAEE,CAAC,EAAEkF,OAAO,GAAG6R,eAAe,CAAC/W;EAAE,CAAC,EAAE6E,UAAU,EAAEoC,eAAe,CAAC;EACrI,IAAI2Q,SAAS,CAACxS,MAAM,KAAK,QAAQ,EAAE;IAC/ByS,gBAAgB,GAAG9Q,qBAAqB,CAAC8Q,gBAAgB,EAAE5Q,eAAe,EAAElC,UAAU,CAAC;EAC3F;EACA,MAAM+S,MAAM,GAAGP,UAAU,CAACK,SAAS,EAAET,aAAa,CAAC;EACnD,MAAMY,OAAO,GAAGhT,UAAU,CAAChC,SAAS,CAACkN,CAAC,IAAI,CAAC;EAC3C,OAAO;IACHnQ,CAAC,EAAE+X,gBAAgB,CAAC/X,CAAC;IACrBE,CAAC,EAAE6X,gBAAgB,CAAC7X,CAAC;IACrBiQ,CAAC,EAAE8H,OAAO,GAAGD,MAAM,GAAGC,OAAO,GAAGD;EACpC,CAAC;AACL;AACA,SAASE,kBAAkBA,CAACC,QAAQ,EAAE3X,UAAU,EAAEqW,YAAY,EAAEpX,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;EACjF,MAAM2Y,OAAO,GAAG,EAAE;EAClB,MAAMC,gBAAgB,GAAG,IAAI3U,GAAG,CAAC,CAAC;EAClC;EACA,KAAK,MAAM4U,KAAK,IAAIH,QAAQ,EAAE;IAC1B,MAAM/Q,MAAM,GAAG5G,UAAU,CAACU,GAAG,CAACoX,KAAK,CAACpT,QAAQ,CAAC;IAC7C,IAAI,CAACkC,MAAM,EAAE;MACT;IACJ;IACA,MAAMmR,UAAU,GAAGF,gBAAgB,CAACnX,GAAG,CAACoX,KAAK,CAACpT,QAAQ,CAAC,EAAEsT,YAAY,IAAI3V,UAAU,CAACuE,MAAM,CAAC;IAC3F,MAAMoR,YAAY,GAAGvQ,gBAAgB,CAACsQ,UAAU,EAAED,KAAK,CAAC1W,IAAI,CAAC;IAC7DyW,gBAAgB,CAACvU,GAAG,CAACwU,KAAK,CAACpT,QAAQ,EAAE;MAAEsT,YAAY;MAAEpR;IAAO,CAAC,CAAC;EAClE;EACA,IAAIiR,gBAAgB,CAAC3a,IAAI,GAAG,CAAC,EAAE;IAC3B2a,gBAAgB,CAACpa,OAAO,CAAC,CAAC;MAAEua,YAAY;MAAEpR;IAAO,CAAC,EAAElC,QAAQ,KAAK;MAC7D;MACA,MAAMG,gBAAgB,GAAG+B,MAAM,CAACnE,SAAS,CAACoC,gBAAgB;MAC1D,MAAM2B,UAAU,GAAGpH,iBAAiB,CAACwH,MAAM,CAAC;MAC5C,MAAMvH,MAAM,GAAGuH,MAAM,CAACvH,MAAM,IAAIJ,UAAU;MAC1C;MACA,MAAMgZ,OAAO,GAAGD,YAAY,CAACxY,CAAC,GAAGqF,gBAAgB,CAACrF,CAAC,GAAG+G,IAAI,CAACmC,KAAK,CAACnC,IAAI,CAACQ,GAAG,CAAClC,gBAAgB,CAACrF,CAAC,GAAGwY,YAAY,CAACxY,CAAC,CAAC,CAAC,GAAG,CAAC;MACnH,MAAM0Y,OAAO,GAAGF,YAAY,CAACtY,CAAC,GAAGmF,gBAAgB,CAACnF,CAAC,GAAG6G,IAAI,CAACmC,KAAK,CAACnC,IAAI,CAACQ,GAAG,CAAClC,gBAAgB,CAACnF,CAAC,GAAGsY,YAAY,CAACtY,CAAC,CAAC,CAAC,GAAG,CAAC;MACnH,MAAMyY,QAAQ,GAAG5R,IAAI,CAACD,GAAG,CAACE,UAAU,CAACtH,KAAK,EAAEqH,IAAI,CAACmC,KAAK,CAACsP,YAAY,CAAC9Y,KAAK,CAAC,CAAC;MAC3E,MAAMkZ,SAAS,GAAG7R,IAAI,CAACD,GAAG,CAACE,UAAU,CAACrH,MAAM,EAAEoH,IAAI,CAACmC,KAAK,CAACsP,YAAY,CAAC7Y,MAAM,CAAC,CAAC;MAC9E,MAAMkZ,WAAW,GAAG,CAACF,QAAQ,GAAG3R,UAAU,CAACtH,KAAK,IAAIG,MAAM,CAAC,CAAC,CAAC;MAC7D,MAAMiZ,YAAY,GAAG,CAACF,SAAS,GAAG5R,UAAU,CAACrH,MAAM,IAAIE,MAAM,CAAC,CAAC,CAAC;MAChE;MACA,IAAI4Y,OAAO,GAAG,CAAC,IAAIC,OAAO,GAAG,CAAC,IAAIG,WAAW,IAAIC,YAAY,EAAE;QAC3DV,OAAO,CAACja,IAAI,CAAC;UACTtD,EAAE,EAAEqK,QAAQ;UACZnK,IAAI,EAAE,UAAU;UAChBkF,QAAQ,EAAE;YACND,CAAC,EAAEoH,MAAM,CAACnH,QAAQ,CAACD,CAAC,GAAGyY,OAAO,GAAGI,WAAW;YAC5C3Y,CAAC,EAAEkH,MAAM,CAACnH,QAAQ,CAACC,CAAC,GAAGwY,OAAO,GAAGI;UACrC;QACJ,CAAC,CAAC;QACF;AAChB;AACA;AACA;QACgBjC,YAAY,CAAC3V,GAAG,CAACgE,QAAQ,CAAC,EAAEjH,OAAO,CAAE6Z,SAAS,IAAK;UAC/C,IAAI,CAACK,QAAQ,CAAC1H,IAAI,CAAE6H,KAAK,IAAKA,KAAK,CAACzd,EAAE,KAAKid,SAAS,CAACjd,EAAE,CAAC,EAAE;YACtDud,OAAO,CAACja,IAAI,CAAC;cACTtD,EAAE,EAAEid,SAAS,CAACjd,EAAE;cAChBE,IAAI,EAAE,UAAU;cAChBkF,QAAQ,EAAE;gBACND,CAAC,EAAE8X,SAAS,CAAC7X,QAAQ,CAACD,CAAC,GAAGyY,OAAO;gBACjCvY,CAAC,EAAE4X,SAAS,CAAC7X,QAAQ,CAACC,CAAC,GAAGwY;cAC9B;YACJ,CAAC,CAAC;UACN;QACJ,CAAC,CAAC;MACN;MACA;MACA,IAAI1R,UAAU,CAACtH,KAAK,GAAG8Y,YAAY,CAAC9Y,KAAK,IAAIsH,UAAU,CAACrH,MAAM,GAAG6Y,YAAY,CAAC7Y,MAAM,IAAI8Y,OAAO,IAAIC,OAAO,EAAE;QACxGN,OAAO,CAACja,IAAI,CAAC;UACTtD,EAAE,EAAEqK,QAAQ;UACZnK,IAAI,EAAE,YAAY;UAClBge,aAAa,EAAE,IAAI;UACnB/R,UAAU,EAAE;YACRtH,KAAK,EAAEiZ,QAAQ,IAAIF,OAAO,GAAG5Y,MAAM,CAAC,CAAC,CAAC,GAAG4Y,OAAO,GAAGI,WAAW,GAAG,CAAC,CAAC;YACnElZ,MAAM,EAAEiZ,SAAS,IAAIF,OAAO,GAAG7Y,MAAM,CAAC,CAAC,CAAC,GAAG6Y,OAAO,GAAGI,YAAY,GAAG,CAAC;UACzE;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA,OAAOV,OAAO;AAClB;AACA,SAASY,mBAAmBA,CAACC,OAAO,EAAEzY,UAAU,EAAEqW,YAAY,EAAEqC,OAAO,EAAEzZ,UAAU,EAAEsF,UAAU,EAAE;EAC7F,MAAMoU,YAAY,GAAGD,OAAO,EAAEE,aAAa,CAAC,mBAAmB,CAAC;EAChE,IAAIC,gBAAgB,GAAG,KAAK;EAC5B,IAAI,CAACF,YAAY,EAAE;IACf,OAAO;MAAEf,OAAO,EAAE,EAAE;MAAEiB;IAAiB,CAAC;EAC5C;EACA,MAAMjB,OAAO,GAAG,EAAE;EAClB,MAAMkB,KAAK,GAAG/M,MAAM,CAACgN,gBAAgB,CAACJ,YAAY,CAAC;EACnD,MAAM;IAAEK,GAAG,EAAEvf;EAAK,CAAC,GAAG,IAAIsS,MAAM,CAACkN,iBAAiB,CAACH,KAAK,CAAC1N,SAAS,CAAC;EACnE;EACA,MAAM8N,oBAAoB,GAAG,EAAE;EAC/B,KAAK,MAAMC,MAAM,IAAIV,OAAO,CAAC5W,MAAM,CAAC,CAAC,EAAE;IACnC,MAAM1D,IAAI,GAAG6B,UAAU,CAACU,GAAG,CAACyY,MAAM,CAAC9e,EAAE,CAAC;IACtC,IAAI,CAAC8D,IAAI,EAAE;MACP;IACJ;IACA,IAAIA,IAAI,CAAC6D,MAAM,EAAE;MACbhC,UAAU,CAACsD,GAAG,CAACnF,IAAI,CAAC9D,EAAE,EAAE;QACpB,GAAG8D,IAAI;QACPsE,SAAS,EAAE;UACP,GAAGtE,IAAI,CAACsE,SAAS;UACjBC,YAAY,EAAEjC;QAClB;MACJ,CAAC,CAAC;MACFoY,gBAAgB,GAAG,IAAI;MACvB;IACJ;IACA,MAAMrS,UAAU,GAAGkF,aAAa,CAACyN,MAAM,CAAClM,WAAW,CAAC;IACpD,MAAMmM,gBAAgB,GAAGjb,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,KAAKsH,UAAU,CAACtH,KAAK,IAAIf,IAAI,CAAC2D,QAAQ,CAAC3C,MAAM,KAAKqH,UAAU,CAACrH,MAAM;IAC/G,MAAMka,QAAQ,GAAG,CAAC,EAAE7S,UAAU,CAACtH,KAAK,IAChCsH,UAAU,CAACrH,MAAM,KAChBia,gBAAgB,IAAI,CAACjb,IAAI,CAACsE,SAAS,CAACC,YAAY,IAAIyW,MAAM,CAACG,KAAK,CAAC,CAAC;IACvE,IAAID,QAAQ,EAAE;MACV,MAAMnM,UAAU,GAAGiM,MAAM,CAAClM,WAAW,CAACM,qBAAqB,CAAC,CAAC;MAC7D,MAAMzI,MAAM,GAAGI,kBAAkB,CAAC/G,IAAI,CAAC2G,MAAM,CAAC,GAAG3G,IAAI,CAAC2G,MAAM,GAAGP,UAAU;MACzE,IAAI;QAAEM;MAAiB,CAAC,GAAG1G,IAAI,CAACsE,SAAS;MACzC,IAAItE,IAAI,CAACuG,QAAQ,IAAIvG,IAAI,CAAC2G,MAAM,KAAK,QAAQ,EAAE;QAC3CD,gBAAgB,GAAG4B,qBAAqB,CAAC5B,gBAAgB,EAAE2B,UAAU,EAAExG,UAAU,CAACU,GAAG,CAACvC,IAAI,CAACuG,QAAQ,CAAC,CAAC;MACzG,CAAC,MACI,IAAII,MAAM,EAAE;QACbD,gBAAgB,GAAGM,aAAa,CAACN,gBAAgB,EAAEC,MAAM,EAAE0B,UAAU,CAAC;MAC1E;MACA,MAAM+S,OAAO,GAAG;QACZ,GAAGpb,IAAI;QACP2D,QAAQ,EAAE0E,UAAU;QACpB/D,SAAS,EAAE;UACP,GAAGtE,IAAI,CAACsE,SAAS;UACjBoC,gBAAgB;UAChBnC,YAAY,EAAE;YACVjE,MAAM,EAAEuO,eAAe,CAAC,QAAQ,EAAEmM,MAAM,CAAClM,WAAW,EAAEC,UAAU,EAAEzT,IAAI,EAAE0E,IAAI,CAAC9D,EAAE,CAAC;YAChFsE,MAAM,EAAEqO,eAAe,CAAC,QAAQ,EAAEmM,MAAM,CAAClM,WAAW,EAAEC,UAAU,EAAEzT,IAAI,EAAE0E,IAAI,CAAC9D,EAAE;UACnF;QACJ;MACJ,CAAC;MACD2F,UAAU,CAACsD,GAAG,CAACnF,IAAI,CAAC9D,EAAE,EAAEkf,OAAO,CAAC;MAChC,IAAIpb,IAAI,CAACuG,QAAQ,EAAE;QACf6R,eAAe,CAACgD,OAAO,EAAEvZ,UAAU,EAAEqW,YAAY,EAAE;UAAEpX;QAAW,CAAC,CAAC;MACtE;MACA4Z,gBAAgB,GAAG,IAAI;MACvB,IAAIO,gBAAgB,EAAE;QAClBxB,OAAO,CAACja,IAAI,CAAC;UACTtD,EAAE,EAAE8D,IAAI,CAAC9D,EAAE;UACXE,IAAI,EAAE,YAAY;UAClBiM;QACJ,CAAC,CAAC;QACF,IAAIrI,IAAI,CAAC4G,YAAY,IAAI5G,IAAI,CAACuG,QAAQ,EAAE;UACpCwU,oBAAoB,CAACvb,IAAI,CAAC;YACtBtD,EAAE,EAAE8D,IAAI,CAAC9D,EAAE;YACXqK,QAAQ,EAAEvG,IAAI,CAACuG,QAAQ;YACvBtD,IAAI,EAAEiB,UAAU,CAACkX,OAAO,EAAEta,UAAU;UACxC,CAAC,CAAC;QACN;MACJ;IACJ;EACJ;EACA,IAAIia,oBAAoB,CAACtb,MAAM,GAAG,CAAC,EAAE;IACjC,MAAM4b,mBAAmB,GAAG9B,kBAAkB,CAACwB,oBAAoB,EAAElZ,UAAU,EAAEqW,YAAY,EAAEpX,UAAU,CAAC;IAC1G2Y,OAAO,CAACja,IAAI,CAAC,GAAG6b,mBAAmB,CAAC;EACxC;EACA,OAAO;IAAE5B,OAAO;IAAEiB;EAAiB,CAAC;AACxC;AACA,eAAeY,KAAKA,CAAC;EAAEC,KAAK;EAAElW,OAAO;EAAE4H,SAAS;EAAEuO,eAAe;EAAEza,KAAK;EAAEC;AAAQ,CAAC,EAAE;EACjF,IAAI,CAACqE,OAAO,IAAK,CAACkW,KAAK,CAACla,CAAC,IAAI,CAACka,KAAK,CAACha,CAAE,EAAE;IACpC,OAAOiE,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EACjC;EACA,MAAMgW,YAAY,GAAG,MAAMpW,OAAO,CAACqW,sBAAsB,CAAC;IACtDra,CAAC,EAAE4L,SAAS,CAAC,CAAC,CAAC,GAAGsO,KAAK,CAACla,CAAC;IACzBE,CAAC,EAAE0L,SAAS,CAAC,CAAC,CAAC,GAAGsO,KAAK,CAACha,CAAC;IACzBjG,IAAI,EAAE2R,SAAS,CAAC,CAAC;EACrB,CAAC,EAAE,CACC,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAClM,KAAK,EAAEC,MAAM,CAAC,CAClB,EAAEwa,eAAe,CAAC;EACnB,MAAMG,gBAAgB,GAAG,CAAC,CAACF,YAAY,KAClCA,YAAY,CAACpa,CAAC,KAAK4L,SAAS,CAAC,CAAC,CAAC,IAAIwO,YAAY,CAACla,CAAC,KAAK0L,SAAS,CAAC,CAAC,CAAC,IAAIwO,YAAY,CAACG,CAAC,KAAK3O,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3G,OAAOzH,OAAO,CAACC,OAAO,CAACkW,gBAAgB,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,qBAAqBA,CAACzf,IAAI,EAAEmD,UAAU,EAAEuc,aAAa,EAAEC,gBAAgB,EAAE7V,MAAM,EAAE8P,QAAQ,EAAE;EAChG;AACJ;AACA;AACA;AACA;EACI,IAAIhX,GAAG,GAAGkH,MAAM;EAChB,MAAM8V,OAAO,GAAGD,gBAAgB,CAACxZ,GAAG,CAACvD,GAAG,CAAC,IAAI,IAAI+F,GAAG,CAAC,CAAC;EACtDgX,gBAAgB,CAAC5W,GAAG,CAACnG,GAAG,EAAEgd,OAAO,CAAC7W,GAAG,CAAC2W,aAAa,EAAEvc,UAAU,CAAC,CAAC;EACjEP,GAAG,GAAG,GAAGkH,MAAM,IAAI9J,IAAI,EAAE;EACzB,MAAM6f,OAAO,GAAGF,gBAAgB,CAACxZ,GAAG,CAACvD,GAAG,CAAC,IAAI,IAAI+F,GAAG,CAAC,CAAC;EACtDgX,gBAAgB,CAAC5W,GAAG,CAACnG,GAAG,EAAEid,OAAO,CAAC9W,GAAG,CAAC2W,aAAa,EAAEvc,UAAU,CAAC,CAAC;EACjE,IAAIyW,QAAQ,EAAE;IACVhX,GAAG,GAAG,GAAGkH,MAAM,IAAI9J,IAAI,IAAI4Z,QAAQ,EAAE;IACrC,MAAMkG,SAAS,GAAGH,gBAAgB,CAACxZ,GAAG,CAACvD,GAAG,CAAC,IAAI,IAAI+F,GAAG,CAAC,CAAC;IACxDgX,gBAAgB,CAAC5W,GAAG,CAACnG,GAAG,EAAEkd,SAAS,CAAC/W,GAAG,CAAC2W,aAAa,EAAEvc,UAAU,CAAC,CAAC;EACvE;AACJ;AACA,SAAS4c,sBAAsBA,CAACJ,gBAAgB,EAAEK,UAAU,EAAElc,KAAK,EAAE;EACjE6b,gBAAgB,CAACpD,KAAK,CAAC,CAAC;EACxByD,UAAU,CAACzD,KAAK,CAAC,CAAC;EAClB,KAAK,MAAMtY,IAAI,IAAIH,KAAK,EAAE;IACtB,MAAM;MAAEI,MAAM,EAAE2Q,UAAU;MAAEzQ,MAAM,EAAE0Q,UAAU;MAAE3U,YAAY,GAAG,IAAI;MAAEC,YAAY,GAAG;IAAK,CAAC,GAAG6D,IAAI;IACjG,MAAMd,UAAU,GAAG;MAAE8c,MAAM,EAAEhc,IAAI,CAACnE,EAAE;MAAEoE,MAAM,EAAE2Q,UAAU;MAAEzQ,MAAM,EAAE0Q,UAAU;MAAE3U,YAAY;MAAEC;IAAa,CAAC;IAC1G,MAAM8f,SAAS,GAAG,GAAGrL,UAAU,IAAI1U,YAAY,KAAK2U,UAAU,IAAI1U,YAAY,EAAE;IAChF,MAAM+f,SAAS,GAAG,GAAGrL,UAAU,IAAI1U,YAAY,KAAKyU,UAAU,IAAI1U,YAAY,EAAE;IAChFsf,qBAAqB,CAAC,QAAQ,EAAEtc,UAAU,EAAEgd,SAAS,EAAER,gBAAgB,EAAE9K,UAAU,EAAE1U,YAAY,CAAC;IAClGsf,qBAAqB,CAAC,QAAQ,EAAEtc,UAAU,EAAE+c,SAAS,EAAEP,gBAAgB,EAAE7K,UAAU,EAAE1U,YAAY,CAAC;IAClG4f,UAAU,CAACjX,GAAG,CAAC9E,IAAI,CAACnE,EAAE,EAAEmE,IAAI,CAAC;EACjC;AACJ;AAEA,SAASmc,eAAeA,CAAC3d,CAAC,EAAEC,CAAC,EAAE;EAC3B,IAAID,CAAC,KAAK,IAAI,IAAIC,CAAC,KAAK,IAAI,EAAE;IAC1B,OAAO,KAAK;EAChB;EACA,MAAM2d,EAAE,GAAGvN,KAAK,CAACwN,OAAO,CAAC7d,CAAC,CAAC,GAAGA,CAAC,GAAG,CAACA,CAAC,CAAC;EACrC,MAAM8d,EAAE,GAAGzN,KAAK,CAACwN,OAAO,CAAC5d,CAAC,CAAC,GAAGA,CAAC,GAAG,CAACA,CAAC,CAAC;EACrC,IAAI2d,EAAE,CAAChd,MAAM,KAAKkd,EAAE,CAACld,MAAM,EAAE;IACzB,OAAO,KAAK;EAChB;EACA,KAAK,IAAI2V,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqH,EAAE,CAAChd,MAAM,EAAE2V,CAAC,EAAE,EAAE;IAChC,IAAIqH,EAAE,CAACrH,CAAC,CAAC,CAAClZ,EAAE,KAAKygB,EAAE,CAACvH,CAAC,CAAC,CAAClZ,EAAE,IAAIugB,EAAE,CAACrH,CAAC,CAAC,CAAChZ,IAAI,KAAKugB,EAAE,CAACvH,CAAC,CAAC,CAAChZ,IAAI,IAAI,CAACia,MAAM,CAACuG,EAAE,CAACH,EAAE,CAACrH,CAAC,CAAC,CAACyH,IAAI,EAAEF,EAAE,CAACvH,CAAC,CAAC,CAACyH,IAAI,CAAC,EAAE;MAC1F,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AAEA,SAASC,gBAAgBA,CAAC9c,IAAI,EAAE6B,UAAU,EAAE;EACxC,IAAI,CAAC7B,IAAI,CAACuG,QAAQ,EAAE;IAChB,OAAO,KAAK;EAChB;EACA,MAAMD,UAAU,GAAGzE,UAAU,CAACU,GAAG,CAACvC,IAAI,CAACuG,QAAQ,CAAC;EAChD,IAAI,CAACD,UAAU,EAAE;IACb,OAAO,KAAK;EAChB;EACA,IAAIA,UAAU,CAAC6K,QAAQ,EAAE;IACrB,OAAO,IAAI;EACf;EACA,OAAO2L,gBAAgB,CAACxW,UAAU,EAAEzE,UAAU,CAAC;AACnD;AACA,SAASkb,WAAWA,CAACvc,MAAM,EAAEwc,QAAQ,EAAEzC,OAAO,EAAE;EAC5C,IAAI0C,OAAO,GAAGzc,MAAM;EACpB,GAAG;IACC,IAAIyc,OAAO,EAAEC,OAAO,GAAGF,QAAQ,CAAC,EAC5B,OAAO,IAAI;IACf,IAAIC,OAAO,KAAK1C,OAAO,EACnB,OAAO,KAAK;IAChB0C,OAAO,GAAGA,OAAO,EAAEE,aAAa;EACpC,CAAC,QAAQF,OAAO;EAChB,OAAO,KAAK;AAChB;AACA;AACA,SAASG,YAAYA,CAACvb,UAAU,EAAEwb,cAAc,EAAEC,QAAQ,EAAEpX,MAAM,EAAE;EAChE,MAAMqX,SAAS,GAAG,IAAIxY,GAAG,CAAC,CAAC;EAC3B,KAAK,MAAM,CAAC7I,EAAE,EAAE8D,IAAI,CAAC,IAAI6B,UAAU,EAAE;IACjC,IAAI,CAAC7B,IAAI,CAACmR,QAAQ,IAAInR,IAAI,CAAC9D,EAAE,KAAKgK,MAAM,MACnC,CAAClG,IAAI,CAACuG,QAAQ,IAAI,CAACuW,gBAAgB,CAAC9c,IAAI,EAAE6B,UAAU,CAAC,CAAC,KACtD7B,IAAI,CAACwd,SAAS,IAAKH,cAAc,IAAI,OAAOrd,IAAI,CAACwd,SAAS,KAAK,WAAY,CAAC,EAAE;MAC/E,MAAM3E,YAAY,GAAGhX,UAAU,CAACU,GAAG,CAACrG,EAAE,CAAC;MACvC,IAAI2c,YAAY,EAAE;QACd0E,SAAS,CAACpY,GAAG,CAACjJ,EAAE,EAAE;UACdA,EAAE;UACFoF,QAAQ,EAAEuX,YAAY,CAACvX,QAAQ,IAAI;YAAED,CAAC,EAAE,CAAC;YAAEE,CAAC,EAAE;UAAE,CAAC;UACjDyH,QAAQ,EAAE;YACN3H,CAAC,EAAEic,QAAQ,CAACjc,CAAC,GAAGwX,YAAY,CAACvU,SAAS,CAACoC,gBAAgB,CAACrF,CAAC;YACzDE,CAAC,EAAE+b,QAAQ,CAAC/b,CAAC,GAAGsX,YAAY,CAACvU,SAAS,CAACoC,gBAAgB,CAACnF;UAC5D,CAAC;UACDoF,MAAM,EAAEkS,YAAY,CAAClS,MAAM;UAC3BJ,QAAQ,EAAEsS,YAAY,CAACtS,QAAQ;UAC/BrF,MAAM,EAAE2X,YAAY,CAAC3X,MAAM;UAC3B0F,YAAY,EAAEiS,YAAY,CAACjS,YAAY;UACvCtC,SAAS,EAAE;YACPoC,gBAAgB,EAAEmS,YAAY,CAACvU,SAAS,CAACoC,gBAAgB,IAAI;cAAErF,CAAC,EAAE,CAAC;cAAEE,CAAC,EAAE;YAAE;UAC9E,CAAC;UACDoC,QAAQ,EAAE;YACN5C,KAAK,EAAE8X,YAAY,CAAClV,QAAQ,CAAC5C,KAAK,IAAI,CAAC;YACvCC,MAAM,EAAE6X,YAAY,CAAClV,QAAQ,CAAC3C,MAAM,IAAI;UAC5C;QACJ,CAAC,CAAC;MACN;IACJ;EACJ;EACA,OAAOuc,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,qBAAqBA,CAAC;EAAEvX,MAAM;EAAEqX,SAAS;EAAE1b,UAAU;EAAE4C,QAAQ,GAAG;AAAM,CAAC,EAAE;EAChF,MAAMiZ,kBAAkB,GAAG,EAAE;EAC7B,KAAK,MAAM,CAACxhB,EAAE,EAAEyhB,QAAQ,CAAC,IAAIJ,SAAS,EAAE;IACpC,MAAMvd,IAAI,GAAG6B,UAAU,CAACU,GAAG,CAACrG,EAAE,CAAC,EAAEoI,SAAS,CAACsU,QAAQ;IACnD,IAAI5Y,IAAI,EAAE;MACN0d,kBAAkB,CAACle,IAAI,CAAC;QACpB,GAAGQ,IAAI;QACPsB,QAAQ,EAAEqc,QAAQ,CAACrc,QAAQ;QAC3BmD;MACJ,CAAC,CAAC;IACN;EACJ;EACA,IAAI,CAACyB,MAAM,EAAE;IACT,OAAO,CAACwX,kBAAkB,CAAC,CAAC,CAAC,EAAEA,kBAAkB,CAAC;EACtD;EACA,MAAM1d,IAAI,GAAG6B,UAAU,CAACU,GAAG,CAAC2D,MAAM,CAAC,EAAE5B,SAAS,CAACsU,QAAQ;EACvD,OAAO,CACH,CAAC5Y,IAAI,GACC0d,kBAAkB,CAAC,CAAC,CAAC,GACrB;IACE,GAAG1d,IAAI;IACPsB,QAAQ,EAAEic,SAAS,CAAChb,GAAG,CAAC2D,MAAM,CAAC,EAAE5E,QAAQ,IAAItB,IAAI,CAACsB,QAAQ;IAC1DmD;EACJ,CAAC,EACLiZ,kBAAkB,CACrB;AACL;;AAEA;AACA,SAASE,MAAMA,CAAC;EAAEC,eAAe;EAAEC,aAAa;EAAEC,WAAW;EAAEC,MAAM;EAAEC;AAAY,CAAC,EAAE;EAClF,IAAIC,OAAO,GAAG;IAAE7c,CAAC,EAAE,IAAI;IAAEE,CAAC,EAAE;EAAK,CAAC;EAClC,IAAI4c,SAAS,GAAG,CAAC;EACjB,IAAIZ,SAAS,GAAG,IAAIxY,GAAG,CAAC,CAAC;EACzB,IAAIqZ,cAAc,GAAG,KAAK;EAC1B,IAAIC,aAAa,GAAG;IAAEhd,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EAClC,IAAI2L,eAAe,GAAG,IAAI;EAC1B,IAAIoR,WAAW,GAAG,KAAK;EACvB,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,SAAS,GAAG,KAAK,CAAC,CAAC;EACvB;EACA,SAASxD,MAAMA,CAAC;IAAEyD,eAAe;IAAEC,cAAc;IAAEnE,OAAO;IAAEoE,YAAY;IAAEzY,MAAM;IAAE0Y,iBAAiB,GAAG;EAAG,CAAC,EAAE;IACxGL,WAAW,GAAGnjB,MAAM,CAACmf,OAAO,CAAC;IAC7B,SAASsE,WAAWA,CAAC;MAAExd,CAAC;MAAEE;IAAE,CAAC,EAAEud,SAAS,EAAE;MACtC,MAAM;QAAEjd,UAAU;QAAEuE,UAAU;QAAEkE,QAAQ;QAAEE,UAAU;QAAE1J,UAAU;QAAEie,UAAU;QAAEC,eAAe;QAAE3Y,OAAO;QAAE4Y;MAAqB,CAAC,GAAGnB,aAAa,CAAC,CAAC;MAChJI,OAAO,GAAG;QAAE7c,CAAC;QAAEE;MAAE,CAAC;MAClB,IAAI2d,SAAS,GAAG,KAAK;MACrB,IAAIC,QAAQ,GAAG;QAAE9d,CAAC,EAAE,CAAC;QAAEE,CAAC,EAAE,CAAC;QAAEmB,EAAE,EAAE,CAAC;QAAEC,EAAE,EAAE;MAAE,CAAC;MAC3C,IAAI4a,SAAS,CAACxe,IAAI,GAAG,CAAC,IAAIqH,UAAU,EAAE;QAClC,MAAMnD,IAAI,GAAGF,sBAAsB,CAACwa,SAAS,CAAC;QAC9C4B,QAAQ,GAAG9V,SAAS,CAACpG,IAAI,CAAC;MAC9B;MACA,KAAK,MAAM,CAAC/G,EAAE,EAAEyhB,QAAQ,CAAC,IAAIJ,SAAS,EAAE;QACpC,IAAI,CAAC1b,UAAU,CAAC3C,GAAG,CAAChD,EAAE,CAAC,EAAE;UACrB;AACpB;AACA;AACA;UACoB;QACJ;QACA,IAAIiK,YAAY,GAAG;UAAE9E,CAAC,EAAEA,CAAC,GAAGsc,QAAQ,CAAC3U,QAAQ,CAAC3H,CAAC;UAAEE,CAAC,EAAEA,CAAC,GAAGoc,QAAQ,CAAC3U,QAAQ,CAACzH;QAAE,CAAC;QAC7E,IAAIiJ,UAAU,EAAE;UACZrE,YAAY,GAAGkE,YAAY,CAAClE,YAAY,EAAEmE,QAAQ,CAAC;QACvD;QACA;AAChB;AACA;AACA;QACgB,IAAI8U,kBAAkB,GAAG,CACrB,CAAChZ,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACpC,CAACA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACvC;QACD,IAAImX,SAAS,CAACxe,IAAI,GAAG,CAAC,IAAIqH,UAAU,IAAI,CAACuX,QAAQ,CAAChX,MAAM,EAAE;UACtD,MAAM;YAAED;UAAiB,CAAC,GAAGiX,QAAQ,CAACrZ,SAAS;UAC/C,MAAM+L,EAAE,GAAG3J,gBAAgB,CAACrF,CAAC,GAAG8d,QAAQ,CAAC9d,CAAC,GAAG+E,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC7D,MAAM1D,EAAE,GAAGgE,gBAAgB,CAACrF,CAAC,GAAGsc,QAAQ,CAACha,QAAQ,CAAC5C,KAAK,GAAGoe,QAAQ,CAACzc,EAAE,GAAG0D,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACxF,MAAMkK,EAAE,GAAG5J,gBAAgB,CAACnF,CAAC,GAAG4d,QAAQ,CAAC5d,CAAC,GAAG6E,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC7D,MAAMzD,EAAE,GAAG+D,gBAAgB,CAACnF,CAAC,GAAGoc,QAAQ,CAACha,QAAQ,CAAC3C,MAAM,GAAGme,QAAQ,CAACxc,EAAE,GAAGyD,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACzFgZ,kBAAkB,GAAG,CACjB,CAAC/O,EAAE,EAAEC,EAAE,CAAC,EACR,CAAC5N,EAAE,EAAEC,EAAE,CAAC,CACX;QACL;QACA,MAAM;UAAErB,QAAQ;UAAEoF;QAAiB,CAAC,GAAGT,qBAAqB,CAAC;UACzDC,MAAM,EAAEhK,EAAE;UACViK,YAAY;UACZtE,UAAU;UACVuE,UAAU,EAAEgZ,kBAAkB;UAC9Bte,UAAU;UACVuF;QACJ,CAAC,CAAC;QACF;QACA6Y,SAAS,GAAGA,SAAS,IAAIvB,QAAQ,CAACrc,QAAQ,CAACD,CAAC,KAAKC,QAAQ,CAACD,CAAC,IAAIsc,QAAQ,CAACrc,QAAQ,CAACC,CAAC,KAAKD,QAAQ,CAACC,CAAC;QACjGoc,QAAQ,CAACrc,QAAQ,GAAGA,QAAQ;QAC5Bqc,QAAQ,CAACrZ,SAAS,CAACoC,gBAAgB,GAAGA,gBAAgB;MAC1D;MACA,IAAI,CAACwY,SAAS,EAAE;QACZ;MACJ;MACAD,mBAAmB,CAAC1B,SAAS,EAAE,IAAI,CAAC;MACpC,IAAIuB,SAAS,KAAKd,MAAM,IAAIe,UAAU,IAAK,CAAC7Y,MAAM,IAAI8Y,eAAgB,CAAC,EAAE;QACrE,MAAM,CAAC3c,WAAW,EAAEgd,YAAY,CAAC,GAAG5B,qBAAqB,CAAC;UACtDvX,MAAM;UACNqX,SAAS;UACT1b;QACJ,CAAC,CAAC;QACFmc,MAAM,GAAGc,SAAS,EAAEvB,SAAS,EAAElb,WAAW,EAAEgd,YAAY,CAAC;QACzDN,UAAU,GAAGD,SAAS,EAAEzc,WAAW,EAAEgd,YAAY,CAAC;QAClD,IAAI,CAACnZ,MAAM,EAAE;UACT8Y,eAAe,GAAGF,SAAS,EAAEO,YAAY,CAAC;QAC9C;MACJ;IACJ;IACA,eAAeC,OAAOA,CAAA,EAAG;MACrB,IAAI,CAACpS,eAAe,EAAE;QAClB;MACJ;MACA,MAAM;QAAED,SAAS;QAAEqO,KAAK;QAAEiE,YAAY;QAAEC;MAAkB,CAAC,GAAG1B,aAAa,CAAC,CAAC;MAC7E,IAAI,CAAC0B,iBAAiB,EAAE;QACpBpB,cAAc,GAAG,KAAK;QACtBqB,oBAAoB,CAACtB,SAAS,CAAC;QAC/B;MACJ;MACA,MAAM,CAAClV,SAAS,EAAEC,SAAS,CAAC,GAAGL,WAAW,CAACwV,aAAa,EAAEnR,eAAe,EAAEqS,YAAY,CAAC;MACxF,IAAItW,SAAS,KAAK,CAAC,IAAIC,SAAS,KAAK,CAAC,EAAE;QACpCgV,OAAO,CAAC7c,CAAC,GAAG,CAAC6c,OAAO,CAAC7c,CAAC,IAAI,CAAC,IAAI4H,SAAS,GAAGgE,SAAS,CAAC,CAAC,CAAC;QACvDiR,OAAO,CAAC3c,CAAC,GAAG,CAAC2c,OAAO,CAAC3c,CAAC,IAAI,CAAC,IAAI2H,SAAS,GAAG+D,SAAS,CAAC,CAAC,CAAC;QACvD,IAAI,MAAMqO,KAAK,CAAC;UAAEja,CAAC,EAAE4H,SAAS;UAAE1H,CAAC,EAAE2H;QAAU,CAAC,CAAC,EAAE;UAC7C2V,WAAW,CAACX,OAAO,EAAE,IAAI,CAAC;QAC9B;MACJ;MACAC,SAAS,GAAGuB,qBAAqB,CAACJ,OAAO,CAAC;IAC9C;IACA,SAASK,SAASA,CAAC3S,KAAK,EAAE;MACtB,MAAM;QAAEnL,UAAU;QAAE+d,oBAAoB;QAAEvC,cAAc;QAAEpQ,SAAS;QAAE3C,QAAQ;QAAEE,UAAU;QAAEqV,iBAAiB;QAAEC,eAAe;QAAEC,oBAAoB;QAAEC;MAAuB,CAAC,GAAGlC,aAAa,CAAC,CAAC;MAC/LQ,WAAW,GAAG,IAAI;MAClB,IAAI,CAAC,CAACuB,iBAAiB,IAAI,CAAClB,YAAY,KAAK,CAACiB,oBAAoB,IAAI1Z,MAAM,EAAE;QAC1E,IAAI,CAACrE,UAAU,CAACU,GAAG,CAAC2D,MAAM,CAAC,EAAEiL,QAAQ,EAAE;UACnC;UACA6O,qBAAqB,CAAC,CAAC;QAC3B;MACJ;MACA,IAAIrB,YAAY,IAAIkB,iBAAiB,IAAI3Z,MAAM,EAAE;QAC7C2X,eAAe,GAAG3X,MAAM,CAAC;MAC7B;MACA,MAAMkH,UAAU,GAAGL,kBAAkB,CAACC,KAAK,CAACiT,WAAW,EAAE;QAAEhT,SAAS;QAAE3C,QAAQ;QAAEE,UAAU;QAAE0C;MAAgB,CAAC,CAAC;MAC9GgR,OAAO,GAAG9Q,UAAU;MACpBmQ,SAAS,GAAGH,YAAY,CAACvb,UAAU,EAAEwb,cAAc,EAAEjQ,UAAU,EAAElH,MAAM,CAAC;MACxE,IAAIqX,SAAS,CAACxe,IAAI,GAAG,CAAC,KAAKgf,WAAW,IAAI+B,eAAe,IAAK,CAAC5Z,MAAM,IAAI6Z,oBAAqB,CAAC,EAAE;QAC7F,MAAM,CAAC1d,WAAW,EAAEgd,YAAY,CAAC,GAAG5B,qBAAqB,CAAC;UACtDvX,MAAM;UACNqX,SAAS;UACT1b;QACJ,CAAC,CAAC;QACFkc,WAAW,GAAG/Q,KAAK,CAACiT,WAAW,EAAE1C,SAAS,EAAElb,WAAW,EAAEgd,YAAY,CAAC;QACtES,eAAe,GAAG9S,KAAK,CAACiT,WAAW,EAAE5d,WAAW,EAAEgd,YAAY,CAAC;QAC/D,IAAI,CAACnZ,MAAM,EAAE;UACT6Z,oBAAoB,GAAG/S,KAAK,CAACiT,WAAW,EAAEZ,YAAY,CAAC;QAC3D;MACJ;IACJ;IACA,MAAMa,cAAc,GAAG/kB,IAAI,CAAC,CAAC,CACxBglB,aAAa,CAACvB,iBAAiB,CAAC,CAChCwB,EAAE,CAAC,OAAO,EAAGpT,KAAK,IAAK;MACxB,MAAM;QAAEuN,OAAO;QAAE8F,iBAAiB;QAAEpT,SAAS;QAAE3C,QAAQ;QAAEE;MAAW,CAAC,GAAGsT,aAAa,CAAC,CAAC;MACvF5Q,eAAe,GAAGqN,OAAO,EAAEnL,qBAAqB,CAAC,CAAC,IAAI,IAAI;MAC1DoP,SAAS,GAAG,KAAK;MACjB,IAAI6B,iBAAiB,KAAK,CAAC,EAAE;QACzBV,SAAS,CAAC3S,KAAK,CAAC;MACpB;MACA,MAAMI,UAAU,GAAGL,kBAAkB,CAACC,KAAK,CAACiT,WAAW,EAAE;QAAEhT,SAAS;QAAE3C,QAAQ;QAAEE,UAAU;QAAE0C;MAAgB,CAAC,CAAC;MAC9GgR,OAAO,GAAG9Q,UAAU;MACpBiR,aAAa,GAAGlR,gBAAgB,CAACH,KAAK,CAACiT,WAAW,EAAE/S,eAAe,CAAC;IACxE,CAAC,CAAC,CACGkT,EAAE,CAAC,MAAM,EAAGpT,KAAK,IAAK;MACvB,MAAM;QAAEwS,iBAAiB;QAAEvS,SAAS;QAAE3C,QAAQ;QAAEE,UAAU;QAAE6V,iBAAiB;QAAExe;MAAW,CAAC,GAAGic,aAAa,CAAC,CAAC;MAC7G,MAAM1Q,UAAU,GAAGL,kBAAkB,CAACC,KAAK,CAACiT,WAAW,EAAE;QAAEhT,SAAS;QAAE3C,QAAQ;QAAEE,UAAU;QAAE0C;MAAgB,CAAC,CAAC;MAC9G,IAAKF,KAAK,CAACiT,WAAW,CAAC7jB,IAAI,KAAK,WAAW,IAAI4Q,KAAK,CAACiT,WAAW,CAACvR,OAAO,CAACjP,MAAM,GAAG,CAAC;MAC/E;MACCyG,MAAM,IAAI,CAACrE,UAAU,CAAC3C,GAAG,CAACgH,MAAM,CAAE,EAAE;QACrCsY,SAAS,GAAG,IAAI;MACpB;MACA,IAAIA,SAAS,EAAE;QACX;MACJ;MACA,IAAI,CAACJ,cAAc,IAAIoB,iBAAiB,IAAIlB,WAAW,EAAE;QACrDF,cAAc,GAAG,IAAI;QACrBkB,OAAO,CAAC,CAAC;MACb;MACA,IAAI,CAAChB,WAAW,EAAE;QACd,MAAMjd,CAAC,GAAG+L,UAAU,CAACC,QAAQ,IAAI6Q,OAAO,CAAC7c,CAAC,IAAI,CAAC,CAAC;QAChD,MAAME,CAAC,GAAG6L,UAAU,CAACE,QAAQ,IAAI4Q,OAAO,CAAC3c,CAAC,IAAI,CAAC,CAAC;QAChD,MAAMyH,QAAQ,GAAGZ,IAAI,CAAC+H,IAAI,CAAC9O,CAAC,GAAGA,CAAC,GAAGE,CAAC,GAAGA,CAAC,CAAC;QACzC,IAAIyH,QAAQ,GAAGqX,iBAAiB,EAAE;UAC9BV,SAAS,CAAC3S,KAAK,CAAC;QACpB;MACJ;MACA;MACA,IAAI,CAACkR,OAAO,CAAC7c,CAAC,KAAK+L,UAAU,CAACC,QAAQ,IAAI6Q,OAAO,CAAC3c,CAAC,KAAK6L,UAAU,CAACE,QAAQ,KAAKiQ,SAAS,IAAIe,WAAW,EAAE;QACtG;QACAD,aAAa,GAAGlR,gBAAgB,CAACH,KAAK,CAACiT,WAAW,EAAE/S,eAAe,CAAC;QACpE2R,WAAW,CAACzR,UAAU,EAAEJ,KAAK,CAACiT,WAAW,CAAC;MAC9C;IACJ,CAAC,CAAC,CACGG,EAAE,CAAC,KAAK,EAAGpT,KAAK,IAAK;MACtB,IAAI,CAACsR,WAAW,IAAIE,SAAS,EAAE;QAC3B;MACJ;MACAJ,cAAc,GAAG,KAAK;MACtBE,WAAW,GAAG,KAAK;MACnBmB,oBAAoB,CAACtB,SAAS,CAAC;MAC/B,IAAIZ,SAAS,CAACxe,IAAI,GAAG,CAAC,EAAE;QACpB,MAAM;UAAE8C,UAAU;UAAEod,mBAAmB;UAAEqB,cAAc;UAAEC;QAAoB,CAAC,GAAGzC,aAAa,CAAC,CAAC;QAChGmB,mBAAmB,CAAC1B,SAAS,EAAE,KAAK,CAAC;QACrC,IAAIU,UAAU,IAAIqC,cAAc,IAAK,CAACpa,MAAM,IAAIqa,mBAAoB,EAAE;UAClE,MAAM,CAACle,WAAW,EAAEgd,YAAY,CAAC,GAAG5B,qBAAqB,CAAC;YACtDvX,MAAM;YACNqX,SAAS;YACT1b,UAAU;YACV4C,QAAQ,EAAE;UACd,CAAC,CAAC;UACFwZ,UAAU,GAAGjR,KAAK,CAACiT,WAAW,EAAE1C,SAAS,EAAElb,WAAW,EAAEgd,YAAY,CAAC;UACrEiB,cAAc,GAAGtT,KAAK,CAACiT,WAAW,EAAE5d,WAAW,EAAEgd,YAAY,CAAC;UAC9D,IAAI,CAACnZ,MAAM,EAAE;YACTqa,mBAAmB,GAAGvT,KAAK,CAACiT,WAAW,EAAEZ,YAAY,CAAC;UAC1D;QACJ;MACJ;IACJ,CAAC,CAAC,CACG5e,MAAM,CAAEuM,KAAK,IAAK;MACnB,MAAMxM,MAAM,GAAGwM,KAAK,CAACxM,MAAM;MAC3B,MAAMggB,WAAW,GAAG,CAACxT,KAAK,CAACyT,MAAM,KAC5B,CAAChC,eAAe,IAAI,CAAC1B,WAAW,CAACvc,MAAM,EAAE,IAAIie,eAAe,EAAE,EAAElE,OAAO,CAAC,CAAC,KACzE,CAACmE,cAAc,IAAI3B,WAAW,CAACvc,MAAM,EAAEke,cAAc,EAAEnE,OAAO,CAAC,CAAC;MACrE,OAAOiG,WAAW;IACtB,CAAC,CAAC;IACFjC,WAAW,CAACmC,IAAI,CAACR,cAAc,CAAC;EACpC;EACA,SAASS,OAAOA,CAAA,EAAG;IACfpC,WAAW,EAAE6B,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC;EAClC;EACA,OAAO;IACHpF,MAAM;IACN2F;EACJ,CAAC;AACL;AAEA,SAASC,sBAAsBA,CAACtf,QAAQ,EAAEO,UAAU,EAAEmH,QAAQ,EAAE;EAC5D,MAAM/I,KAAK,GAAG,EAAE;EAChB,MAAMgD,IAAI,GAAG;IACT5B,CAAC,EAAEC,QAAQ,CAACD,CAAC,GAAG2H,QAAQ;IACxBzH,CAAC,EAAED,QAAQ,CAACC,CAAC,GAAGyH,QAAQ;IACxBjI,KAAK,EAAEiI,QAAQ,GAAG,CAAC;IACnBhI,MAAM,EAAEgI,QAAQ,GAAG;EACvB,CAAC;EACD,KAAK,MAAMhJ,IAAI,IAAI6B,UAAU,CAAC6B,MAAM,CAAC,CAAC,EAAE;IACpC,IAAIO,kBAAkB,CAAChB,IAAI,EAAEiB,UAAU,CAAClE,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;MAChDC,KAAK,CAACT,IAAI,CAACQ,IAAI,CAAC;IACpB;EACJ;EACA,OAAOC,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA,MAAM4gB,mBAAmB,GAAG,GAAG;AAC/B,SAASC,gBAAgBA,CAACxf,QAAQ,EAAEyf,gBAAgB,EAAElf,UAAU,EAAEhE,UAAU,EAAE;EAC1E,IAAImjB,cAAc,GAAG,EAAE;EACvB,IAAIC,WAAW,GAAGpe,QAAQ;EAC1B,MAAMqe,UAAU,GAAGN,sBAAsB,CAACtf,QAAQ,EAAEO,UAAU,EAAEkf,gBAAgB,GAAGF,mBAAmB,CAAC;EACvG,KAAK,MAAM7gB,IAAI,IAAIkhB,UAAU,EAAE;IAC3B,MAAMC,UAAU,GAAG,CAAC,IAAInhB,IAAI,CAACsE,SAAS,CAACC,YAAY,EAAEjE,MAAM,IAAI,EAAE,CAAC,EAAE,IAAIN,IAAI,CAACsE,SAAS,CAACC,YAAY,EAAE/D,MAAM,IAAI,EAAE,CAAC,CAAC;IACnH,KAAK,MAAM2O,MAAM,IAAIgS,UAAU,EAAE;MAC7B;MACA,IAAItjB,UAAU,CAACqI,MAAM,KAAKiJ,MAAM,CAACjJ,MAAM,IAAIrI,UAAU,CAACzB,IAAI,KAAK+S,MAAM,CAAC/S,IAAI,IAAIyB,UAAU,CAAC3B,EAAE,KAAKiT,MAAM,CAACjT,EAAE,EAAE;QACvG;MACJ;MACA;MACA,MAAM;QAAEmF,CAAC;QAAEE;MAAE,CAAC,GAAGuU,iBAAiB,CAAC9V,IAAI,EAAEmP,MAAM,EAAEA,MAAM,CAAC7N,QAAQ,EAAE,IAAI,CAAC;MACvE,MAAM0H,QAAQ,GAAGZ,IAAI,CAAC+H,IAAI,CAAC/H,IAAI,CAACyK,GAAG,CAACxR,CAAC,GAAGC,QAAQ,CAACD,CAAC,EAAE,CAAC,CAAC,GAAG+G,IAAI,CAACyK,GAAG,CAACtR,CAAC,GAAGD,QAAQ,CAACC,CAAC,EAAE,CAAC,CAAC,CAAC;MACrF,IAAIyH,QAAQ,GAAG+X,gBAAgB,EAAE;QAC7B;MACJ;MACA,IAAI/X,QAAQ,GAAGiY,WAAW,EAAE;QACxBD,cAAc,GAAG,CAAC;UAAE,GAAG7R,MAAM;UAAE9N,CAAC;UAAEE;QAAE,CAAC,CAAC;QACtC0f,WAAW,GAAGjY,QAAQ;MAC1B,CAAC,MACI,IAAIA,QAAQ,KAAKiY,WAAW,EAAE;QAC/B;QACAD,cAAc,CAACxhB,IAAI,CAAC;UAAE,GAAG2P,MAAM;UAAE9N,CAAC;UAAEE;QAAE,CAAC,CAAC;MAC5C;IACJ;EACJ;EACA,IAAI,CAACyf,cAAc,CAACvhB,MAAM,EAAE;IACxB,OAAO,IAAI;EACf;EACA;EACA,IAAIuhB,cAAc,CAACvhB,MAAM,GAAG,CAAC,EAAE;IAC3B,MAAM2hB,kBAAkB,GAAGvjB,UAAU,CAACzB,IAAI,KAAK,QAAQ,GAAG,QAAQ,GAAG,QAAQ;IAC7E,OAAO4kB,cAAc,CAACvZ,IAAI,CAAE0H,MAAM,IAAKA,MAAM,CAAC/S,IAAI,KAAKglB,kBAAkB,CAAC,IAAIJ,cAAc,CAAC,CAAC,CAAC;EACnG;EACA,OAAOA,cAAc,CAAC,CAAC,CAAC;AAC5B;AACA,SAASK,SAASA,CAACnb,MAAM,EAAE5J,UAAU,EAAE0Z,QAAQ,EAAEnU,UAAU,EAAE+T,cAAc,EAAE0L,oBAAoB,GAAG,KAAK,EAAE;EACvG,MAAMthB,IAAI,GAAG6B,UAAU,CAACU,GAAG,CAAC2D,MAAM,CAAC;EACnC,IAAI,CAAClG,IAAI,EAAE;IACP,OAAO,IAAI;EACf;EACA,MAAMgP,OAAO,GAAG4G,cAAc,KAAK,QAAQ,GACrC5V,IAAI,CAACsE,SAAS,CAACC,YAAY,GAAGjI,UAAU,CAAC,GACzC,CAAC,IAAI0D,IAAI,CAACsE,SAAS,CAACC,YAAY,EAAEjE,MAAM,IAAI,EAAE,CAAC,EAAE,IAAIN,IAAI,CAACsE,SAAS,CAACC,YAAY,EAAE/D,MAAM,IAAI,EAAE,CAAC,CAAC;EACtG,MAAM2O,MAAM,GAAG,CAAC6G,QAAQ,GAAGhH,OAAO,EAAEvH,IAAI,CAAE8Z,CAAC,IAAKA,CAAC,CAACrlB,EAAE,KAAK8Z,QAAQ,CAAC,GAAGhH,OAAO,GAAG,CAAC,CAAC,KAAK,IAAI;EAC1F,OAAOG,MAAM,IAAImS,oBAAoB,GAC/B;IAAE,GAAGnS,MAAM;IAAE,GAAG2G,iBAAiB,CAAC9V,IAAI,EAAEmP,MAAM,EAAEA,MAAM,CAAC7N,QAAQ,EAAE,IAAI;EAAE,CAAC,GACxE6N,MAAM;AAChB;AACA,SAASqS,aAAaA,CAACC,eAAe,EAAEC,aAAa,EAAE;EACnD,IAAID,eAAe,EAAE;IACjB,OAAOA,eAAe;EAC1B,CAAC,MACI,IAAIC,aAAa,EAAEC,SAAS,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAClD,OAAO,QAAQ;EACnB,CAAC,MACI,IAAIF,aAAa,EAAEC,SAAS,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAClD,OAAO,QAAQ;EACnB;EACA,OAAO,IAAI;AACf;AACA,SAASC,iBAAiBA,CAACC,wBAAwB,EAAEC,aAAa,EAAE;EAChE,IAAIpkB,OAAO,GAAG,IAAI;EAClB,IAAIokB,aAAa,EAAE;IACfpkB,OAAO,GAAG,IAAI;EAClB,CAAC,MACI,IAAImkB,wBAAwB,IAAI,CAACC,aAAa,EAAE;IACjDpkB,OAAO,GAAG,KAAK;EACnB;EACA,OAAOA,OAAO;AAClB;AAEA,MAAMqkB,WAAW,GAAGA,CAAA,KAAM,IAAI;AAC9B,SAASC,aAAaA,CAACjV,KAAK,EAAE;EAAE4I,cAAc;EAAEmL,gBAAgB;EAAE/K,QAAQ;EAAE9P,MAAM;EAAEub,eAAe;EAAES,QAAQ;EAAE3H,OAAO;EAAE1Y,UAAU;EAAE/E,GAAG;EAAEqlB,gBAAgB;EAAEC,MAAM;EAAE9G,KAAK;EAAE+G,gBAAgB;EAAEC,cAAc;EAAEC,SAAS;EAAEC,YAAY;EAAEC,iBAAiB,GAAGT,WAAW;EAAEU,cAAc;EAAEC,gBAAgB;EAAEC,YAAY;EAAEC,aAAa;EAAEtD;AAAc,CAAC,EAAE;EAClV;EACA,MAAMuD,GAAG,GAAGpV,iBAAiB,CAACV,KAAK,CAACxM,MAAM,CAAC;EAC3C,IAAI2d,SAAS,GAAG,CAAC;EACjB,IAAI4E,aAAa;EACjB,MAAM;IAAE1hB,CAAC;IAAEE;EAAE,CAAC,GAAG4L,gBAAgB,CAACH,KAAK,CAAC;EACxC,MAAMgW,aAAa,GAAGF,GAAG,EAAEG,gBAAgB,CAAC5hB,CAAC,EAAEE,CAAC,CAAC;EACjD,MAAMjF,UAAU,GAAGklB,aAAa,CAACC,eAAe,EAAEuB,aAAa,CAAC;EAChE,MAAM9V,eAAe,GAAGqN,OAAO,EAAEnL,qBAAqB,CAAC,CAAC;EACxD,IAAI,CAAClC,eAAe,IAAI,CAAC5Q,UAAU,EAAE;IACjC;EACJ;EACA,MAAM4mB,kBAAkB,GAAG7B,SAAS,CAACnb,MAAM,EAAE5J,UAAU,EAAE0Z,QAAQ,EAAEnU,UAAU,EAAE+T,cAAc,CAAC;EAC9F,IAAI,CAACsN,kBAAkB,EAAE;IACrB;EACJ;EACA,IAAI5hB,QAAQ,GAAG6L,gBAAgB,CAACH,KAAK,EAAEE,eAAe,CAAC;EACvD,IAAIkR,cAAc,GAAG,KAAK;EAC1B,IAAI7e,UAAU,GAAG,IAAI;EACrB,IAAI5B,OAAO,GAAG,KAAK;EACnB,IAAI+jB,aAAa,GAAG,IAAI;EACxB;EACA,SAASpC,OAAOA,CAAA,EAAG;IACf,IAAI,CAAC6C,gBAAgB,IAAI,CAACjV,eAAe,EAAE;MACvC;IACJ;IACA,MAAM,CAAC7L,CAAC,EAAEE,CAAC,CAAC,GAAGsH,WAAW,CAACvH,QAAQ,EAAE4L,eAAe,EAAEqS,YAAY,CAAC;IACnEjE,KAAK,CAAC;MAAEja,CAAC;MAAEE;IAAE,CAAC,CAAC;IACf4c,SAAS,GAAGuB,qBAAqB,CAACJ,OAAO,CAAC;EAC9C;EACA;EACA,MAAMzhB,UAAU,GAAG;IACf,GAAGqlB,kBAAkB;IACrBhd,MAAM;IACN9J,IAAI,EAAEE,UAAU;IAChBgF,QAAQ,EAAE4hB,kBAAkB,CAAC5hB;EACjC,CAAC;EACD,MAAM6hB,gBAAgB,GAAGthB,UAAU,CAACU,GAAG,CAAC2D,MAAM,CAAC;EAC/C,MAAMtI,IAAI,GAAGkY,iBAAiB,CAACqN,gBAAgB,EAAEtlB,UAAU,EAAES,QAAQ,CAACE,IAAI,EAAE,IAAI,CAAC;EACjF,MAAM6T,aAAa,GAAG;IAClB3U,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE,IAAI;IACbC,IAAI;IACJC,UAAU;IACVC,YAAY,EAAED,UAAU,CAACyD,QAAQ;IACjCvD,QAAQ,EAAEolB,gBAAgB;IAC1BnlB,EAAE,EAAEsD,QAAQ;IACZrD,QAAQ,EAAE,IAAI;IACdC,UAAU,EAAEK,gBAAgB,CAACV,UAAU,CAACyD,QAAQ,CAAC;IACjDnD,MAAM,EAAE;EACZ,CAAC;EACDwkB,gBAAgB,CAACtQ,aAAa,CAAC;EAC/B,IAAI+Q,kBAAkB,GAAG/Q,aAAa;EACtCiQ,cAAc,GAAGtV,KAAK,EAAE;IAAE9G,MAAM;IAAE8P,QAAQ;IAAE1Z;EAAW,CAAC,CAAC;EACzD,SAAS+mB,aAAaA,CAACrW,KAAK,EAAE;IAC1B,IAAI,CAAC6V,aAAa,CAAC,CAAC,IAAI,CAAChlB,UAAU,EAAE;MACjCylB,WAAW,CAACtW,KAAK,CAAC;MAClB;IACJ;IACA,MAAMC,SAAS,GAAG2V,YAAY,CAAC,CAAC;IAChCthB,QAAQ,GAAG6L,gBAAgB,CAACH,KAAK,EAAEE,eAAe,CAAC;IACnD6V,aAAa,GAAGjC,gBAAgB,CAACtd,oBAAoB,CAAClC,QAAQ,EAAE2L,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE8T,gBAAgB,EAAElf,UAAU,EAAEhE,UAAU,CAAC;IACpI,IAAI,CAACugB,cAAc,EAAE;MACjBkB,OAAO,CAAC,CAAC;MACTlB,cAAc,GAAG,IAAI;IACzB;IACA,MAAMpG,MAAM,GAAGuL,aAAa,CAACvW,KAAK,EAAE;MAChCmC,MAAM,EAAE4T,aAAa;MACrBnN,cAAc;MACd4N,UAAU,EAAEtd,MAAM;MAClBud,YAAY,EAAEzN,QAAQ;MACtB0N,QAAQ,EAAExB,QAAQ,GAAG,QAAQ,GAAG,QAAQ;MACxCO,iBAAiB;MACjBK,GAAG;MACHhmB,GAAG;MACHslB,MAAM;MACNvgB;IACJ,CAAC,CAAC;IACF6f,aAAa,GAAG1J,MAAM,CAAC0J,aAAa;IACpCniB,UAAU,GAAGyY,MAAM,CAACzY,UAAU;IAC9B5B,OAAO,GAAGkkB,iBAAiB,CAAC,CAAC,CAACkB,aAAa,EAAE/K,MAAM,CAACra,OAAO,CAAC;IAC5D,MAAM0U,aAAa,GAAG;MAClB;MACA,GAAG+Q,kBAAkB;MACrBzlB,OAAO;MACPK,EAAE,EAAE+kB,aAAa,IAAIplB,OAAO,GACtB8M,oBAAoB,CAAC;QAAEpJ,CAAC,EAAE0hB,aAAa,CAAC1hB,CAAC;QAAEE,CAAC,EAAEwhB,aAAa,CAACxhB;MAAE,CAAC,EAAE0L,SAAS,CAAC,GAC3E3L,QAAQ;MACdrD,QAAQ,EAAE+Z,MAAM,CAAC/Z,QAAQ;MACzBC,UAAU,EAAEP,OAAO,IAAIqa,MAAM,CAAC/Z,QAAQ,GAAG+Z,MAAM,CAAC/Z,QAAQ,CAACqD,QAAQ,GAAG/C,gBAAgB,CAACV,UAAU,CAACyD,QAAQ,CAAC;MACzGnD,MAAM,EAAE6Z,MAAM,CAAC/Z,QAAQ,GAAG4D,UAAU,CAACU,GAAG,CAACyV,MAAM,CAAC/Z,QAAQ,CAACiI,MAAM,CAAC,GAAG;IACvE,CAAC;IACD;AACR;AACA;AACA;IACQ,IAAIvI,OAAO,IACPolB,aAAa,IACbK,kBAAkB,CAACnlB,QAAQ,IAC3BoU,aAAa,CAACpU,QAAQ,IACtBmlB,kBAAkB,CAACnlB,QAAQ,CAAC7B,IAAI,KAAKiW,aAAa,CAACpU,QAAQ,CAAC7B,IAAI,IAChEgnB,kBAAkB,CAACnlB,QAAQ,CAACiI,MAAM,KAAKmM,aAAa,CAACpU,QAAQ,CAACiI,MAAM,IACpEkd,kBAAkB,CAACnlB,QAAQ,CAAC/B,EAAE,KAAKmW,aAAa,CAACpU,QAAQ,CAAC/B,EAAE,IAC5DknB,kBAAkB,CAACplB,EAAE,CAACqD,CAAC,KAAKgR,aAAa,CAACrU,EAAE,CAACqD,CAAC,IAC9C+hB,kBAAkB,CAACplB,EAAE,CAACuD,CAAC,KAAK8Q,aAAa,CAACrU,EAAE,CAACuD,CAAC,EAAE;MAChD;IACJ;IACAohB,gBAAgB,CAACtQ,aAAa,CAAC;IAC/B+Q,kBAAkB,GAAG/Q,aAAa;EACtC;EACA,SAASiR,WAAWA,CAACtW,KAAK,EAAE;IACxB,IAAI,CAAC+V,aAAa,IAAIrB,aAAa,KAAKniB,UAAU,IAAI5B,OAAO,EAAE;MAC3D4kB,SAAS,GAAGhjB,UAAU,CAAC;IAC3B;IACA;AACR;AACA;AACA;IACQ;IACA,MAAM;MAAE7B,UAAU;MAAE,GAAGimB;IAAgB,CAAC,GAAGP,kBAAkB;IAC7D,MAAMQ,oBAAoB,GAAG;MACzB,GAAGD,eAAe;MAClBzlB,UAAU,EAAEklB,kBAAkB,CAACnlB,QAAQ,GAAGmlB,kBAAkB,CAACllB,UAAU,GAAG;IAC9E,CAAC;IACDskB,YAAY,GAAGxV,KAAK,EAAE4W,oBAAoB,CAAC;IAC3C,IAAInC,eAAe,EAAE;MACjBiB,cAAc,GAAG1V,KAAK,EAAE4W,oBAAoB,CAAC;IACjD;IACAvB,gBAAgB,CAAC,CAAC;IAClB5C,oBAAoB,CAACtB,SAAS,CAAC;IAC/BC,cAAc,GAAG,KAAK;IACtBzgB,OAAO,GAAG,KAAK;IACf4B,UAAU,GAAG,IAAI;IACjBmiB,aAAa,GAAG,IAAI;IACpBoB,GAAG,CAACe,mBAAmB,CAAC,WAAW,EAAER,aAAa,CAAC;IACnDP,GAAG,CAACe,mBAAmB,CAAC,SAAS,EAAEP,WAAW,CAAC;IAC/CR,GAAG,CAACe,mBAAmB,CAAC,WAAW,EAAER,aAAa,CAAC;IACnDP,GAAG,CAACe,mBAAmB,CAAC,UAAU,EAAEP,WAAW,CAAC;EACpD;EACAR,GAAG,CAACgB,gBAAgB,CAAC,WAAW,EAAET,aAAa,CAAC;EAChDP,GAAG,CAACgB,gBAAgB,CAAC,SAAS,EAAER,WAAW,CAAC;EAC5CR,GAAG,CAACgB,gBAAgB,CAAC,WAAW,EAAET,aAAa,CAAC;EAChDP,GAAG,CAACgB,gBAAgB,CAAC,UAAU,EAAER,WAAW,CAAC;AACjD;AACA;AACA,SAASC,aAAaA,CAACvW,KAAK,EAAE;EAAEmC,MAAM;EAAEyG,cAAc;EAAE4N,UAAU;EAAEC,YAAY;EAAEC,QAAQ;EAAEZ,GAAG;EAAEhmB,GAAG;EAAEslB,MAAM;EAAEK,iBAAiB,GAAGT,WAAW;EAAEngB;AAAY,CAAC,EAAE;EAC1J,MAAMqgB,QAAQ,GAAGwB,QAAQ,KAAK,QAAQ;EACtC,MAAMhC,aAAa,GAAGvS,MAAM,GACtB2T,GAAG,CAACrI,aAAa,CAAC,IAAI3d,GAAG,0BAA0BslB,MAAM,IAAIjT,MAAM,EAAEjJ,MAAM,IAAIiJ,MAAM,EAAEjT,EAAE,IAAIiT,MAAM,EAAE/S,IAAI,IAAI,CAAC,GAC9G,IAAI;EACV,MAAM;IAAEiF,CAAC;IAAEE;EAAE,CAAC,GAAG4L,gBAAgB,CAACH,KAAK,CAAC;EACxC,MAAM+W,WAAW,GAAGjB,GAAG,CAACG,gBAAgB,CAAC5hB,CAAC,EAAEE,CAAC,CAAC;EAC9C;AACJ;AACA;AACA;EACI,MAAMyiB,aAAa,GAAGD,WAAW,EAAEpC,SAAS,CAACC,QAAQ,CAAC,GAAG9kB,GAAG,eAAe,CAAC,GAAGinB,WAAW,GAAGrC,aAAa;EAC1G,MAAM1J,MAAM,GAAG;IACX0J,aAAa,EAAEsC,aAAa;IAC5BrmB,OAAO,EAAE,KAAK;IACd4B,UAAU,EAAE,IAAI;IAChBtB,QAAQ,EAAE;EACd,CAAC;EACD,IAAI+lB,aAAa,EAAE;IACf,MAAM1nB,UAAU,GAAGklB,aAAa,CAAClf,SAAS,EAAE0hB,aAAa,CAAC;IAC1D,MAAMC,YAAY,GAAGD,aAAa,CAAC3U,YAAY,CAAC,aAAa,CAAC;IAC9D,MAAM2G,QAAQ,GAAGgO,aAAa,CAAC3U,YAAY,CAAC,eAAe,CAAC;IAC5D,MAAM6U,WAAW,GAAGF,aAAa,CAACrC,SAAS,CAACC,QAAQ,CAAC,aAAa,CAAC;IACnE,MAAMuC,cAAc,GAAGH,aAAa,CAACrC,SAAS,CAACC,QAAQ,CAAC,gBAAgB,CAAC;IACzE,IAAI,CAACqC,YAAY,IAAI,CAAC3nB,UAAU,EAAE;MAC9B,OAAO0b,MAAM;IACjB;IACA,MAAMzY,UAAU,GAAG;MACfe,MAAM,EAAE4hB,QAAQ,GAAG+B,YAAY,GAAGT,UAAU;MAC5CjnB,YAAY,EAAE2lB,QAAQ,GAAGlM,QAAQ,GAAGyN,YAAY;MAChDjjB,MAAM,EAAE0hB,QAAQ,GAAGsB,UAAU,GAAGS,YAAY;MAC5CznB,YAAY,EAAE0lB,QAAQ,GAAGuB,YAAY,GAAGzN;IAC5C,CAAC;IACDgC,MAAM,CAACzY,UAAU,GAAGA,UAAU;IAC9B,MAAM6kB,aAAa,GAAGF,WAAW,IAAIC,cAAc;IACnD;IACA,MAAMxmB,OAAO,GAAGymB,aAAa,KACxBxO,cAAc,KAAKtY,cAAc,CAACuY,MAAM,GAClCqM,QAAQ,IAAI5lB,UAAU,KAAK,QAAQ,IAAM,CAAC4lB,QAAQ,IAAI5lB,UAAU,KAAK,QAAS,GAC/E2nB,YAAY,KAAKT,UAAU,IAAIxN,QAAQ,KAAKyN,YAAY,CAAC;IACnEzL,MAAM,CAACra,OAAO,GAAGA,OAAO,IAAI8kB,iBAAiB,CAACljB,UAAU,CAAC;IACzDyY,MAAM,CAAC/Z,QAAQ,GAAGojB,SAAS,CAAC4C,YAAY,EAAE3nB,UAAU,EAAE0Z,QAAQ,EAAEnU,UAAU,EAAE+T,cAAc,EAAE,KAAK,CAAC;EACtG;EACA,OAAOoC,MAAM;AACjB;AACA,MAAMqM,QAAQ,GAAG;EACbpC,aAAa;EACbtkB,OAAO,EAAE4lB;AACb,CAAC;AAED,SAASe,SAASA,CAAC;EAAE/J,OAAO;EAAElV,OAAO;EAAEud,YAAY;EAAE2B;AAAa,CAAC,EAAE;EACjE,MAAMC,SAAS,GAAGppB,MAAM,CAACmf,OAAO,CAAC;EACjC,SAASS,MAAMA,CAAC;IAAEQ,eAAe;IAAEza,KAAK;IAAEC,MAAM;IAAEyjB,QAAQ,GAAG,EAAE;IAAEC,QAAQ,GAAG,IAAI;IAAEC,QAAQ,GAAG,IAAI;IAAEC,UAAU,GAAG;EAAO,CAAC,EAAE;IACtH;IACA,MAAMC,WAAW,GAAI7X,KAAK,IAAK;MAC3B,MAAMC,SAAS,GAAG2V,YAAY,CAAC,CAAC;MAChC,IAAI5V,KAAK,CAACiT,WAAW,CAAC7jB,IAAI,KAAK,OAAO,IAAI,CAACiJ,OAAO,EAAE;QAChD;MACJ;MACA,MAAMyf,UAAU,GAAG,CAAC9X,KAAK,CAACiT,WAAW,CAAC8E,MAAM,IACvC/X,KAAK,CAACiT,WAAW,CAAC+E,SAAS,KAAK,CAAC,GAAG,IAAI,GAAGhY,KAAK,CAACiT,WAAW,CAAC+E,SAAS,GAAG,CAAC,GAAG,KAAK,CAAC,GACpFP,QAAQ;MACZ,MAAMQ,QAAQ,GAAGhY,SAAS,CAAC,CAAC,CAAC,GAAG7E,IAAI,CAACyK,GAAG,CAAC,CAAC,EAAEiS,UAAU,CAAC;MACvDzf,OAAO,CAAC6f,OAAO,CAACD,QAAQ,CAAC;IAC7B,CAAC;IACD,IAAIE,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACrB;IACA,MAAMC,eAAe,GAAIpY,KAAK,IAAK;MAC/B,IAAIA,KAAK,CAACiT,WAAW,CAAC7jB,IAAI,KAAK,WAAW,IAAI4Q,KAAK,CAACiT,WAAW,CAAC7jB,IAAI,KAAK,YAAY,EAAE;QACnF+oB,QAAQ,GAAG,CACPnY,KAAK,CAACiT,WAAW,CAACxR,OAAO,IAAIzB,KAAK,CAACiT,WAAW,CAACvR,OAAO,CAAC,CAAC,CAAC,CAACD,OAAO,EACjEzB,KAAK,CAACiT,WAAW,CAACrR,OAAO,IAAI5B,KAAK,CAACiT,WAAW,CAACvR,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CACpE;MACL;IACJ,CAAC;IACD;IACA,MAAMyW,UAAU,GAAIrY,KAAK,IAAK;MAC1B,MAAMC,SAAS,GAAG2V,YAAY,CAAC,CAAC;MAChC,IAAK5V,KAAK,CAACiT,WAAW,CAAC7jB,IAAI,KAAK,WAAW,IAAI4Q,KAAK,CAACiT,WAAW,CAAC7jB,IAAI,KAAK,WAAW,IAAK,CAACiJ,OAAO,EAAE;QAChG;MACJ;MACA,MAAMigB,UAAU,GAAG,CACftY,KAAK,CAACiT,WAAW,CAACxR,OAAO,IAAIzB,KAAK,CAACiT,WAAW,CAACvR,OAAO,CAAC,CAAC,CAAC,CAACD,OAAO,EACjEzB,KAAK,CAACiT,WAAW,CAACrR,OAAO,IAAI5B,KAAK,CAACiT,WAAW,CAACvR,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CACpE;MACD,MAAM2W,QAAQ,GAAG,CAACD,UAAU,CAAC,CAAC,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC,EAAEG,UAAU,CAAC,CAAC,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC3EA,QAAQ,GAAGG,UAAU;MACrB,MAAME,SAAS,GAAGjB,YAAY,CAAC,CAAC,GAAGnc,IAAI,CAACD,GAAG,CAAC8E,SAAS,CAAC,CAAC,CAAC,EAAE7E,IAAI,CAACqd,GAAG,CAACxY,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI2X,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;MACzG,MAAMtjB,QAAQ,GAAG;QACbD,CAAC,EAAE4L,SAAS,CAAC,CAAC,CAAC,GAAGsY,QAAQ,CAAC,CAAC,CAAC,GAAGC,SAAS;QACzCjkB,CAAC,EAAE0L,SAAS,CAAC,CAAC,CAAC,GAAGsY,QAAQ,CAAC,CAAC,CAAC,GAAGC;MACpC,CAAC;MACD,MAAM7e,MAAM,GAAG,CACX,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC5F,KAAK,EAAEC,MAAM,CAAC,CAClB;MACDqE,OAAO,CAACqW,sBAAsB,CAAC;QAC3Bra,CAAC,EAAEC,QAAQ,CAACD,CAAC;QACbE,CAAC,EAAED,QAAQ,CAACC,CAAC;QACbjG,IAAI,EAAE2R,SAAS,CAAC,CAAC;MACrB,CAAC,EAAEtG,MAAM,EAAE6U,eAAe,CAAC;IAC/B,CAAC;IACD,MAAMkK,iBAAiB,GAAGpqB,IAAI,CAAC,CAAC,CAC3B8kB,EAAE,CAAC,OAAO,EAAEgF,eAAe;IAC5B;IACA;IAAA,CACChF,EAAE,CAAC,MAAM,EAAEsE,QAAQ,GAAGW,UAAU,GAAG,IAAI;IACxC;IACA;IAAA,CACCjF,EAAE,CAAC,YAAY,EAAEuE,QAAQ,GAAGE,WAAW,GAAG,IAAI,CAAC;IACpDL,SAAS,CAAC9D,IAAI,CAACgF,iBAAiB,EAAE,CAAC,CAAC,CAAC;EACzC;EACA,SAAS/E,OAAOA,CAAA,EAAG;IACf6D,SAAS,CAACpE,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC;EAC9B;EACA,OAAO;IACHpF,MAAM;IACN2F,OAAO;IACPtlB;EACJ,CAAC;AACL;;AAEA;AACA,MAAMsqB,WAAW,GAAGA,CAACC,YAAY,EAAEC,aAAa,KAAKD,YAAY,CAACvkB,CAAC,KAAKwkB,aAAa,CAACxkB,CAAC,IAAIukB,YAAY,CAACrkB,CAAC,KAAKskB,aAAa,CAACtkB,CAAC,IAAIqkB,YAAY,CAACtqB,IAAI,KAAKuqB,aAAa,CAACjK,CAAC;AACtK,MAAMkK,mBAAmB,GAAI7Y,SAAS,KAAM;EACxC5L,CAAC,EAAE4L,SAAS,CAAC5L,CAAC;EACdE,CAAC,EAAE0L,SAAS,CAAC1L,CAAC;EACdjG,IAAI,EAAE2R,SAAS,CAAC2O;AACpB,CAAC,CAAC;AACF,MAAMmK,mBAAmB,GAAGA,CAAC;EAAE1kB,CAAC;EAAEE,CAAC;EAAEjG;AAAK,CAAC,KAAKC,YAAY,CAACyqB,SAAS,CAAC3kB,CAAC,EAAEE,CAAC,CAAC,CAAC0kB,KAAK,CAAC3qB,IAAI,CAAC;AACxF,MAAM4qB,kBAAkB,GAAGA,CAAClZ,KAAK,EAAEmZ,SAAS,KAAKnZ,KAAK,CAACxM,MAAM,CAAC6N,OAAO,CAAC,IAAI8X,SAAS,EAAE,CAAC;AACtF,MAAMC,eAAe,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAKA,UAAU,KAAK,CAAC,IAAIpX,KAAK,CAACwN,OAAO,CAAC2J,SAAS,CAAC,IAAIA,SAAS,CAACnY,QAAQ,CAAC,CAAC,CAAC;AACxH,MAAMqY,eAAe,GAAGA,CAAC/B,SAAS,EAAExe,QAAQ,GAAG,CAAC,EAAEwgB,KAAK,GAAGA,CAAA,KAAM,CAAE,CAAC,KAAK;EACpE,MAAMC,WAAW,GAAG,OAAOzgB,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,GAAG,CAAC;EAChE,IAAI,CAACygB,WAAW,EAAE;IACdD,KAAK,CAAC,CAAC;EACX;EACA,OAAOC,WAAW,GAAGjC,SAAS,CAACkC,UAAU,CAAC,CAAC,CAAC1gB,QAAQ,CAACA,QAAQ,CAAC,CAACoa,EAAE,CAAC,KAAK,EAAEoG,KAAK,CAAC,GAAGhC,SAAS;AAC/F,CAAC;AACD,MAAMmC,UAAU,GAAI3Z,KAAK,IAAK;EAC1B,MAAM4Z,MAAM,GAAG5Z,KAAK,CAAC6Z,OAAO,IAAI3a,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;EAClD,OAAO,CAACc,KAAK,CAAC+X,MAAM,IAAI/X,KAAK,CAACgY,SAAS,KAAK,CAAC,GAAG,IAAI,GAAGhY,KAAK,CAACgY,SAAS,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG4B,MAAM;AAChG,CAAC;AAED,SAASE,wBAAwBA,CAAC;EAAEC,aAAa;EAAEC,gBAAgB;EAAEzI,WAAW;EAAE0I,MAAM;EAAEC,eAAe;EAAEC,gBAAgB;EAAEC,WAAW;EAAEC,cAAc;EAAEC,SAAS;EAAEC;AAAc,CAAC,EAAE;EAClL,OAAQva,KAAK,IAAK;IACd,IAAIkZ,kBAAkB,CAAClZ,KAAK,EAAEga,gBAAgB,CAAC,EAAE;MAC7C,OAAO,KAAK;IAChB;IACAha,KAAK,CAACwa,cAAc,CAAC,CAAC;IACtBxa,KAAK,CAACya,wBAAwB,CAAC,CAAC;IAChC,MAAMC,WAAW,GAAGnJ,WAAW,CAACoJ,QAAQ,CAAC,QAAQ,CAAC,CAAC/L,CAAC,IAAI,CAAC;IACzD;IACA,IAAI5O,KAAK,CAAC6Z,OAAO,IAAIO,WAAW,EAAE;MAC9B,MAAMQ,KAAK,GAAGvsB,OAAO,CAAC2R,KAAK,CAAC;MAC5B,MAAM8X,UAAU,GAAG6B,UAAU,CAAC3Z,KAAK,CAAC;MACpC,MAAM1R,IAAI,GAAGosB,WAAW,GAAGtf,IAAI,CAACyK,GAAG,CAAC,CAAC,EAAEiS,UAAU,CAAC;MAClD;MACAmC,MAAM,CAAC/B,OAAO,CAAC3G,WAAW,EAAEjjB,IAAI,EAAEssB,KAAK,EAAE5a,KAAK,CAAC;MAC/C;IACJ;IACA;AACR;AACA;AACA;IACQ,MAAM6a,cAAc,GAAG7a,KAAK,CAACgY,SAAS,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC;IACrD,IAAI8C,MAAM,GAAGZ,eAAe,KAAK3pB,eAAe,CAACwqB,QAAQ,GAAG,CAAC,GAAG/a,KAAK,CAAC8a,MAAM,GAAGD,cAAc;IAC7F,IAAI9C,MAAM,GAAGmC,eAAe,KAAK3pB,eAAe,CAACyqB,UAAU,GAAG,CAAC,GAAGhb,KAAK,CAAC+X,MAAM,GAAG8C,cAAc;IAC/F;IACA,IAAI,CAAC3b,OAAO,CAAC,CAAC,IAAIc,KAAK,CAACib,QAAQ,IAAIf,eAAe,KAAK3pB,eAAe,CAACwqB,QAAQ,EAAE;MAC9ED,MAAM,GAAG9a,KAAK,CAAC+X,MAAM,GAAG8C,cAAc;MACtC9C,MAAM,GAAG,CAAC;IACd;IACAkC,MAAM,CAACiB,WAAW,CAAC3J,WAAW,EAAE,EAAEuJ,MAAM,GAAGJ,WAAW,CAAC,GAAGP,gBAAgB,EAAE,EAAEpC,MAAM,GAAG2C,WAAW,CAAC,GAAGP,gBAAgB;IACtH;IACA;MAAEgB,QAAQ,EAAE;IAAK,CAAC,CAAC;IACnB,MAAM1M,YAAY,GAAGqK,mBAAmB,CAACvH,WAAW,CAACoJ,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACxES,YAAY,CAACrB,aAAa,CAACsB,gBAAgB,CAAC;IAC5C;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACtB,aAAa,CAACuB,cAAc,EAAE;MAC/BvB,aAAa,CAACuB,cAAc,GAAG,IAAI;MACnCjB,cAAc,GAAGra,KAAK,EAAEyO,YAAY,CAAC;IACzC;IACA,IAAIsL,aAAa,CAACuB,cAAc,EAAE;MAC9BhB,SAAS,GAAGta,KAAK,EAAEyO,YAAY,CAAC;MAChCsL,aAAa,CAACsB,gBAAgB,GAAGE,UAAU,CAAC,MAAM;QAC9ChB,YAAY,GAAGva,KAAK,EAAEyO,YAAY,CAAC;QACnCsL,aAAa,CAACuB,cAAc,GAAG,KAAK;MACxC,CAAC,EAAE,GAAG,CAAC;IACX;EACJ,CAAC;AACL;AACA,SAASE,yBAAyBA,CAAC;EAAExB,gBAAgB;EAAEyB,gBAAgB;EAAEC;AAAc,CAAC,EAAE;EACtF,OAAO,UAAU1b,KAAK,EAAEiJ,CAAC,EAAE;IACvB,MAAM0S,OAAO,GAAG3b,KAAK,CAAC5Q,IAAI,KAAK,OAAO;IACtC;IACA,MAAMwsB,WAAW,GAAG,CAACH,gBAAgB,IAAIE,OAAO,IAAI,CAAC3b,KAAK,CAAC6Z,OAAO;IAClE,MAAMgC,eAAe,GAAG3C,kBAAkB,CAAClZ,KAAK,EAAEga,gBAAgB,CAAC;IACnE;IACA,IAAIha,KAAK,CAAC6Z,OAAO,IAAI8B,OAAO,IAAIE,eAAe,EAAE;MAC7C7b,KAAK,CAACwa,cAAc,CAAC,CAAC;IAC1B;IACA,IAAIoB,WAAW,IAAIC,eAAe,EAAE;MAChC,OAAO,IAAI;IACf;IACA7b,KAAK,CAACwa,cAAc,CAAC,CAAC;IACtBkB,aAAa,CAAChI,IAAI,CAAC,IAAI,EAAE1T,KAAK,EAAEiJ,CAAC,CAAC;EACtC,CAAC;AACL;AACA,SAAS6S,yBAAyBA,CAAC;EAAE/B,aAAa;EAAEgC,gBAAgB;EAAE1B;AAAe,CAAC,EAAE;EACpF,OAAQra,KAAK,IAAK;IACd,IAAIA,KAAK,CAACiT,WAAW,EAAEkI,QAAQ,EAAE;MAC7B;IACJ;IACA,MAAMviB,QAAQ,GAAGkgB,mBAAmB,CAAC9Y,KAAK,CAACC,SAAS,CAAC;IACrD;IACA8Z,aAAa,CAACiC,WAAW,GAAGhc,KAAK,CAACiT,WAAW,EAAEQ,MAAM,IAAI,CAAC;IAC1DsG,aAAa,CAACkC,kBAAkB,GAAG,IAAI;IACvClC,aAAa,CAACnB,YAAY,GAAGhgB,QAAQ;IACrC,IAAIoH,KAAK,CAACiT,WAAW,EAAE7jB,IAAI,KAAK,WAAW,EAAE;MACzC2sB,gBAAgB,CAAC,IAAI,CAAC;IAC1B;IACA,IAAI1B,cAAc,EAAE;MAChBA,cAAc,GAAGra,KAAK,CAACiT,WAAW,EAAEra,QAAQ,CAAC;IACjD;EACJ,CAAC;AACL;AACA,SAASsjB,oBAAoBA,CAAC;EAAEnC,aAAa;EAAEV,SAAS;EAAE8C,iBAAiB;EAAEC,iBAAiB;EAAE9B;AAAW,CAAC,EAAE;EAC1G,OAAQta,KAAK,IAAK;IACd+Z,aAAa,CAACsC,oBAAoB,GAAG,CAAC,EAAEF,iBAAiB,IAAI/C,eAAe,CAACC,SAAS,EAAEU,aAAa,CAACiC,WAAW,IAAI,CAAC,CAAC,CAAC;IACxH,IAAI,CAAChc,KAAK,CAACiT,WAAW,EAAEqJ,IAAI,EAAE;MAC1BF,iBAAiB,CAAC,CAACpc,KAAK,CAACC,SAAS,CAAC5L,CAAC,EAAE2L,KAAK,CAACC,SAAS,CAAC1L,CAAC,EAAEyL,KAAK,CAACC,SAAS,CAAC2O,CAAC,CAAC,CAAC;IAChF;IACA,IAAI0L,SAAS,IAAI,CAACta,KAAK,CAACiT,WAAW,EAAEkI,QAAQ,EAAE;MAC3Cb,SAAS,GAAGta,KAAK,CAACiT,WAAW,EAAE6F,mBAAmB,CAAC9Y,KAAK,CAACC,SAAS,CAAC,CAAC;IACxE;EACJ,CAAC;AACL;AACA,SAASsc,uBAAuBA,CAAC;EAAExC,aAAa;EAAEV,SAAS;EAAEmD,WAAW;EAAET,gBAAgB;EAAExB,YAAY;EAAE4B;AAAmB,CAAC,EAAE;EAC5H,OAAQnc,KAAK,IAAK;IACd,IAAIA,KAAK,CAACiT,WAAW,EAAEkI,QAAQ,EAAE;MAC7B;IACJ;IACApB,aAAa,CAACkC,kBAAkB,GAAG,KAAK;IACxC,IAAIE,iBAAiB,IACjB/C,eAAe,CAACC,SAAS,EAAEU,aAAa,CAACiC,WAAW,IAAI,CAAC,CAAC,IAC1D,CAACjC,aAAa,CAACsC,oBAAoB,IACnCrc,KAAK,CAACiT,WAAW,EAAE;MACnBkJ,iBAAiB,CAACnc,KAAK,CAACiT,WAAW,CAAC;IACxC;IACA8G,aAAa,CAACsC,oBAAoB,GAAG,KAAK;IAC1CN,gBAAgB,CAAC,KAAK,CAAC;IACvB,IAAIxB,YAAY,IAAI5B,WAAW,CAACoB,aAAa,CAACnB,YAAY,EAAE5Y,KAAK,CAACC,SAAS,CAAC,EAAE;MAC1E,MAAMrH,QAAQ,GAAGkgB,mBAAmB,CAAC9Y,KAAK,CAACC,SAAS,CAAC;MACrD8Z,aAAa,CAACnB,YAAY,GAAGhgB,QAAQ;MACrCwiB,YAAY,CAACrB,aAAa,CAAC0C,OAAO,CAAC;MACnC1C,aAAa,CAAC0C,OAAO,GAAGlB,UAAU,CAAC,MAAM;QACrChB,YAAY,GAAGva,KAAK,CAACiT,WAAW,EAAEra,QAAQ,CAAC;MAC/C,CAAC;MACD;MACA4jB,WAAW,GAAG,GAAG,GAAG,CAAC,CAAC;IAC1B;EACJ,CAAC;AACL;;AAEA;AACA,SAASE,YAAYA,CAAC;EAAEC,wBAAwB;EAAEC,YAAY;EAAExC,WAAW;EAAEf,SAAS;EAAEmD,WAAW;EAAEK,iBAAiB;EAAEC,mBAAmB;EAAE9C,gBAAgB;EAAE+C,cAAc;EAAEjtB;AAAK,CAAC,EAAE;EACnL,OAAQkQ,KAAK,IAAK;IACd,MAAMgd,UAAU,GAAGL,wBAAwB,IAAIC,YAAY;IAC3D,MAAMK,SAAS,GAAG7C,WAAW,IAAIpa,KAAK,CAAC6Z,OAAO;IAC9C,IAAI7Z,KAAK,CAACyT,MAAM,KAAK,CAAC,IAClBzT,KAAK,CAAC5Q,IAAI,KAAK,WAAW,KACzB8pB,kBAAkB,CAAClZ,KAAK,EAAE,GAAGlQ,GAAG,aAAa,CAAC,IAAIopB,kBAAkB,CAAClZ,KAAK,EAAE,GAAGlQ,GAAG,aAAa,CAAC,CAAC,EAAE;MACpG,OAAO,IAAI;IACf;IACA;IACA,IAAI,CAACupB,SAAS,IAAI,CAAC2D,UAAU,IAAI,CAACR,WAAW,IAAI,CAACK,iBAAiB,IAAI,CAACzC,WAAW,EAAE;MACjF,OAAO,KAAK;IAChB;IACA;IACA,IAAI0C,mBAAmB,EAAE;MACrB,OAAO,KAAK;IAChB;IACA;IACA,IAAI5D,kBAAkB,CAAClZ,KAAK,EAAEga,gBAAgB,CAAC,IAAIha,KAAK,CAAC5Q,IAAI,KAAK,OAAO,EAAE;MACvE,OAAO,KAAK;IAChB;IACA;IACA,IAAI8pB,kBAAkB,CAAClZ,KAAK,EAAE+c,cAAc,CAAC,KACxC/c,KAAK,CAAC5Q,IAAI,KAAK,OAAO,IAAKotB,WAAW,IAAIxc,KAAK,CAAC5Q,IAAI,KAAK,OAAO,IAAI,CAACutB,wBAAyB,CAAC,EAAE;MAClG,OAAO,KAAK;IAChB;IACA,IAAI,CAACvC,WAAW,IAAIpa,KAAK,CAAC6Z,OAAO,IAAI7Z,KAAK,CAAC5Q,IAAI,KAAK,OAAO,EAAE;MACzD,OAAO,KAAK;IAChB;IACA,IAAI,CAACgrB,WAAW,IAAIpa,KAAK,CAAC5Q,IAAI,KAAK,YAAY,IAAI4Q,KAAK,CAAC0B,OAAO,EAAEjP,MAAM,GAAG,CAAC,EAAE;MAC1EuN,KAAK,CAACwa,cAAc,CAAC,CAAC,CAAC,CAAC;MACxB,OAAO,KAAK;IAChB;IACA;IACA,IAAI,CAACwC,UAAU,IAAI,CAACR,WAAW,IAAI,CAACS,SAAS,IAAIjd,KAAK,CAAC5Q,IAAI,KAAK,OAAO,EAAE;MACrE,OAAO,KAAK;IAChB;IACA;IACA,IAAI,CAACiqB,SAAS,KAAKrZ,KAAK,CAAC5Q,IAAI,KAAK,WAAW,IAAI4Q,KAAK,CAAC5Q,IAAI,KAAK,YAAY,CAAC,EAAE;MAC3E,OAAO,KAAK;IAChB;IACA;IACA,IAAI8S,KAAK,CAACwN,OAAO,CAAC2J,SAAS,CAAC,IAAI,CAACA,SAAS,CAACnY,QAAQ,CAAClB,KAAK,CAACyT,MAAM,CAAC,IAAIzT,KAAK,CAAC5Q,IAAI,KAAK,WAAW,EAAE;MAC7F,OAAO,KAAK;IAChB;IACA;IACA,MAAM8tB,aAAa,GAAIhb,KAAK,CAACwN,OAAO,CAAC2J,SAAS,CAAC,IAAIA,SAAS,CAACnY,QAAQ,CAAClB,KAAK,CAACyT,MAAM,CAAC,IAAK,CAACzT,KAAK,CAACyT,MAAM,IAAIzT,KAAK,CAACyT,MAAM,IAAI,CAAC;IAC1H;IACA,OAAO,CAAC,CAACzT,KAAK,CAAC6Z,OAAO,IAAI7Z,KAAK,CAAC5Q,IAAI,KAAK,OAAO,KAAK8tB,aAAa;EACtE,CAAC;AACL;AAEA,SAASC,SAASA,CAAC;EAAE5P,OAAO;EAAEjV,OAAO;EAAEC,OAAO;EAAE6kB,iBAAiB;EAAE5O,eAAe;EAAE5V,QAAQ;EAAE0hB,SAAS;EAAED,cAAc;EAAEE,YAAY;EAAEwB;AAAkB,CAAC,EAAE;EACxJ,MAAMhC,aAAa,GAAG;IAClBkC,kBAAkB,EAAE,KAAK;IACzBI,oBAAoB,EAAE,KAAK;IAC3BzD,YAAY,EAAE;MAAEvkB,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAEjG,IAAI,EAAE;IAAE,CAAC;IACrC0tB,WAAW,EAAE,CAAC;IACdS,OAAO,EAAEnnB,SAAS;IAClB+lB,gBAAgB,EAAE/lB,SAAS;IAC3BgmB,cAAc,EAAE;EACpB,CAAC;EACD,MAAM+B,IAAI,GAAG9P,OAAO,CAACnL,qBAAqB,CAAC,CAAC;EAC5C,MAAMkb,cAAc,GAAGhvB,IAAI,CAAC,CAAC,CACxB6kB,aAAa,CAAC,CAACnW,SAAS,CAACogB,iBAAiB,CAAC,IAAIA,iBAAiB,GAAG,CAAC,GAAG,CAAC,GAAGA,iBAAiB,CAAC,CAC7FG,WAAW,CAAC,CAACjlB,OAAO,EAAEC,OAAO,CAAC,CAAC,CAC/BiW,eAAe,CAACA,eAAe,CAAC;EACrC,MAAM+C,WAAW,GAAGnjB,MAAM,CAACmf,OAAO,CAAC,CAACmG,IAAI,CAAC4J,cAAc,CAAC;EACxD5O,sBAAsB,CAAC;IACnBra,CAAC,EAAEuE,QAAQ,CAACvE,CAAC;IACbE,CAAC,EAAEqE,QAAQ,CAACrE,CAAC;IACbjG,IAAI,EAAE0M,KAAK,CAACpC,QAAQ,CAACtK,IAAI,EAAEgK,OAAO,EAAEC,OAAO;EAC/C,CAAC,EAAE,CACC,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC8kB,IAAI,CAACtpB,KAAK,EAAEspB,IAAI,CAACrpB,MAAM,CAAC,CAC5B,EAAEwa,eAAe,CAAC;EACnB,MAAMkN,aAAa,GAAGnK,WAAW,CAAC6B,EAAE,CAAC,YAAY,CAAC;EAClD,MAAMoK,qBAAqB,GAAGjM,WAAW,CAAC6B,EAAE,CAAC,eAAe,CAAC;EAC7DkK,cAAc,CAAC3D,UAAU,CAACA,UAAU,CAAC;EACrC,SAAS8D,YAAYA,CAACxd,SAAS,EAAEpI,OAAO,EAAE;IACtC,IAAI0Z,WAAW,EAAE;MACb,OAAO,IAAI/Y,OAAO,CAAEC,OAAO,IAAK;QAC5B6kB,cAAc,EAAErd,SAAS,CAACsZ,eAAe,CAAChI,WAAW,EAAE1Z,OAAO,EAAEmB,QAAQ,EAAE,MAAMP,OAAO,CAAC,IAAI,CAAC,CAAC,EAAEwH,SAAS,CAAC;MAC9G,CAAC,CAAC;IACN;IACA,OAAOzH,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EACjC;EACA;EACA,SAASuV,MAAMA,CAAC;IAAEgM,gBAAgB;IAAE+C,cAAc;IAAEZ,iBAAiB;IAAEW,mBAAmB;IAAEN,WAAW;IAAEnD,SAAS;IAAEa,eAAe;IAAEC,gBAAgB;IAAEsB,gBAAgB;IAAErB,WAAW;IAAEwC,YAAY;IAAEC,iBAAiB;IAAEF,wBAAwB;IAAE7sB,GAAG;IAAEssB;EAAmB,CAAC,EAAE;IACxQ,IAAIU,mBAAmB,IAAI,CAAC/C,aAAa,CAACkC,kBAAkB,EAAE;MAC1DtI,OAAO,CAAC,CAAC;IACb;IACA,MAAM+J,aAAa,GAAGlB,WAAW,IAAI,CAACG,wBAAwB,IAAI,CAACG,mBAAmB;IACtF,MAAMa,YAAY,GAAGD,aAAa,GAC5B5D,wBAAwB,CAAC;MACvBC,aAAa;MACbC,gBAAgB;MAChBzI,WAAW;MACX0I,MAAM,EAAEqD,cAAc;MACtBpD,eAAe;MACfC,gBAAgB;MAChBC,WAAW;MACXC,cAAc;MACdC,SAAS;MACTC;IACJ,CAAC,CAAC,GACAiB,yBAAyB,CAAC;MACxBxB,gBAAgB;MAChByB,gBAAgB;MAChBC;IACJ,CAAC,CAAC;IACNnK,WAAW,CAAC6B,EAAE,CAAC,YAAY,EAAEuK,YAAY,EAAE;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;IAC9D,IAAI,CAACd,mBAAmB,EAAE;MACtB;MACA,MAAMe,YAAY,GAAG/B,yBAAyB,CAAC;QAC3C/B,aAAa;QACbgC,gBAAgB;QAChB1B;MACJ,CAAC,CAAC;MACFiD,cAAc,CAAClK,EAAE,CAAC,OAAO,EAAEyK,YAAY,CAAC;MACxC;MACA,MAAMC,cAAc,GAAG5B,oBAAoB,CAAC;QACxCnC,aAAa;QACbV,SAAS;QACT8C,iBAAiB,EAAE,CAAC,CAACA,iBAAiB;QACtC7B,SAAS;QACT8B;MACJ,CAAC,CAAC;MACFkB,cAAc,CAAClK,EAAE,CAAC,MAAM,EAAE0K,cAAc,CAAC;MACzC;MACA,MAAMC,iBAAiB,GAAGxB,uBAAuB,CAAC;QAC9CxC,aAAa;QACbV,SAAS;QACTmD,WAAW;QACXL,iBAAiB;QACjB5B,YAAY;QACZwB;MACJ,CAAC,CAAC;MACFuB,cAAc,CAAClK,EAAE,CAAC,KAAK,EAAE2K,iBAAiB,CAAC;IAC/C;IACA,MAAMtqB,MAAM,GAAGipB,YAAY,CAAC;MACxBC,wBAAwB;MACxBtD,SAAS;MACTuD,YAAY;MACZJ,WAAW;MACXK,iBAAiB;MACjBzC,WAAW;MACX0C,mBAAmB;MACnBC,cAAc;MACd/C,gBAAgB;MAChBlqB;IACJ,CAAC,CAAC;IACFwtB,cAAc,CAAC7pB,MAAM,CAACA,MAAM,CAAC;IAC7B;AACR;AACA;AACA;AACA;IACQ,IAAIopB,iBAAiB,EAAE;MACnBtL,WAAW,CAAC6B,EAAE,CAAC,eAAe,EAAEoK,qBAAqB,CAAC;IAC1D,CAAC,MACI;MACDjM,WAAW,CAAC6B,EAAE,CAAC,eAAe,EAAE,IAAI,CAAC;IACzC;EACJ;EACA,SAASO,OAAOA,CAAA,EAAG;IACf2J,cAAc,CAAClK,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC;EACnC;EACA,eAAe1E,sBAAsBA,CAAC9V,QAAQ,EAAEe,MAAM,EAAE6U,eAAe,EAAE;IACrE,MAAMwP,aAAa,GAAGjF,mBAAmB,CAACngB,QAAQ,CAAC;IACnD,MAAMqlB,mBAAmB,GAAGX,cAAc,EAAEY,SAAS,CAAC,CAAC,CAACF,aAAa,EAAErkB,MAAM,EAAE6U,eAAe,CAAC;IAC/F,IAAIyP,mBAAmB,EAAE;MACrB,MAAMR,YAAY,CAACQ,mBAAmB,CAAC;IAC3C;IACA,OAAO,IAAIzlB,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAACwlB,mBAAmB,CAAC,CAAC;EACjE;EACA,eAAellB,WAAWA,CAACH,QAAQ,EAAEf,OAAO,EAAE;IAC1C,MAAMmmB,aAAa,GAAGjF,mBAAmB,CAACngB,QAAQ,CAAC;IACnD,MAAM6kB,YAAY,CAACO,aAAa,EAAEnmB,OAAO,CAAC;IAC1C,OAAO,IAAIW,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAACulB,aAAa,CAAC,CAAC;EAC3D;EACA,SAASG,YAAYA,CAACvlB,QAAQ,EAAE;IAC5B,IAAI2Y,WAAW,EAAE;MACb,MAAMyM,aAAa,GAAGjF,mBAAmB,CAACngB,QAAQ,CAAC;MACnD,MAAMwlB,gBAAgB,GAAG7M,WAAW,CAACoJ,QAAQ,CAAC,QAAQ,CAAC;MACvD,IAAIyD,gBAAgB,CAACxP,CAAC,KAAKhW,QAAQ,CAACtK,IAAI,IACpC8vB,gBAAgB,CAAC/pB,CAAC,KAAKuE,QAAQ,CAACvE,CAAC,IACjC+pB,gBAAgB,CAAC7pB,CAAC,KAAKqE,QAAQ,CAACrE,CAAC,EAAE;QACnC;QACA;QACA+oB,cAAc,EAAErd,SAAS,CAACsR,WAAW,EAAEyM,aAAa,EAAE,IAAI,EAAE;UAAE1B,IAAI,EAAE;QAAK,CAAC,CAAC;MAC/E;IACJ;EACJ;EACA,SAAS+B,WAAWA,CAAA,EAAG;IACnB,MAAMpe,SAAS,GAAGsR,WAAW,GAAG/iB,aAAa,CAAC+iB,WAAW,CAACve,IAAI,CAAC,CAAC,CAAC,GAAG;MAAEqB,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAEqa,CAAC,EAAE;IAAE,CAAC;IACxF,OAAO;MAAEva,CAAC,EAAE4L,SAAS,CAAC5L,CAAC;MAAEE,CAAC,EAAE0L,SAAS,CAAC1L,CAAC;MAAEjG,IAAI,EAAE2R,SAAS,CAAC2O;IAAE,CAAC;EAChE;EACA,SAASsJ,OAAOA,CAAC5pB,IAAI,EAAEuJ,OAAO,EAAE;IAC5B,IAAI0Z,WAAW,EAAE;MACb,OAAO,IAAI/Y,OAAO,CAAEC,OAAO,IAAK;QAC5B6kB,cAAc,EAAEpF,OAAO,CAACqB,eAAe,CAAChI,WAAW,EAAE1Z,OAAO,EAAEmB,QAAQ,EAAE,MAAMP,OAAO,CAAC,IAAI,CAAC,CAAC,EAAEnK,IAAI,CAAC;MACvG,CAAC,CAAC;IACN;IACA,OAAOkK,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EACjC;EACA,SAAS6lB,OAAOA,CAAC1E,MAAM,EAAE/hB,OAAO,EAAE;IAC9B,IAAI0Z,WAAW,EAAE;MACb,OAAO,IAAI/Y,OAAO,CAAEC,OAAO,IAAK;QAC5B6kB,cAAc,EAAEgB,OAAO,CAAC/E,eAAe,CAAChI,WAAW,EAAE1Z,OAAO,EAAEmB,QAAQ,EAAE,MAAMP,OAAO,CAAC,IAAI,CAAC,CAAC,EAAEmhB,MAAM,CAAC;MACzG,CAAC,CAAC;IACN;IACA,OAAOphB,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EACjC;EACA,SAAS8lB,cAAcA,CAAChB,WAAW,EAAE;IACjCD,cAAc,EAAEC,WAAW,CAACA,WAAW,CAAC;EAC5C;EACA,SAASiB,kBAAkBA,CAAChQ,eAAe,EAAE;IACzC8O,cAAc,EAAE9O,eAAe,CAACA,eAAe,CAAC;EACpD;EACA,SAASiQ,gBAAgBA,CAACziB,QAAQ,EAAE;IAChC,MAAM0iB,aAAa,GAAG,CAAC1hB,SAAS,CAAChB,QAAQ,CAAC,IAAIA,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAGA,QAAQ;IACzEshB,cAAc,EAAEnK,aAAa,CAACuL,aAAa,CAAC;EAChD;EACA,OAAO;IACH1Q,MAAM;IACN2F,OAAO;IACP5a,WAAW;IACX2V,sBAAsB;IACtB2P,WAAW;IACXnG,OAAO;IACPoG,OAAO;IACPC,cAAc;IACdC,kBAAkB;IAClBL,YAAY;IACZM;EACJ,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAIE,oBAAoB;AACxB,CAAC,UAAUA,oBAAoB,EAAE;EAC7BA,oBAAoB,CAAC,MAAM,CAAC,GAAG,MAAM;EACrCA,oBAAoB,CAAC,QAAQ,CAAC,GAAG,QAAQ;AAC7C,CAAC,EAAEA,oBAAoB,KAAKA,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC;AACvD,MAAMC,2BAA2B,GAAG,CAAC,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,cAAc,CAAC;AAC5F,MAAMC,yBAAyB,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAAC;EAAE/qB,KAAK;EAAEgrB,SAAS;EAAE/qB,MAAM;EAAEgrB,UAAU;EAAEC,QAAQ;EAAEC;AAAU,CAAC,EAAE;EACvF,MAAMC,UAAU,GAAGprB,KAAK,GAAGgrB,SAAS;EACpC,MAAMK,WAAW,GAAGprB,MAAM,GAAGgrB,UAAU;EACvC,MAAMK,SAAS,GAAG,CAACF,UAAU,GAAG,CAAC,GAAG,CAAC,GAAGA,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEC,WAAW,GAAG,CAAC,GAAG,CAAC,GAAGA,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EAChH,IAAID,UAAU,IAAIF,QAAQ,EAAE;IACxBI,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpC;EACA,IAAID,WAAW,IAAIF,QAAQ,EAAE;IACzBG,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpC;EACA,OAAOA,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,eAAe,EAAE;EAC1C,MAAMC,YAAY,GAAGD,eAAe,CAACre,QAAQ,CAAC,OAAO,CAAC,IAAIqe,eAAe,CAACre,QAAQ,CAAC,MAAM,CAAC;EAC1F,MAAMue,UAAU,GAAGF,eAAe,CAACre,QAAQ,CAAC,QAAQ,CAAC,IAAIqe,eAAe,CAACre,QAAQ,CAAC,KAAK,CAAC;EACxF,MAAM+d,QAAQ,GAAGM,eAAe,CAACre,QAAQ,CAAC,MAAM,CAAC;EACjD,MAAMge,QAAQ,GAAGK,eAAe,CAACre,QAAQ,CAAC,KAAK,CAAC;EAChD,OAAO;IACHse,YAAY;IACZC,UAAU;IACVR,QAAQ;IACRC;EACJ,CAAC;AACL;AACA,SAASQ,mBAAmBA,CAACC,WAAW,EAAEC,UAAU,EAAE;EAClD,OAAOxkB,IAAI,CAACD,GAAG,CAAC,CAAC,EAAEykB,UAAU,GAAGD,WAAW,CAAC;AAChD;AACA,SAASE,mBAAmBA,CAACC,WAAW,EAAEC,UAAU,EAAE;EAClD,OAAO3kB,IAAI,CAACD,GAAG,CAAC,CAAC,EAAE2kB,WAAW,GAAGC,UAAU,CAAC;AAChD;AACA,SAASC,YAAYA,CAACjuB,IAAI,EAAEkuB,OAAO,EAAEC,OAAO,EAAE;EAC1C,OAAO9kB,IAAI,CAACD,GAAG,CAAC,CAAC,EAAE8kB,OAAO,GAAGluB,IAAI,EAAEA,IAAI,GAAGmuB,OAAO,CAAC;AACtD;AACA,SAASC,GAAGA,CAACtuB,CAAC,EAAEC,CAAC,EAAE;EACf,OAAOD,CAAC,GAAG,CAACC,CAAC,GAAGA,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsuB,wBAAwBA,CAACC,WAAW,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,UAAU,EAAEC,eAAe,EAAE3sB,UAAU,EAAE6F,MAAM,EAAE+mB,WAAW,EAAE;EAC5I,IAAI;IAAEzB,QAAQ;IAAEC;EAAS,CAAC,GAAGoB,gBAAgB;EAC7C,MAAM;IAAEd,YAAY;IAAEC;EAAW,CAAC,GAAGa,gBAAgB;EACrD,MAAMK,UAAU,GAAGnB,YAAY,IAAIC,UAAU;EAC7C,MAAM;IAAEpf,QAAQ;IAAEC;EAAS,CAAC,GAAGigB,eAAe;EAC9C,MAAM;IAAEK,QAAQ;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAGP,UAAU;EAC/D,MAAM;IAAEnsB,CAAC,EAAE2sB,MAAM;IAAEzsB,CAAC,EAAE0sB,MAAM;IAAEltB,KAAK,EAAEmtB,UAAU;IAAEltB,MAAM,EAAEmtB,WAAW;IAAEC;EAAY,CAAC,GAAGf,WAAW;EACjG,IAAIgB,KAAK,GAAGjmB,IAAI,CAACuC,KAAK,CAAC6hB,YAAY,GAAGnf,QAAQ,GAAGggB,WAAW,CAACiB,QAAQ,GAAG,CAAC,CAAC;EAC1E,IAAIC,KAAK,GAAGnmB,IAAI,CAACuC,KAAK,CAAC8hB,UAAU,GAAGnf,QAAQ,GAAG+f,WAAW,CAACmB,QAAQ,GAAG,CAAC,CAAC;EACxE,MAAMxU,QAAQ,GAAGkU,UAAU,IAAIjC,QAAQ,GAAG,CAACoC,KAAK,GAAGA,KAAK,CAAC;EACzD,MAAMpU,SAAS,GAAGkU,WAAW,IAAIjC,QAAQ,GAAG,CAACqC,KAAK,GAAGA,KAAK,CAAC;EAC3D,MAAME,aAAa,GAAG,CAAC3tB,UAAU,CAAC,CAAC,CAAC,GAAGotB,UAAU;EACjD,MAAMQ,aAAa,GAAG,CAAC5tB,UAAU,CAAC,CAAC,CAAC,GAAGqtB,WAAW;EAClD;EACA,IAAIQ,MAAM,GAAG3B,YAAY,CAAChT,QAAQ,EAAE4T,QAAQ,EAAEC,QAAQ,CAAC;EACvD,IAAIe,MAAM,GAAG5B,YAAY,CAAC/S,SAAS,EAAE6T,SAAS,EAAEC,SAAS,CAAC;EAC1D;EACA,IAAIpnB,MAAM,EAAE;IACR,IAAIkoB,YAAY,GAAG,CAAC;IACpB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAI7C,QAAQ,IAAIoC,KAAK,GAAG,CAAC,EAAE;MACvBQ,YAAY,GAAGnC,mBAAmB,CAACsB,MAAM,GAAGK,KAAK,GAAGI,aAAa,EAAE9nB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC,MACI,IAAI,CAACslB,QAAQ,IAAIoC,KAAK,GAAG,CAAC,EAAE;MAC7BQ,YAAY,GAAGhC,mBAAmB,CAACmB,MAAM,GAAGhU,QAAQ,GAAGyU,aAAa,EAAE9nB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvF;IACA,IAAIulB,QAAQ,IAAIqC,KAAK,GAAG,CAAC,EAAE;MACvBO,YAAY,GAAGpC,mBAAmB,CAACuB,MAAM,GAAGM,KAAK,GAAGG,aAAa,EAAE/nB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC,MACI,IAAI,CAACulB,QAAQ,IAAIqC,KAAK,GAAG,CAAC,EAAE;MAC7BO,YAAY,GAAGjC,mBAAmB,CAACoB,MAAM,GAAGhU,SAAS,GAAGyU,aAAa,EAAE/nB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxF;IACAgoB,MAAM,GAAGvmB,IAAI,CAACD,GAAG,CAACwmB,MAAM,EAAEE,YAAY,CAAC;IACvCD,MAAM,GAAGxmB,IAAI,CAACD,GAAG,CAACymB,MAAM,EAAEE,YAAY,CAAC;EAC3C;EACA;EACA,IAAIpB,WAAW,EAAE;IACb,IAAImB,YAAY,GAAG,CAAC;IACpB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAI7C,QAAQ,IAAIoC,KAAK,GAAG,CAAC,EAAE;MACvBQ,YAAY,GAAGhC,mBAAmB,CAACmB,MAAM,GAAGK,KAAK,EAAEX,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC,MACI,IAAI,CAACzB,QAAQ,IAAIoC,KAAK,GAAG,CAAC,EAAE;MAC7BQ,YAAY,GAAGnC,mBAAmB,CAACsB,MAAM,GAAGhU,QAAQ,EAAE0T,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5E;IACA,IAAIxB,QAAQ,IAAIqC,KAAK,GAAG,CAAC,EAAE;MACvBO,YAAY,GAAGjC,mBAAmB,CAACoB,MAAM,GAAGM,KAAK,EAAEb,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC,MACI,IAAI,CAACxB,QAAQ,IAAIqC,KAAK,GAAG,CAAC,EAAE;MAC7BO,YAAY,GAAGpC,mBAAmB,CAACuB,MAAM,GAAGhU,SAAS,EAAEyT,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E;IACAiB,MAAM,GAAGvmB,IAAI,CAACD,GAAG,CAACwmB,MAAM,EAAEE,YAAY,CAAC;IACvCD,MAAM,GAAGxmB,IAAI,CAACD,GAAG,CAACymB,MAAM,EAAEE,YAAY,CAAC;EAC3C;EACA;EACA,IAAIrB,eAAe,EAAE;IACjB,IAAIjB,YAAY,EAAE;MACd;MACA,MAAMuC,iBAAiB,GAAG/B,YAAY,CAAChT,QAAQ,GAAGoU,WAAW,EAAEN,SAAS,EAAEC,SAAS,CAAC,GAAGK,WAAW;MAClGO,MAAM,GAAGvmB,IAAI,CAACD,GAAG,CAACwmB,MAAM,EAAEI,iBAAiB,CAAC;MAC5C;MACA,IAAIpoB,MAAM,EAAE;QACR,IAAIqoB,iBAAiB,GAAG,CAAC;QACzB,IAAK,CAAC/C,QAAQ,IAAI,CAACC,QAAQ,IAAMD,QAAQ,IAAI,CAACC,QAAQ,IAAIyB,UAAW,EAAE;UACnEqB,iBAAiB,GACbnC,mBAAmB,CAACoB,MAAM,GAAGS,aAAa,GAAG1U,QAAQ,GAAGoU,WAAW,EAAEznB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGynB,WAAW;QACxG,CAAC,MACI;UACDY,iBAAiB,GACbtC,mBAAmB,CAACuB,MAAM,GAAGS,aAAa,GAAG,CAACzC,QAAQ,GAAGoC,KAAK,GAAG,CAACA,KAAK,IAAID,WAAW,EAAEznB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjGynB,WAAW;QACvB;QACAO,MAAM,GAAGvmB,IAAI,CAACD,GAAG,CAACwmB,MAAM,EAAEK,iBAAiB,CAAC;MAChD;MACA;MACA,IAAItB,WAAW,EAAE;QACb,IAAIsB,iBAAiB,GAAG,CAAC;QACzB,IAAK,CAAC/C,QAAQ,IAAI,CAACC,QAAQ,IAAMD,QAAQ,IAAI,CAACC,QAAQ,IAAIyB,UAAW,EAAE;UACnEqB,iBAAiB,GAAGtC,mBAAmB,CAACuB,MAAM,GAAGjU,QAAQ,GAAGoU,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGU,WAAW;QAC7G,CAAC,MACI;UACDY,iBAAiB,GACbnC,mBAAmB,CAACoB,MAAM,GAAG,CAAChC,QAAQ,GAAGoC,KAAK,GAAG,CAACA,KAAK,IAAID,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGU,WAAW;QAChH;QACAO,MAAM,GAAGvmB,IAAI,CAACD,GAAG,CAACwmB,MAAM,EAAEK,iBAAiB,CAAC;MAChD;IACJ;IACA;IACA,IAAIvC,UAAU,EAAE;MACZ,MAAMwC,gBAAgB,GAAGjC,YAAY,CAAC/S,SAAS,GAAGmU,WAAW,EAAER,QAAQ,EAAEC,QAAQ,CAAC,GAAGO,WAAW;MAChGQ,MAAM,GAAGxmB,IAAI,CAACD,GAAG,CAACymB,MAAM,EAAEK,gBAAgB,CAAC;MAC3C,IAAItoB,MAAM,EAAE;QACR,IAAIqoB,iBAAiB,GAAG,CAAC;QACzB,IAAK,CAAC/C,QAAQ,IAAI,CAACC,QAAQ,IAAMA,QAAQ,IAAI,CAACD,QAAQ,IAAI0B,UAAW,EAAE;UACnEqB,iBAAiB,GACbnC,mBAAmB,CAACmB,MAAM,GAAG/T,SAAS,GAAGmU,WAAW,GAAGK,aAAa,EAAE9nB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGynB,WAAW;QACzG,CAAC,MACI;UACDY,iBAAiB,GACbtC,mBAAmB,CAACsB,MAAM,GAAG,CAAC9B,QAAQ,GAAGqC,KAAK,GAAG,CAACA,KAAK,IAAIH,WAAW,GAAGK,aAAa,EAAE9nB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjGynB,WAAW;QACvB;QACAQ,MAAM,GAAGxmB,IAAI,CAACD,GAAG,CAACymB,MAAM,EAAEI,iBAAiB,CAAC;MAChD;MACA,IAAItB,WAAW,EAAE;QACb,IAAIsB,iBAAiB,GAAG,CAAC;QACzB,IAAK,CAAC/C,QAAQ,IAAI,CAACC,QAAQ,IAAMA,QAAQ,IAAI,CAACD,QAAQ,IAAI0B,UAAW,EAAE;UACnEqB,iBAAiB,GAAGtC,mBAAmB,CAACsB,MAAM,GAAG/T,SAAS,GAAGmU,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGU,WAAW;QAC9G,CAAC,MACI;UACDY,iBAAiB,GACbnC,mBAAmB,CAACmB,MAAM,GAAG,CAAC9B,QAAQ,GAAGqC,KAAK,GAAG,CAACA,KAAK,IAAIH,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGU,WAAW;QAChH;QACAQ,MAAM,GAAGxmB,IAAI,CAACD,GAAG,CAACymB,MAAM,EAAEI,iBAAiB,CAAC;MAChD;IACJ;EACJ;EACAT,KAAK,GAAGA,KAAK,IAAIA,KAAK,GAAG,CAAC,GAAGK,MAAM,GAAG,CAACA,MAAM,CAAC;EAC9CP,KAAK,GAAGA,KAAK,IAAIA,KAAK,GAAG,CAAC,GAAGM,MAAM,GAAG,CAACA,MAAM,CAAC;EAC9C,IAAIlB,eAAe,EAAE;IACjB,IAAIE,UAAU,EAAE;MACZ,IAAI3T,QAAQ,GAAGC,SAAS,GAAGmU,WAAW,EAAE;QACpCG,KAAK,GAAG,CAACpB,GAAG,CAAClB,QAAQ,EAAEC,QAAQ,CAAC,GAAG,CAACmC,KAAK,GAAGA,KAAK,IAAID,WAAW;MACpE,CAAC,MACI;QACDC,KAAK,GAAG,CAAClB,GAAG,CAAClB,QAAQ,EAAEC,QAAQ,CAAC,GAAG,CAACqC,KAAK,GAAGA,KAAK,IAAIH,WAAW;MACpE;IACJ,CAAC,MACI;MACD,IAAI5B,YAAY,EAAE;QACd+B,KAAK,GAAGF,KAAK,GAAGD,WAAW;QAC3BlC,QAAQ,GAAGD,QAAQ;MACvB,CAAC,MACI;QACDoC,KAAK,GAAGE,KAAK,GAAGH,WAAW;QAC3BnC,QAAQ,GAAGC,QAAQ;MACvB;IACJ;EACJ;EACA,MAAM7qB,CAAC,GAAG4qB,QAAQ,GAAG+B,MAAM,GAAGK,KAAK,GAAGL,MAAM;EAC5C,MAAMzsB,CAAC,GAAG2qB,QAAQ,GAAG+B,MAAM,GAAGM,KAAK,GAAGN,MAAM;EAC5C,OAAO;IACHltB,KAAK,EAAEmtB,UAAU,IAAIjC,QAAQ,GAAG,CAACoC,KAAK,GAAGA,KAAK,CAAC;IAC/CrtB,MAAM,EAAEmtB,WAAW,IAAIjC,QAAQ,GAAG,CAACqC,KAAK,GAAGA,KAAK,CAAC;IACjDltB,CAAC,EAAEP,UAAU,CAAC,CAAC,CAAC,GAAGutB,KAAK,IAAI,CAACpC,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG5qB,CAAC;IACnDE,CAAC,EAAET,UAAU,CAAC,CAAC,CAAC,GAAGytB,KAAK,IAAI,CAACrC,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG3qB;EACtD,CAAC;AACL;AAEA,MAAM2tB,cAAc,GAAG;EAAEnuB,KAAK,EAAE,CAAC;EAAEC,MAAM,EAAE,CAAC;EAAEK,CAAC,EAAE,CAAC;EAAEE,CAAC,EAAE;AAAE,CAAC;AAC1D,MAAM4tB,eAAe,GAAG;EACpB,GAAGD,cAAc;EACjBZ,QAAQ,EAAE,CAAC;EACXE,QAAQ,EAAE,CAAC;EACXJ,WAAW,EAAE;AACjB,CAAC;AACD,SAASgB,kBAAkBA,CAACpvB,IAAI,EAAE;EAC9B,OAAO,CACH,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAACA,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,EAAEf,IAAI,CAAC2D,QAAQ,CAAC3C,MAAM,CAAC,CAC9C;AACL;AACA,SAASquB,iBAAiBA,CAAC1V,KAAK,EAAElR,MAAM,EAAE3H,UAAU,EAAE;EAClD,MAAMO,CAAC,GAAGoH,MAAM,CAACnH,QAAQ,CAACD,CAAC,GAAGsY,KAAK,CAACrY,QAAQ,CAACD,CAAC;EAC9C,MAAME,CAAC,GAAGkH,MAAM,CAACnH,QAAQ,CAACC,CAAC,GAAGoY,KAAK,CAACrY,QAAQ,CAACC,CAAC;EAC9C,MAAMR,KAAK,GAAG4Y,KAAK,CAAChW,QAAQ,CAAC5C,KAAK,IAAI,CAAC;EACvC,MAAMC,MAAM,GAAG2Y,KAAK,CAAChW,QAAQ,CAAC3C,MAAM,IAAI,CAAC;EACzC,MAAMytB,aAAa,GAAG3tB,UAAU,CAAC,CAAC,CAAC,GAAGC,KAAK;EAC3C,MAAM2tB,aAAa,GAAG5tB,UAAU,CAAC,CAAC,CAAC,GAAGE,MAAM;EAC5C,OAAO,CACH,CAACK,CAAC,GAAGotB,aAAa,EAAEltB,CAAC,GAAGmtB,aAAa,CAAC,EACtC,CAACrtB,CAAC,GAAGN,KAAK,GAAG0tB,aAAa,EAAEltB,CAAC,GAAGP,MAAM,GAAG0tB,aAAa,CAAC,CAC1D;AACL;AACA,SAASY,SAASA,CAAC;EAAE/U,OAAO;EAAErU,MAAM;EAAE4X,aAAa;EAAEyR,QAAQ;EAAE/I;AAAM,CAAC,EAAE;EACpE,MAAMhC,SAAS,GAAGppB,MAAM,CAACmf,OAAO,CAAC;EACjC,SAASS,MAAMA,CAAC;IAAEuR,eAAe;IAAEiB,UAAU;IAAEC,eAAe;IAAE+B,eAAe;IAAEC,aAAa;IAAEC,QAAQ;IAAEC,WAAW;IAAEC;EAAc,CAAC,EAAE;IACpI,IAAIC,UAAU,GAAG;MAAE,GAAGX;IAAe,CAAC;IACtC,IAAI7B,WAAW,GAAG;MAAE,GAAG8B;IAAgB,CAAC;IACxC,MAAM7B,gBAAgB,GAAGhB,mBAAmB,CAACC,eAAe,CAAC;IAC7D,IAAIvsB,IAAI,GAAGsC,SAAS;IACpB,IAAI4K,eAAe,GAAG,IAAI;IAC1B,IAAI8L,UAAU,GAAG,EAAE;IACnB,IAAI1S,UAAU,GAAGhE,SAAS,CAAC,CAAC;IAC5B,IAAIwtB,YAAY,GAAGxtB,SAAS;IAC5B,IAAIorB,WAAW,GAAGprB,SAAS;IAC3B,MAAMytB,WAAW,GAAG50B,IAAI,CAAC,CAAC,CACrBilB,EAAE,CAAC,OAAO,EAAGpT,KAAK,IAAK;MACxB,MAAM;QAAEnL,UAAU;QAAEoL,SAAS;QAAE3C,QAAQ;QAAEE,UAAU;QAAE1J,UAAU;QAAEkvB;MAAY,CAAC,GAAGlS,aAAa,CAAC,CAAC;MAChG9d,IAAI,GAAG6B,UAAU,CAACU,GAAG,CAAC2D,MAAM,CAAC;MAC7B,IAAI,CAAClG,IAAI,EAAE;QACP;MACJ;MACAkN,eAAe,GAAG8iB,WAAW,EAAE5gB,qBAAqB,CAAC,CAAC,IAAI,IAAI;MAC9D,MAAM;QAAE/B,QAAQ;QAAEC;MAAS,CAAC,GAAGP,kBAAkB,CAACC,KAAK,CAACiT,WAAW,EAAE;QACjEhT,SAAS;QACT3C,QAAQ;QACRE,UAAU;QACV0C;MACJ,CAAC,CAAC;MACF2iB,UAAU,GAAG;QACT9uB,KAAK,EAAEf,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,IAAI,CAAC;QAC/BC,MAAM,EAAEhB,IAAI,CAAC2D,QAAQ,CAAC3C,MAAM,IAAI,CAAC;QACjCK,CAAC,EAAErB,IAAI,CAACsB,QAAQ,CAACD,CAAC,IAAI,CAAC;QACvBE,CAAC,EAAEvB,IAAI,CAACsB,QAAQ,CAACC,CAAC,IAAI;MAC1B,CAAC;MACD8rB,WAAW,GAAG;QACV,GAAGwC,UAAU;QACbvB,QAAQ,EAAEjhB,QAAQ;QAClBmhB,QAAQ,EAAElhB,QAAQ;QAClB8gB,WAAW,EAAEyB,UAAU,CAAC9uB,KAAK,GAAG8uB,UAAU,CAAC7uB;MAC/C,CAAC;MACDsF,UAAU,GAAGhE,SAAS;MACtB,IAAItC,IAAI,CAACuG,QAAQ,KAAKvG,IAAI,CAAC2G,MAAM,KAAK,QAAQ,IAAI3G,IAAI,CAAC4G,YAAY,CAAC,EAAE;QAClEN,UAAU,GAAGzE,UAAU,CAACU,GAAG,CAACvC,IAAI,CAACuG,QAAQ,CAAC;QAC1CupB,YAAY,GAAGxpB,UAAU,IAAItG,IAAI,CAAC2G,MAAM,KAAK,QAAQ,GAAGyoB,kBAAkB,CAAC9oB,UAAU,CAAC,GAAGhE,SAAS;MACtG;MACA;AACZ;AACA;AACA;MACY0W,UAAU,GAAG,EAAE;MACf0U,WAAW,GAAGprB,SAAS;MACvB,KAAK,MAAM,CAAC2tB,OAAO,EAAEtW,KAAK,CAAC,IAAI9X,UAAU,EAAE;QACvC,IAAI8X,KAAK,CAACpT,QAAQ,KAAKL,MAAM,EAAE;UAC3B8S,UAAU,CAACxZ,IAAI,CAAC;YACZtD,EAAE,EAAE+zB,OAAO;YACX3uB,QAAQ,EAAE;cAAE,GAAGqY,KAAK,CAACrY;YAAS,CAAC;YAC/BqF,MAAM,EAAEgT,KAAK,CAAChT;UAClB,CAAC,CAAC;UACF,IAAIgT,KAAK,CAAChT,MAAM,KAAK,QAAQ,IAAIgT,KAAK,CAAC/S,YAAY,EAAE;YACjD,MAAMD,MAAM,GAAG0oB,iBAAiB,CAAC1V,KAAK,EAAE3Z,IAAI,EAAE2Z,KAAK,CAACzY,MAAM,IAAIJ,UAAU,CAAC;YACzE,IAAI4sB,WAAW,EAAE;cACbA,WAAW,GAAG,CACV,CAACtlB,IAAI,CAACF,GAAG,CAACvB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE+mB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEtlB,IAAI,CAACF,GAAG,CAACvB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE+mB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACtF,CAACtlB,IAAI,CAACD,GAAG,CAACxB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE+mB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEtlB,IAAI,CAACD,GAAG,CAACxB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE+mB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACzF;YACL,CAAC,MACI;cACDA,WAAW,GAAG/mB,MAAM;YACxB;UACJ;QACJ;MACJ;MACA8oB,aAAa,GAAGziB,KAAK,EAAE;QAAE,GAAG6iB;MAAW,CAAC,CAAC;IAC7C,CAAC,CAAC,CACGzP,EAAE,CAAC,MAAM,EAAGpT,KAAK,IAAK;MACvB,MAAM;QAAEC,SAAS;QAAE3C,QAAQ;QAAEE,UAAU;QAAE1J,UAAU,EAAEovB;MAAgB,CAAC,GAAGpS,aAAa,CAAC,CAAC;MACxF,MAAMyP,eAAe,GAAGxgB,kBAAkB,CAACC,KAAK,CAACiT,WAAW,EAAE;QAC1DhT,SAAS;QACT3C,QAAQ;QACRE,UAAU;QACV0C;MACJ,CAAC,CAAC;MACF,MAAMijB,YAAY,GAAG,EAAE;MACvB,IAAI,CAACnwB,IAAI,EAAE;QACP;MACJ;MACA,MAAM;QAAEqB,CAAC,EAAE+uB,KAAK;QAAE7uB,CAAC,EAAE8uB,KAAK;QAAEtvB,KAAK,EAAEgrB,SAAS;QAAE/qB,MAAM,EAAEgrB;MAAW,CAAC,GAAG6D,UAAU;MAC/E,MAAMS,MAAM,GAAG,CAAC,CAAC;MACjB,MAAMxvB,UAAU,GAAGd,IAAI,CAACkB,MAAM,IAAIgvB,eAAe;MACjD,MAAM;QAAEnvB,KAAK;QAAEC,MAAM;QAAEK,CAAC;QAAEE;MAAE,CAAC,GAAG6rB,wBAAwB,CAACC,WAAW,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,UAAU,EAAEC,eAAe,EAAE3sB,UAAU,EAAEgvB,YAAY,EAAEpC,WAAW,CAAC;MAC5K,MAAM6C,aAAa,GAAGxvB,KAAK,KAAKgrB,SAAS;MACzC,MAAMyE,cAAc,GAAGxvB,MAAM,KAAKgrB,UAAU;MAC5C,MAAMyE,YAAY,GAAGpvB,CAAC,KAAK+uB,KAAK,IAAIG,aAAa;MACjD,MAAMG,YAAY,GAAGnvB,CAAC,KAAK8uB,KAAK,IAAIG,cAAc;MAClD,IAAI,CAACC,YAAY,IAAI,CAACC,YAAY,IAAI,CAACH,aAAa,IAAI,CAACC,cAAc,EAAE;QACrE;MACJ;MACA,IAAIC,YAAY,IAAIC,YAAY,IAAI5vB,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QAC5EwvB,MAAM,CAACjvB,CAAC,GAAGovB,YAAY,GAAGpvB,CAAC,GAAGwuB,UAAU,CAACxuB,CAAC;QAC1CivB,MAAM,CAAC/uB,CAAC,GAAGmvB,YAAY,GAAGnvB,CAAC,GAAGsuB,UAAU,CAACtuB,CAAC;QAC1CsuB,UAAU,CAACxuB,CAAC,GAAGivB,MAAM,CAACjvB,CAAC;QACvBwuB,UAAU,CAACtuB,CAAC,GAAG+uB,MAAM,CAAC/uB,CAAC;QACvB;AAChB;AACA;AACA;QACgB,IAAIyX,UAAU,CAACvZ,MAAM,GAAG,CAAC,EAAE;UACvB,MAAMqa,OAAO,GAAGzY,CAAC,GAAG+uB,KAAK;UACzB,MAAMrW,OAAO,GAAGxY,CAAC,GAAG8uB,KAAK;UACzB,KAAK,MAAMlX,SAAS,IAAIH,UAAU,EAAE;YAChCG,SAAS,CAAC7X,QAAQ,GAAG;cACjBD,CAAC,EAAE8X,SAAS,CAAC7X,QAAQ,CAACD,CAAC,GAAGyY,OAAO,GAAGhZ,UAAU,CAAC,CAAC,CAAC,IAAIC,KAAK,GAAGgrB,SAAS,CAAC;cACvExqB,CAAC,EAAE4X,SAAS,CAAC7X,QAAQ,CAACC,CAAC,GAAGwY,OAAO,GAAGjZ,UAAU,CAAC,CAAC,CAAC,IAAIE,MAAM,GAAGgrB,UAAU;YAC5E,CAAC;YACDmE,YAAY,CAAC3wB,IAAI,CAAC2Z,SAAS,CAAC;UAChC;QACJ;MACJ;MACA,IAAIoX,aAAa,IAAIC,cAAc,EAAE;QACjCF,MAAM,CAACvvB,KAAK,GACRwvB,aAAa,KAAK,CAACf,eAAe,IAAIA,eAAe,KAAK,YAAY,CAAC,GAAGzuB,KAAK,GAAG8uB,UAAU,CAAC9uB,KAAK;QACtGuvB,MAAM,CAACtvB,MAAM,GACTwvB,cAAc,KAAK,CAAChB,eAAe,IAAIA,eAAe,KAAK,UAAU,CAAC,GAAGxuB,MAAM,GAAG6uB,UAAU,CAAC7uB,MAAM;QACvG6uB,UAAU,CAAC9uB,KAAK,GAAGuvB,MAAM,CAACvvB,KAAK;QAC/B8uB,UAAU,CAAC7uB,MAAM,GAAGsvB,MAAM,CAACtvB,MAAM;MACrC;MACA;MACA,IAAIsF,UAAU,IAAItG,IAAI,CAAC4G,YAAY,EAAE;QACjC,MAAM+pB,MAAM,GAAG7vB,UAAU,CAAC,CAAC,CAAC,IAAIwvB,MAAM,CAACvvB,KAAK,IAAI,CAAC,CAAC;QAClD,IAAIuvB,MAAM,CAACjvB,CAAC,IAAIivB,MAAM,CAACjvB,CAAC,GAAGsvB,MAAM,EAAE;UAC/Bd,UAAU,CAACxuB,CAAC,GAAGsvB,MAAM;UACrBtD,WAAW,CAAChsB,CAAC,GAAGgsB,WAAW,CAAChsB,CAAC,IAAIivB,MAAM,CAACjvB,CAAC,GAAGsvB,MAAM,CAAC;QACvD;QACA,MAAMC,MAAM,GAAG9vB,UAAU,CAAC,CAAC,CAAC,IAAIwvB,MAAM,CAACtvB,MAAM,IAAI,CAAC,CAAC;QACnD,IAAIsvB,MAAM,CAAC/uB,CAAC,IAAI+uB,MAAM,CAAC/uB,CAAC,GAAGqvB,MAAM,EAAE;UAC/Bf,UAAU,CAACtuB,CAAC,GAAGqvB,MAAM;UACrBvD,WAAW,CAAC9rB,CAAC,GAAG8rB,WAAW,CAAC9rB,CAAC,IAAI+uB,MAAM,CAAC/uB,CAAC,GAAGqvB,MAAM,CAAC;QACvD;MACJ;MACA,MAAMvE,SAAS,GAAGP,kBAAkB,CAAC;QACjC/qB,KAAK,EAAE8uB,UAAU,CAAC9uB,KAAK;QACvBgrB,SAAS;QACT/qB,MAAM,EAAE6uB,UAAU,CAAC7uB,MAAM;QACzBgrB,UAAU;QACVC,QAAQ,EAAEqB,gBAAgB,CAACrB,QAAQ;QACnCC,QAAQ,EAAEoB,gBAAgB,CAACpB;MAC/B,CAAC,CAAC;MACF,MAAM2E,UAAU,GAAG;QAAE,GAAGhB,UAAU;QAAExD;MAAU,CAAC;MAC/C,MAAMyE,UAAU,GAAGlB,YAAY,GAAG5iB,KAAK,EAAE6jB,UAAU,CAAC;MACpD,IAAIC,UAAU,KAAK,KAAK,EAAE;QACtB;MACJ;MACApB,QAAQ,GAAG1iB,KAAK,EAAE6jB,UAAU,CAAC;MAC7BtB,QAAQ,CAACe,MAAM,EAAEH,YAAY,CAAC;IAClC,CAAC,CAAC,CACG/P,EAAE,CAAC,KAAK,EAAGpT,KAAK,IAAK;MACtB2iB,WAAW,GAAG3iB,KAAK,EAAE;QAAE,GAAG6iB;MAAW,CAAC,CAAC;MACvCrJ,KAAK,GAAG;QAAE,GAAGqJ;MAAW,CAAC,CAAC;IAC9B,CAAC,CAAC;IACFrL,SAAS,CAAC9D,IAAI,CAACqP,WAAW,CAAC;EAC/B;EACA,SAASpP,OAAOA,CAAA,EAAG;IACf6D,SAAS,CAACpE,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC;EAC/B;EACA,OAAO;IACHpF,MAAM;IACN2F;EACJ,CAAC;AACL;AAEA,SAASviB,kBAAkB,EAAEd,cAAc,EAAEe,UAAU,EAAEd,eAAe,EAAEe,QAAQ,EAAEqtB,oBAAoB,EAAEnuB,aAAa,EAAEogB,MAAM,EAAEyG,QAAQ,EAAEC,SAAS,EAAE6F,SAAS,EAAEmF,SAAS,EAAE1D,2BAA2B,EAAEC,yBAAyB,EAAE7Z,OAAO,EAAEuG,cAAc,EAAE3Z,sBAAsB,EAAE4N,YAAY,EAAE1J,SAAS,EAAE+F,WAAW,EAAE5C,qBAAqB,EAAE+B,KAAK,EAAEhB,aAAa,EAAEsB,qBAAqB,EAAEkO,eAAe,EAAErM,OAAO,EAAE9M,oBAAoB,EAAE5B,aAAa,EAAE8Q,wBAAwB,EAAEnH,WAAW,EAAEkK,mBAAmB,EAAEkB,aAAa,EAAE5N,gBAAgB,EAAE0G,gBAAgB,EAAE5E,iBAAiB,EAAEhF,mBAAmB,EAAE6N,aAAa,EAAEsD,aAAa,EAAE0E,eAAe,EAAEtO,mBAAmB,EAAE+J,qBAAqB,EAAE7D,gBAAgB,EAAE0B,eAAe,EAAEiH,iBAAiB,EAAEpI,iBAAiB,EAAE/M,WAAW,EAAEoC,sBAAsB,EAAEmT,WAAW,EAAEjV,iBAAiB,EAAEJ,yBAAyB,EAAEsW,uBAAuB,EAAE3V,cAAc,EAAEwB,cAAc,EAAEjD,WAAW,EAAEkE,kBAAkB,EAAE8I,kBAAkB,EAAEkI,iBAAiB,EAAEvC,eAAe,EAAE7M,oBAAoB,EAAE1G,sBAAsB,EAAEoa,kBAAkB,EAAEtc,cAAc,EAAEQ,iBAAiB,EAAEsJ,kBAAkB,EAAEpH,UAAU,EAAE8R,aAAa,EAAE1D,cAAc,EAAEjO,kBAAkB,EAAEoM,OAAO,EAAEoC,YAAY,EAAEzO,UAAU,EAAEmK,SAAS,EAAEF,YAAY,EAAEwC,iBAAiB,EAAE7J,SAAS,EAAEyB,UAAU,EAAE3F,gBAAgB,EAAE+c,KAAK,EAAE9X,oBAAoB,EAAE2O,aAAa,EAAE9I,SAAS,EAAEoB,oBAAoB,EAAE+R,eAAe,EAAEnS,YAAY,EAAE4N,uBAAuB,EAAEkE,sBAAsB,EAAE9B,mBAAmB,EAAE3N,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}