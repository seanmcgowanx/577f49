{"ast":null,"code":"/* @ts-self-types=\"./index.d.ts\" */\nimport { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js';\nexport { urlAlphabet } from './url-alphabet/index.js';\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes));\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1;\n  let step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return (size = defaultSize) => {\n    let id = '';\n    while (true) {\n      let bytes = getRandom(step);\n      let j = step | 0;\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length >= size) return id;\n      }\n    }\n  };\n};\nexport let customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size | 0, random);\nexport let nanoid = (size = 21) => {\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size |= 0));\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63];\n  }\n  return id;\n};","map":{"version":3,"names":["urlAlphabet","scopedUrlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","defaultSize","getRandom","mask","Math","log2","length","step","size","id","j","customAlphabet","nanoid"],"sources":["/Users/seanmcgowan/Desktop/journey-builder/node_modules/nanoid/index.browser.js"],"sourcesContent":["/* @ts-self-types=\"./index.d.ts\" */\nimport { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step | 0\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length >= size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size | 0, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array((size |= 0)))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n"],"mappings":"AAAA;AACA,SAASA,WAAW,IAAIC,iBAAiB,QAAQ,yBAAyB;AAC1E,SAASD,WAAW,QAAQ,yBAAyB;AACrD,OAAO,IAAIE,MAAM,GAAGC,KAAK,IAAIC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAACH,KAAK,CAAC,CAAC;AAC1E,OAAO,IAAII,YAAY,GAAGA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,KAAK;EAC9D,IAAIC,IAAI,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,IAAI,CAACL,QAAQ,CAACM,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC;EACpD,IAAIC,IAAI,GAAG,CAAC,EAAG,GAAG,GAAGJ,IAAI,GAAGF,WAAW,GAAID,QAAQ,CAACM,MAAM,CAAC;EAC3D,OAAO,CAACE,IAAI,GAAGP,WAAW,KAAK;IAC7B,IAAIQ,EAAE,GAAG,EAAE;IACX,OAAO,IAAI,EAAE;MACX,IAAId,KAAK,GAAGO,SAAS,CAACK,IAAI,CAAC;MAC3B,IAAIG,CAAC,GAAGH,IAAI,GAAG,CAAC;MAChB,OAAOG,CAAC,EAAE,EAAE;QACVD,EAAE,IAAIT,QAAQ,CAACL,KAAK,CAACe,CAAC,CAAC,GAAGP,IAAI,CAAC,IAAI,EAAE;QACrC,IAAIM,EAAE,CAACH,MAAM,IAAIE,IAAI,EAAE,OAAOC,EAAE;MAClC;IACF;EACF,CAAC;AACH,CAAC;AACD,OAAO,IAAIE,cAAc,GAAGA,CAACX,QAAQ,EAAEQ,IAAI,GAAG,EAAE,KAC9CT,YAAY,CAACC,QAAQ,EAAEQ,IAAI,GAAG,CAAC,EAAEd,MAAM,CAAC;AAC1C,OAAO,IAAIkB,MAAM,GAAGA,CAACJ,IAAI,GAAG,EAAE,KAAK;EACjC,IAAIC,EAAE,GAAG,EAAE;EACX,IAAId,KAAK,GAAGC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAAEU,IAAI,IAAI,CAAE,CAAC,CAAC;EAC/D,OAAOA,IAAI,EAAE,EAAE;IACbC,EAAE,IAAIhB,iBAAiB,CAACE,KAAK,CAACa,IAAI,CAAC,GAAG,EAAE,CAAC;EAC3C;EACA,OAAOC,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}